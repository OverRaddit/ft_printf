
------------------------------
|        string.c            |
|                            |
------------------------------

make: `libftprintf.a' is up to date.
Ouch, compile error, maybe from here maybe not
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o libftprintf.a
------------------------------
|        number.c            |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf_util4.c -o ft_printf_util4.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o
Ouch, compile error, maybe from here maybe not
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o libftprintf.a
------------------------------
|        char.c              |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf_util4.c -o ft_printf_util4.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o
Ouch, compile error, maybe from here maybe not
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o libftprintf.a
------------------------------
|        unsigned_int.c      |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf_util4.c -o ft_printf_util4.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o
Ouch, compile error, maybe from here maybe not
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o libftprintf.a
------------------------------
|        hexa.c              |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf_util4.c -o ft_printf_util4.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o
Ouch, compile error, maybe from here maybe not
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o libftprintf.a
------------------------------
|        percent.c           |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf_util4.c -o ft_printf_util4.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o
Ouch, compile error, maybe from here maybe not
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o libftprintf.a
------------------------------
|        pointer.c           |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf_util4.c -o ft_printf_util4.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf_util4.o ft_printf.o
######### 42TESTERS-PRINTF ##########
#####42TESTS-PRINTF#####
----------Test 1 : ----------
"Simple input test" // 1st '*' = -4, 2nd '*' = 0

1c1
< Simple input test --- Return : ¾¾¾17width: 0
---
> Simple input test --- Return : 17

----------Test 2 : ----------
"%i, %d, %d, %d, %d, %s, %c, %d, %u, %x, %X" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, abcdefghijklmnop, a, 97, 4294967284, fffffff4, FFFFFFF4 --- Return : 88

----------Test 3 : ----------
"%0i, %0d, %0d, %0d, %0d, %0d, %0d, %0d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 4 : ----------
"%1i, %1d, %1d, %1d, %1d, %1d, %1d, %1d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 5 : ----------
"%2i, %2d, %2d, %2d, %2d, %2d, %2d, %2d" // 1st '*' = -4, 2nd '*' = 0

0a1
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 6 : ----------
"%3i, %3d, %3d, %3d, %3d, %3d, %3d, %3d" // 1st '*' = -4, 2nd '*' = 0

0a1
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 7 : ----------
"%4i, %4d, %4d, %4d, %4d, %4d, %4d, %4d" // 1st '*' = -4, 2nd '*' = 0

0a1
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 8 : ----------
"%5i, %5d, %5d, %5d, %5d, %5d, %5d, %5d" // 1st '*' = -4, 2nd '*' = 0

0a1
>     8,   -12, 123456789,     0, -12345678,    97, -2147483648, 2147483647 --- Return : 73

----------Test 9 : ----------
"%6i, %6d, %6d, %6d, %6d, %6d, %6d, %6d" // 1st '*' = -4, 2nd '*' = 0

0a1
>      8,    -12, 123456789,      0, -12345678,     97, -2147483648, 2147483647 --- Return : 77

----------Test 10 : ----------
"%7i, %7d, %7d, %7d, %7d, %7d, %7d, %7d" // 1st '*' = -4, 2nd '*' = 0

0a1
>       8,     -12, 123456789,       0, -12345678,      97, -2147483648, 2147483647 --- Return : 81

----------Test 11 : ----------
"%8i, %8d, %8d, %8d, %8d, %8d, %8d, %8d" // 1st '*' = -4, 2nd '*' = 0

0a1
>        8,      -12, 123456789,        0, -12345678,       97, -2147483648, 2147483647 --- Return : 85

----------Test 12 : ----------
"%0.i, %0.d, %0.d, %0.d, %0.d, %0.d, %0.d, %0.d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 13 : ----------
"%.0i, %.0d, %.0d, %.0d, %.0d, %.0d, %.0d, %.0d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 14 : ----------
"%0.0i, %0.0d, %0.0d, %0.0d, %0.0d, %0.0d, %0.0d, %0.0d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 15 : ----------
"%-0i, %-0d, %-0d, %-0d, %-0d, %-0d, %-0d, %-0d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 16 : ----------
"%0-i, %0-d, %0-d, %0-d, %0-d, %0-d, %0-d, %0-d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 17 : ----------
"%-.i, %-.d, %-.d, %-.d, %-.d, %-.d, %-.d, %-.d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 18 : ----------
"%-.0i, %-.0d, %-.0d, %-.0d, %-.0d, %-.0d, %-.0d, %-.0d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 19 : ----------
"%-i, %-d, %-d, %-d, %-d, %-d, %-d, %-d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 20 : ----------
"%.i, %.d, %.d, %.d, %.d, %.d, %.d, %.d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 21 : ----------
"%-0.0i, %-0.0d, %-0.0d, %-0.0d, %-0.0d, %-0.0d, %-0.0d, %-0.0d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 22 : ----------
"%00i, %00d, %00d, %00d, %00d, %00d, %00d, %00d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 23 : ----------
"%1.i, %1.d, %1.d, %1.d, %1.d, %1.d, %1.d, %1.d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 24 : ----------
"%.1i, %.1d, %.1d, %.1d, %.1d, %.1d, %.1d, %.1d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 25 : ----------
"%1.1i, %1.1d, %1.1d, %1.1d, %1.1d, %1.1d, %1.1d, %1.1d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 26 : ----------
"%-1i, %-1d, %-1d, %-1d, %-1d, %-1d, %-1d, %-1d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 27 : ----------
"%-01i, %-01d, %-01d, %-01d, %-01d, %-01d, %-01d, %-01d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 28 : ----------
"%-1.i, %-1.d, %-1.d, %-1.d, %-1.d, %-1.d, %-1d, %-1d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 29 : ----------
"%-.1i, %-.1d, %-.1d, %-.1d, %-.1d, %-.1d, %-.1d, %-.1d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 30 : ----------
"%-0.1i, %-0.1d, %-0.1d, %-0.1d, %-0.1d, %-0.1d, %-0.1d, %-0.1d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 31 : ----------
"%-1.0i, %-1.0d, %-1.0d, %-1.0d, %-1.0d, %-1.0d, %-1.0d, %-1.0d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 32 : ----------
"%-1.1i, %-1.1d, %-1.1d, %-1.1d, %-1.1d, %-1.1d, %-1.1d, %-1.1d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 33 : ----------
"%1.0i, %1.0d, %1.0d, %1.0d, %1.0d, %1.0d, %1.0d, %1.0d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 34 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 35 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 36 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 37 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = -4, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 38 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = -3, 2nd '*' = 0

0a1
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 39 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = -3, 2nd '*' = 0

0a1
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 40 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = -3, 2nd '*' = 0

0a1
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 41 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = -3, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 42 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = -2, 2nd '*' = 0

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 43 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = -2, 2nd '*' = 0

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 44 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = -2, 2nd '*' = 0

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 45 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = -2, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 46 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = -1, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 47 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = -1, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 48 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = -1, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 49 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = -1, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 50 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = 0, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 51 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = 0, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 52 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = 0, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 53 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = 0, 2nd '*' = 0

0a1
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 54 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = 1, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 55 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = 1, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 56 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = 1, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 57 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = 1, 2nd '*' = 0

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 58 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = 2, 2nd '*' = 0

0a1
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 59 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = 2, 2nd '*' = 0

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 60 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = 2, 2nd '*' = 0

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 61 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = 2, 2nd '*' = 0

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 62 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = 3, 2nd '*' = 0

0a1
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 63 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = 3, 2nd '*' = 0

0a1
> 008, -12, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 65

----------Test 64 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = 3, 2nd '*' = 0

0a1
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 65 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = 3, 2nd '*' = 0

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 66 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = 4, 2nd '*' = 0

0a1
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 67 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = 4, 2nd '*' = 0

0a1
> 0008, -012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 69

----------Test 68 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = 4, 2nd '*' = 0

0a1
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 69 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = 4, 2nd '*' = 0

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 70 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = -2

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 71 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = -2

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 72 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = -2

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 73 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = -1

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 74 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = -1

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 75 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = -1

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 76 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = 0

0a1
> 8 , -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 77 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = 0

0a1
> 8 , -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 78 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = 0

0a1
> 8 , -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 79 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = 1

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 80 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = 1

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 81 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = 1

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 82 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 83 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 84 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 85 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 86 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 87 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 88 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 89 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 90 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 91 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = -2

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 92 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = -2

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 93 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = -2

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 94 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = -1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 95 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = -1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 96 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = -1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 97 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = 0

0a1
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 98 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = 0

0a1
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 99 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = 0

0a1
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 100 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = 1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 101 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = 1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 102 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = 1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 103 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 104 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 105 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 106 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 107 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 108 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 109 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 110 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 111 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 112 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = -2

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 113 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = -2

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 114 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = -2

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 115 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = -1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 116 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = -1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 117 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = -1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 118 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = 0

0a1
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 119 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = 0

0a1
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 120 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = 0

0a1
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 121 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = 1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 122 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = 1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 123 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = 1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 124 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 125 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 126 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 127 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 128 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 129 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 130 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 131 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 132 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 133 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = -2

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 134 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = -2

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 135 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = -2

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 136 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = -1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 137 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = -1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 138 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = -1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 139 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = 0

0a1
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 140 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = 0

0a1
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 141 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = 0

0a1
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 142 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = 1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 143 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = 1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 144 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = 1

0a1
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 145 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 146 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 147 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 148 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 149 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 150 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 151 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 152 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 153 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 154 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = -2

0a1
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 155 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = -2

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 156 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = -2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 157 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = -1

0a1
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 158 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = -1

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 159 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = -1

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 160 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = 0

0a1
>  8, -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 161 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = 0

0a1
> 8 , -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 162 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = 0

0a1
>  8, -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 163 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = 1

0a1
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 164 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = 1

0a1
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 165 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = 1

0a1
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 166 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 167 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 168 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = 2

0a1
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 169 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 170 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 171 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 172 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 173 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 174 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 175 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = -2

0a1
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 176 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = -2

0a1
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 177 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = -2

0a1
> 008, -12, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 65

----------Test 178 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = -1

0a1
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 179 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = -1

0a1
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 180 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = -1

0a1
> 008, -12, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 65

----------Test 181 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = 0

0a1
>   8, -12, 123456789,    , -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 182 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = 0

0a1
> 8  , -12, 123456789,    , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 183 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = 0

0a1
>   8, -12, 123456789,    , -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 184 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = 1

0a1
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 185 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = 1

0a1
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 186 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = 1

0a1
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 187 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = 2

0a1
>  08, -12, 123456789,  00, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 188 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = 2

0a1
> 08 , -12, 123456789, 00 , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 189 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = 2

0a1
>  08, -12, 123456789,  00, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 190 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 191 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 192 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = 3

0a1
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 193 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 194 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 195 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 196 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = -2

0a1
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 197 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = -2

0a1
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 198 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = -2

0a1
> 0008, -012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 69

----------Test 199 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = -1

0a1
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 200 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = -1

0a1
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 201 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = -1

0a1
> 0008, -012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 69

----------Test 202 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = 0

0a1
>    8,  -12, 123456789,     , -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 203 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = 0

0a1
> 8   , -12 , 123456789,     , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 204 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = 0

0a1
>    8,  -12, 123456789,     , -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 205 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = 1

0a1
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 206 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = 1

0a1
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 207 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = 1

0a1
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 208 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = 2

0a1
>   08,  -12, 123456789,   00, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 209 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = 2

0a1
> 08  , -12 , 123456789, 00  , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 210 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = 2

0a1
>   08,  -12, 123456789,   00, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 211 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = 3

0a1
>  008, -012, 123456789,  000, -12345678,  097, -2147483648, 2147483647 --- Return : 69

----------Test 212 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = 3

0a1
> 008 , -012, 123456789, 000 , -12345678, 097 , -2147483648, 2147483647 --- Return : 69

----------Test 213 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = 3

0a1
>  008, -012, 123456789,  000, -12345678,  097, -2147483648, 2147483647 --- Return : 69

----------Test 214 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 215 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 216 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = 4

0a1
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 217 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 19, 2nd '*' = 14

0a1
>     -00000000000042,      00000000000042, -42                , 42                 , -00000000000042    , 00000000000042     ,                 -42,                  42 --- Return : 166

----------Test 218 : ----------
"%12.12i, %12.12d" // 1st '*' = 19, 2nd '*' = 14

0a1
> -000000000042, 000000000042 --- Return : 27

----------Test 219 : ----------
"%1s, %1s, %1s, %1s, %1s" // 1st '*' = 19, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0, %% --- Return : 32

----------Test 220 : ----------
"%2s, %2s, %2s, %2s, %2s" // 1st '*' = 19, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12,  0, %% --- Return : 33

----------Test 221 : ----------
"%3s, %3s, %3s, %3s, %3s" // 1st '*' = 19, 2nd '*' = 14

0a1
> abcdefghijklmnop,  -a, -12,   0,  %% --- Return : 36

----------Test 222 : ----------
"%4s, %4s, %4s, %4s, %4s" // 1st '*' = 19, 2nd '*' = 14

0a1
> abcdefghijklmnop,   -a,  -12,    0,   %% --- Return : 40

----------Test 223 : ----------
"%15s, %15s, %15s, %15s, %15s" // 1st '*' = 19, 2nd '*' = 14

0a1
> abcdefghijklmnop,              -a,             -12,               0,              %% --- Return : 84

----------Test 224 : ----------
"%16s, %16s, %16s, %16s, %16s" // 1st '*' = 19, 2nd '*' = 14

0a1
> abcdefghijklmnop,               -a,              -12,                0,               %% --- Return : 88

----------Test 225 : ----------
"%17s, %17s, %17s, %17s, %17s" // 1st '*' = 19, 2nd '*' = 14

0a1
>  abcdefghijklmnop,                -a,               -12,                 0,                %% --- Return : 93

----------Test 226 : ----------
"%.s, %.s, %.s, %.s, %.s" // 1st '*' = 19, 2nd '*' = 14

0a1
> , , , ,  --- Return : 8

----------Test 227 : ----------
"%1.s, %1.s, %1.s, %1.s, %1.s" // 1st '*' = 19, 2nd '*' = 14

0a1
>  ,  ,  ,  ,   --- Return : 13

----------Test 228 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = -4, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a  , -12 , 0   , %%  , -2147483648, 0x12345678, -0   --- Return : 71

----------Test 229 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = -4, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a  , -12 , 0   , %%  , -2147483648, 0x12345678, -0   --- Return : 71

----------Test 230 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = -4, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 231 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = -3, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a , -12, 0  , %% , -2147483648, 0x12345678, -0  --- Return : 66

----------Test 232 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = -3, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a , -12, 0  , %% , -2147483648, 0x12345678, -0  --- Return : 66

----------Test 233 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = -3, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 234 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = -2, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 235 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = -2, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 236 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = -2, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 237 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = -1, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 238 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = -1, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 239 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = -1, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 240 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = 0, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 241 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = 0, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 242 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = 0, 2nd '*' = 14

0a1
> , , , , , , ,  --- Return : 14

----------Test 243 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = 1, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 244 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = 1, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 245 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = 1, 2nd '*' = 14

0a1
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 246 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = 2, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12,  0, %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 247 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = 2, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 248 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = 2, 2nd '*' = 14

0a1
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 249 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = 3, 2nd '*' = 14

0a1
> abcdefghijklmnop,  -a, -12,   0,  %%, -2147483648, 0x12345678,  -0 --- Return : 66

----------Test 250 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = 3, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a , -12, 0  , %% , -2147483648, 0x12345678, -0  --- Return : 66

----------Test 251 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = 3, 2nd '*' = 14

0a1
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 252 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = 4, 2nd '*' = 14

0a1
> abcdefghijklmnop,   -a,  -12,    0,   %%, -2147483648, 0x12345678,   -0 --- Return : 71

----------Test 253 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = 4, 2nd '*' = 14

0a1
> abcdefghijklmnop, -a  , -12 , 0   , %%  , -2147483648, 0x12345678, -0   --- Return : 71

----------Test 254 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = 4, 2nd '*' = 14

0a1
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 255 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 256 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 257 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 258 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 259 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = 0

0a1
>   ,   ,   ,   ,   ,   ,   ,    --- Return : 30

----------Test 260 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = 0

0a1
>   ,   ,   ,   ,   ,   ,   ,    --- Return : 30

----------Test 261 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = 1

0a1
> a , - , - , 0 , % , - , 0 , -  --- Return : 30

----------Test 262 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = 1

0a1
> a , - , - , 0 , % , - , 0 , -  --- Return : 30

----------Test 263 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = 2

0a1
> ab, -a, -1, 0 , %%, -2, 0x, -0 --- Return : 30

----------Test 264 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = 2

0a1
> ab, -a, -1, 0 , %%, -2, 0x, -0 --- Return : 30

----------Test 265 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = 3

0a1
> abc, -a, -12, 0 , %%, -21, 0x1, -0 --- Return : 34

----------Test 266 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = 3

0a1
> abc, -a, -12, 0 , %%, -21, 0x1, -0 --- Return : 34

----------Test 267 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = 4

0a1
> abcd, -a, -12, 0 , %%, -214, 0x12, -0 --- Return : 37

----------Test 268 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = 4

0a1
> abcd, -a, -12, 0 , %%, -214, 0x12, -0 --- Return : 37

----------Test 269 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 270 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 271 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 272 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 273 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = 0

0a1
>  ,  ,  ,  ,  ,  ,  ,   --- Return : 22

----------Test 274 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = 0

0a1
>  ,  ,  ,  ,  ,  ,  ,   --- Return : 22

----------Test 275 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = 1

0a1
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 276 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = 1

0a1
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 277 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = 2

0a1
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 278 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = 2

0a1
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 279 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = 3

0a1
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 280 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = 3

0a1
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 281 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = 4

0a1
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 282 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = 4

0a1
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 283 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 284 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 285 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 286 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 287 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = 0

0a1
> , , , , , , ,  --- Return : 14

----------Test 288 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = 0

0a1
> , , , , , , ,  --- Return : 14

----------Test 289 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = 1

0a1
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 290 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = 1

0a1
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 291 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = 2

0a1
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 292 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = 2

0a1
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 293 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = 3

0a1
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 294 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = 3

0a1
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 295 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = 4

0a1
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 296 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = 4

0a1
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 297 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 298 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 299 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 300 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 301 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = 0

0a1
>  ,  ,  ,  ,  ,  ,  ,   --- Return : 22

----------Test 302 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = 0

0a1
>  ,  ,  ,  ,  ,  ,  ,   --- Return : 22

----------Test 303 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = 1

0a1
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 304 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = 1

0a1
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 305 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = 2

0a1
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 306 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = 2

0a1
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 307 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = 3

0a1
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 308 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = 3

0a1
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 309 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = 4

0a1
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 310 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = 4

0a1
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 311 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a, -12,  0, %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 312 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 313 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a, -12,  0, %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 314 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 315 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = 0

0a1
>   ,   ,   ,   ,   ,   ,   ,    --- Return : 30

----------Test 316 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = 0

0a1
>   ,   ,   ,   ,   ,   ,   ,    --- Return : 30

----------Test 317 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = 1

0a1
>  a,  -,  -,  0,  %,  -,  0,  - --- Return : 30

----------Test 318 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = 1

0a1
> a , - , - , 0 , % , - , 0 , -  --- Return : 30

----------Test 319 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = 2

0a1
> ab, -a, -1,  0, %%, -2, 0x, -0 --- Return : 30

----------Test 320 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = 2

0a1
> ab, -a, -1, 0 , %%, -2, 0x, -0 --- Return : 30

----------Test 321 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = 3

0a1
> abc, -a, -12,  0, %%, -21, 0x1, -0 --- Return : 34

----------Test 322 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = 3

0a1
> abc, -a, -12, 0 , %%, -21, 0x1, -0 --- Return : 34

----------Test 323 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = 4

0a1
> abcd, -a, -12,  0, %%, -214, 0x12, -0 --- Return : 37

----------Test 324 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = 4

0a1
> abcd, -a, -12, 0 , %%, -214, 0x12, -0 --- Return : 37

----------Test 325 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = -2

0a1
> abcdefghijklmnop,  -a, -12,   0,  %%, -2147483648, 0x12345678,  -0 --- Return : 66

----------Test 326 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a , -12, 0  , %% , -2147483648, 0x12345678, -0  --- Return : 66

----------Test 327 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = -1

0a1
> abcdefghijklmnop,  -a, -12,   0,  %%, -2147483648, 0x12345678,  -0 --- Return : 66

----------Test 328 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a , -12, 0  , %% , -2147483648, 0x12345678, -0  --- Return : 66

----------Test 329 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = 0

0a1
>    ,    ,    ,    ,    ,    ,    ,     --- Return : 38

----------Test 330 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = 0

0a1
>    ,    ,    ,    ,    ,    ,    ,     --- Return : 38

----------Test 331 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = 1

0a1
>   a,   -,   -,   0,   %,   -,   0,   - --- Return : 38

----------Test 332 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = 1

0a1
> a  , -  , -  , 0  , %  , -  , 0  , -   --- Return : 38

----------Test 333 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = 2

0a1
>  ab,  -a,  -1,   0,  %%,  -2,  0x,  -0 --- Return : 38

----------Test 334 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = 2

0a1
> ab , -a , -1 , 0  , %% , -2 , 0x , -0  --- Return : 38

----------Test 335 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = 3

0a1
> abc,  -a, -12,   0,  %%, -21, 0x1,  -0 --- Return : 38

----------Test 336 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = 3

0a1
> abc, -a , -12, 0  , %% , -21, 0x1, -0  --- Return : 38

----------Test 337 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = 4

0a1
> abcd,  -a, -12,   0,  %%, -214, 0x12,  -0 --- Return : 41

----------Test 338 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = 4

0a1
> abcd, -a , -12, 0  , %% , -214, 0x12, -0  --- Return : 41

----------Test 339 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = -2

0a1
> abcdefghijklmnop,   -a,  -12,    0,   %%, -2147483648, 0x12345678,   -0 --- Return : 71

----------Test 340 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = -2

0a1
> abcdefghijklmnop, -a  , -12 , 0   , %%  , -2147483648, 0x12345678, -0   --- Return : 71

----------Test 341 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = -1

0a1
> abcdefghijklmnop,   -a,  -12,    0,   %%, -2147483648, 0x12345678,   -0 --- Return : 71

----------Test 342 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = -1

0a1
> abcdefghijklmnop, -a  , -12 , 0   , %%  , -2147483648, 0x12345678, -0   --- Return : 71

----------Test 343 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = 0

0a1
>     ,     ,     ,     ,     ,     ,     ,      --- Return : 46

----------Test 344 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = 0

0a1
>     ,     ,     ,     ,     ,     ,     ,      --- Return : 46

----------Test 345 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = 1

0a1
>    a,    -,    -,    0,    %,    -,    0,    - --- Return : 46

----------Test 346 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = 1

0a1
> a   , -   , -   , 0   , %   , -   , 0   , -    --- Return : 46

----------Test 347 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = 2

0a1
>   ab,   -a,   -1,    0,   %%,   -2,   0x,   -0 --- Return : 46

----------Test 348 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = 2

0a1
> ab  , -a  , -1  , 0   , %%  , -2  , 0x  , -0   --- Return : 46

----------Test 349 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = 3

0a1
>  abc,   -a,  -12,    0,   %%,  -21,  0x1,   -0 --- Return : 46

----------Test 350 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = 3

0a1
> abc , -a  , -12 , 0   , %%  , -21 , 0x1 , -0   --- Return : 46

----------Test 351 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = 4

0a1
> abcd,   -a,  -12,    0,   %%, -214, 0x12,   -0 --- Return : 46

----------Test 352 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = 4

0a1
> abcd, -a  , -12 , 0   , %%  , -214, 0x12, -0   --- Return : 46

----------Test 353 : ----------
"%u, %x, %X, %u, %x, %X, %u, %x, %X, %u, %x, %X, %u, %x, %X, %u, %x, %X, %u, %x, %X, %u, %x, %X" // 1st '*' = 5, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 354 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = -1, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 355 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = -1, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 356 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = -1, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 357 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = -1, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 358 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = 0, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 359 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = 0, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 360 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = 0, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 361 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = 0, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, , , , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 182

----------Test 362 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = 1, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 363 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = 1, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 364 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = 1, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 365 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = 1, 2nd '*' = 5

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 366 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = 2, 2nd '*' = 5

0a1
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  0,  0,  0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 367 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = 2, 2nd '*' = 5

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 368 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = 2, 2nd '*' = 5

0a1
> 8 , 8 , 8 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0 , 0 , 0 , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 369 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = 2, 2nd '*' = 5

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 370 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = 3, 2nd '*' = 5

0a1
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   0,   0,   0, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 371 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = 3, 2nd '*' = 5

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 372 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = 3, 2nd '*' = 5

0a1
> 8  , 8  , 8  , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0  , 0  , 0  , 4282621618, ff439eb2, FF439EB2, 97 , 61 , 61 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 373 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = 3, 2nd '*' = 5

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 374 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = 4, 2nd '*' = 5

0a1
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    0,    0,    0, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 375 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = 4, 2nd '*' = 5

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 376 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = 4, 2nd '*' = 5

0a1
> 8   , 8   , 8   , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0   , 0   , 0   , 4282621618, ff439eb2, FF439EB2, 97  , 61  , 61  , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 377 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = 4, 2nd '*' = 5

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 378 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = -1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 379 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = -1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 380 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = -1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 381 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = 0

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 382 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = 0

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 383 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = 0

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 384 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = 1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 385 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = 1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 386 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = 1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 387 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 388 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 389 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 390 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 391 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 392 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 393 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 394 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 395 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 396 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = -1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 397 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = -1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 398 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = -1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 399 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = 0

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, , , , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 182

----------Test 400 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = 0

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, , , , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 182

----------Test 401 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = 0

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, , , , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 182

----------Test 402 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = 1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 403 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = 1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 404 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = 1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 405 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 406 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 407 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 408 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 409 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 410 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 411 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 412 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 413 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 414 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = -1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 415 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = -1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 416 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = -1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 417 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = 0

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 418 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = 0

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 419 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = 0

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 420 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = 1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 421 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = 1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 422 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = 1

0a1
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 423 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 424 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 425 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 426 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 427 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 428 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 429 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 430 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 431 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 432 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = -1

0a1
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  0,  0,  0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 433 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = -1

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 434 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = -1

0a1
> 8 , 8 , 8 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0 , 0 , 0 , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 435 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = 0

0a1
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   ,   ,   , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 436 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = 0

0a1
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   ,   ,   , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 437 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = 0

0a1
> 8 , 8 , 8 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   ,   ,   , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 438 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = 1

0a1
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  0,  0,  0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 439 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = 1

0a1
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  0,  0,  0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 440 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = 1

0a1
> 8 , 8 , 8 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0 , 0 , 0 , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 441 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 442 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 443 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = 2

0a1
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 444 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 445 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 446 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 447 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 448 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 449 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 450 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = -1

0a1
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   0,   0,   0, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 451 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = -1

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 452 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = -1

0a1
> 8  , 8  , 8  , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0  , 0  , 0  , 4282621618, ff439eb2, FF439EB2, 97 , 61 , 61 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 453 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = 0

0a1
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    ,    ,    , 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 454 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = 0

0a1
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    ,    ,    , 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 455 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = 0

0a1
> 8  , 8  , 8  , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    ,    ,    , 4282621618, ff439eb2, FF439EB2, 97 , 61 , 61 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 456 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = 1

0a1
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   0,   0,   0, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 457 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = 1

0a1
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   0,   0,   0, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 458 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = 1

0a1
> 8  , 8  , 8  , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0  , 0  , 0  , 4282621618, ff439eb2, FF439EB2, 97 , 61 , 61 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 459 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = 2

0a1
>  08,  08,  08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  00,  00,  00, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 460 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = 2

0a1
>  08,  08,  08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  00,  00,  00, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 461 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = 2

0a1
> 08 , 08 , 08 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00 , 00 , 00 , 4282621618, ff439eb2, FF439EB2, 97 , 61 , 61 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 462 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 463 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 464 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = 3

0a1
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 465 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 466 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 467 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 468 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = -1

0a1
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    0,    0,    0, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 469 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = -1

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 470 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = -1

0a1
> 8   , 8   , 8   , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0   , 0   , 0   , 4282621618, ff439eb2, FF439EB2, 97  , 61  , 61  , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 471 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = 0

0a1
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,     ,     ,     , 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 472 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = 0

0a1
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,     ,     ,     , 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 473 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = 0

0a1
> 8   , 8   , 8   , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,     ,     ,     , 4282621618, ff439eb2, FF439EB2, 97  , 61  , 61  , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 474 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = 1

0a1
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    0,    0,    0, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 475 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = 1

0a1
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    0,    0,    0, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 476 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = 1

0a1
> 8   , 8   , 8   , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0   , 0   , 0   , 4282621618, ff439eb2, FF439EB2, 97  , 61  , 61  , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 477 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = 2

0a1
>   08,   08,   08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   00,   00,   00, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 478 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = 2

0a1
>   08,   08,   08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   00,   00,   00, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 479 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = 2

0a1
> 08  , 08  , 08  , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00  , 00  , 00  , 4282621618, ff439eb2, FF439EB2, 97  , 61  , 61  , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 480 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = 3

0a1
>  008,  008,  008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  000,  000,  000, 4282621618, ff439eb2, FF439EB2,  097,  061,  061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 481 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = 3

0a1
>  008,  008,  008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  000,  000,  000, 4282621618, ff439eb2, FF439EB2,  097,  061,  061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 482 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = 3

0a1
> 008 , 008 , 008 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000 , 000 , 000 , 4282621618, ff439eb2, FF439EB2, 097 , 061 , 061 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 483 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 484 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 485 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = 4

0a1
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 486 : ----------
"%p, %x, %p, %x, %p, %x, %p, %x" // 1st '*' = 5, 2nd '*' = 5

0a1
> 0xc7e1ab0, c7e1ab0, 0xc5729c0, c5729c0, 0x1, 1, 0x0, 0 --- Return : 54

----------Test 487 : ----------
"%*p, %*x, %*p, %*x, %*p, %*x, %*p, %*x" // 1st '*' = 8, 2nd '*' = 5

0a1
> 0xc7e1ab0,  c7e1ab0, 0xc5729c0,  c5729c0,      0x1,        1,      0x0,        0 --- Return : 80

----------Test 488 : ----------
"%-*p, %-*x, %-*p, %-*x, %-*p, %-*x, %-*p, %-*x" // 1st '*' = 8, 2nd '*' = 5

0a1
> 0xc7e1ab0, c7e1ab0 , 0xc5729c0, c5729c0 , 0x1     , 1       , 0x0     , 0        --- Return : 80

----------Test 489 : ----------
"%*p, %*x, %*p, %*x, %*p, %*x, %*p, %*x" // 1st '*' = 9, 2nd '*' = 5

0a1
> 0xc7e1ab0,   c7e1ab0, 0xc5729c0,   c5729c0,       0x1,         1,       0x0,         0 --- Return : 86

----------Test 490 : ----------
"%-*p, %-*x, %-*p, %-*x, %-*p, %-*x, %-*p, %-*x" // 1st '*' = 9, 2nd '*' = 5

0a1
> 0xc7e1ab0, c7e1ab0  , 0xc5729c0, c5729c0  , 0x1      , 1        , 0x0      , 0         --- Return : 86

----------Test 491 : ----------
"%*p, %*x, %*p, %*x, %*p, %*x, %*p, %*x" // 1st '*' = 10, 2nd '*' = 5

0a1
>  0xc7e1ab0,    c7e1ab0,  0xc5729c0,    c5729c0,        0x1,          1,        0x0,          0 --- Return : 94

----------Test 492 : ----------
"%-*p, %-*x, %-*p, %-*x, %-*p, %-*x, %-*p, %-*x" // 1st '*' = 10, 2nd '*' = 5

0a1
> 0xc7e1ab0 , c7e1ab0   , 0xc5729c0 , c5729c0   , 0x1       , 1         , 0x0       , 0          --- Return : 94

----------Test 493 : ----------
"%*p, %*x, %*p, %*x, %*p, %*x, %*p, %*x" // 1st '*' = 11, 2nd '*' = 5

0a1
>   0xc7e1ab0,     c7e1ab0,   0xc5729c0,     c5729c0,         0x1,           1,         0x0,           0 --- Return : 102

----------Test 494 : ----------
"%-*p, %-*x, %-*p, %-*x, %-*p, %-*x, %-*p, %-*x" // 1st '*' = 11, 2nd '*' = 5

0a1
> 0xc7e1ab0  , c7e1ab0    , 0xc5729c0  , c5729c0    , 0x1        , 1          , 0x0        , 0           --- Return : 102

----------Test 495 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 42, 2nd '*' = 25

0a1
> 0000000000000000000000008                 , -0000000000000000000000012                , 0000000000000000123456789                 , 0000000000000000000000000                 , -0000000000000000012345678                , 0000000000000000000000097                  --- Return : 262

----------Test 496 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 42, 2nd '*' = 25

0a1
> abcdefghijklmnop                          , -a                                        , -12                                       , 0                                         , %%                                        , -2147483648                               , 0x12345678                                , -0                                         --- Return : 350

----------Test 497 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 42, 2nd '*' = 25

0a1
>                  0000000000000000000000008,                  0000000000000000000000008,                  0000000000000000000000008,                  0000000000000004294967284,                  00000000000000000fffffff4,                  00000000000000000FFFFFFF4,                  0000000000000000123456789,                  00000000000000000075bcd15,                  00000000000000000075BCD15,                  0000000000000000000000000,                  0000000000000000000000000,                  0000000000000000000000000,                  0000000000000004282621618,                  00000000000000000ff439eb2,                  00000000000000000FF439EB2,                  0000000000000000000000097,                  0000000000000000000000061,                  0000000000000000000000061,                  0000000000000002147483647,                  000000000000000007fffffff,                  000000000000000007FFFFFFF,                  0000000000000002147483648,                  0000000000000000080000000,                  0000000000000000080000000 --- Return : 1054

----------Test 498 : ----------
"%-*p, %-*x, %-*p, %-*x, %-*p, %-*x, %-*p, %-*x" // 1st '*' = 42, 2nd '*' = 25

0a1
> 0xc7e1ab0                                 , c7e1ab0                                   , 0xc5729c0                                 , c5729c0                                   , 0x1                                       , 1                                         , 0x0                                       , 0                                          --- Return : 350

----------Test 499 : ----------
"%c,  %-c, %1c, %*c,  %-*c,  %*c, %-*c" // 1st '*' = 12, 2nd '*' = 18

0a1
> a,  a, -,            -,  0           ,             %, a            --- Return : 66

----------Test 500 : ----------
"%c,  %-c, %1c, %*c,  %-*c,  %*c, %-*c" // 1st '*' = 12, 2nd '*' = 18

0a1
> a,  a, -, -           ,  0           ,  %           , a            --- Return : 66

----------Test 501 : ----------
"%c,  %-c, %1c, %*c,  %-*c,  %*c, %-*c" // 1st '*' = 12, 2nd '*' = 18

0a1
> a,  a, 0,            0,  -           ,             -, a            --- Return : 66

----------Test 502 : ----------
"%c,  %-c, %1c, %*c,  %-*c,  %*c" // 1st '*' = 12, 2nd '*' = 18

0a1
> ô,  ÿ, ,            ô,  ÿ           ,              --- Return : 52

----------Test 503 : ----------
"%%, 	, \, ", ', +" // 1st '*' = 12, 2nd '*' = 18

0a1
> %, 	, \, ", ', + --- Return : 16

----------Test 504 : ----------
"%%%dbada%s%%**%s**-d%%0*d%-12s0*@" // 1st '*' = 12, 2nd '*' = 18

0a1
> %4200badabada%**%%**-d%0*d-12         0*@ --- Return : 41

----------Test 505 : ----------
"%-00000-----*i, %---0.*d, %0-0-0-0-0.*d, %-0-0-0-0-.*d, %-----.*d" // 1st '*' = 12, 2nd '*' = 18

0a1
> 8           , 000000000008, 000000000008, 000000000008, 000000000008 --- Return : 68

----------Test 506 : ----------
"%-00000-----*i, %---0.*d, %0-0-0-0-0.*d, %-0-0-0-0-.*d, %-----.*d" // 1st '*' = 12, 2nd '*' = 18

0a1
> -12         , -000000000012, -000000000012, -000000000012, -000000000012 --- Return : 72

----------Test 507 : ----------
"%-00000-----*i, %---0.*d, %0-0-0-0-0.*d, %-0-0-0-0-.*d, %-----.*d" // 1st '*' = 12, 2nd '*' = 18

0a1
> 0           , 000000000000, 000000000000, 000000000000, 000000000000 --- Return : 68

----------Test 508 : ----------
"%i, %d, %d, %d, %d, %d, %u, %x, %X" // 1st '*' = 12, 2nd '*' = 18

0a1
> 0, 0, 0, 0, 0, 0, 0, 0, 0 --- Return : 25

----------Test 509 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*u, %*x, %*X" // 1st '*' = 12, 2nd '*' = 18

0a1
>            0,            0,            0,            0,            0,            0,            0,            0,            0 --- Return : 124

----------Test 510 : ----------
"%c, %-c, %12c, %-3c, %-1c, %1c, %-2c, %-4c, %5c, %3c, %-*c, %-*c, %*c, %*c" // 1st '*' = 12, 2nd '*' = 18

Binary files ft.txt and printf.txt differ

----------Test 511 : ----------
"%-2s, %.s, %-4s, %-2.4s, %-8.12s, %3s, %8s, %---2s, %.*s, %.0s, %.1s, %.2s, %.4s, %.8s" // 1st '*' = 12, 2nd '*' = 18

0a1
> (null), , (null), (nul, (null)  , (null),   (null), (null), (null), , (, (n, (nul, (null) --- Return : 89

----------Test 512 : ----------
"(null)" // 1st '*' = 12, 2nd '*' = 18

0a1
> (null) --- Return : 6

----------Test 513 : ----------
"" // 1st '*' = 12, 2nd '*' = 18

0a1
>  --- Return : 0

#########PFT##########
Test   6 (pct_basic) : FAILED.$
    First line of code: {return test("%%");}$
      expected output : "%"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "%"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test   7 (pct_5w) : FAILED.$
    First line of code: {return test("%5%");}$
      expected output : "    %"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "    %"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test   8 (pct_5wlj) : FAILED.$
    First line of code: {return test("%-5%");}$
      expected output : "%    "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test   9 (pct_5wzp) : FAILED.$
    First line of code: {return test("%05%");}$
      expected output : "0000%"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "0000%"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test  10 (pct_5wljzp) : FAILED.$
    First line of code: {return test("%-05%");}$
      expected output : "%    "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test  16 (c_allprintable_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%      expected output : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~^?"$
      your output     : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~^?width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f"$
      actual   (nonprintable as hex) : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fwidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test  17 (c_1_31_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",(char)1,(char)2,(char)3,(char)4,(char)5,(char)6      expected output : "^A^B^C^D^E^F^G^H	$
^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_"$
      your output     : "^A^B^C^D^E^F^G^H	$
^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
wi"$
      expected (nonprintable as hex) : "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"$
      actual   (nonprintable as hex) : "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1fwidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awi"$
$
Test  18 (c_128_255_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%      expected output : "M-^@M-^AM-^BM-^CM-^DM-^EM-^FM-^GM-^HM-^IM-^JM-^KM-^LM-^MM-^NM-^OM-^PM-^QM-^RM-^SM-^TM-^UM-^VM-^WM-^XM-^YM-^ZM-^[M-^\M-^]M-^^M-^_ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"$
      your output     : "M-^@M-^AM-^BM-^CM-^DM-^EM-^FM-^GM-^HM-^IM-^JM-^KM-^LM-^MM-^NM-^OM-^PM-^QM-^RM-^SM-^TM-^UM-^VM-^WM-^XM-^YM-^ZM-^[M-^\M-^]M-^^M-^_ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿwidth: 0$
width: 0$
widt"$
      expected (nonprintable as hex) : "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"$
      actual   (nonprintable as hex) : "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xffwidth: 0\x0awidth: 0\x0awidt"$
$
Test  19 (c_allprintable_width) : FAILED.$
    First line of code: {return test("%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c      expected output : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      your output     : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~^?width: 1$
width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
"$
      expected (nonprintable as hex) : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      actual   (nonprintable as hex) : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fwidth: 1\x0awidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0a"$
$
Test  20 (c_1_31_width) : FAILED.$
    First line of code: {return test("%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c",(char)1,(char)2,      expected output : " ^A  ^B   ^C^D ^E  ^F   ^G^H 	  $
   ^K^L ^M  ^N   ^O^P ^Q  ^R   ^S^T ^U  ^V   ^W^X ^Y  ^Z   ^[^\ ^]  ^^   ^_"$
      your output     : "^A^B^C^D^E^F^G^H	$
^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
wi"$
      expected (nonprintable as hex) : " \x01  \x02   \x03\x04 \x05  \x06   \x07\x08 \x09  \x0a   \x0b\x0c \x0d  \x0e   \x0f\x10 \x11  \x12   \x13\x14 \x15  \x16   \x17\x18 \x19  \x1a   \x1b\x1c \x1d  \x1e   \x1f"$
      actual   (nonprintable as hex) : "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1fwidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awi"$
$
Test  21 (c_128_255_width) : FAILED.$
    First line of code: {return test("%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c      expected output : "M-^@ M-^A  M-^B   M-^CM-^D M-^E  M-^F   M-^GM-^H M-^I  M-^J   M-^KM-^L M-^M  M-^N   M-^OM-^P M-^Q  M-^R   M-^SM-^T M-^U  M-^V   M-^WM-^X M-^Y  M-^Z   M-^[M-^\ M-^]  M-^^   M-^_  ¡  ¢   £¤ ¥  ¦   §¨ ©  ª   «¬ ­  ®   ¯° ±  ²   ³´ µ  ¶   ·¸ ¹  º   »"$
      your output     : "M-^@M-^AM-^BM-^CM-^DM-^EM-^FM-^GM-^HM-^IM-^JM-^KM-^LM-^MM-^NM-^OM-^PM-^QM-^RM-^SM-^TM-^UM-^VM-^WM-^XM-^YM-^ZM-^[M-^\M-^]M-^^M-^_ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿwidth: 1$
width: 2$
widt"$
      expected (nonprintable as hex) : "\x80 \x81  \x82   \x83\x84 \x85  \x86   \x87\x88 \x89  \x8a   \x8b\x8c \x8d  \x8e   \x8f\x90 \x91  \x92   \x93\x94 \x95  \x96   \x97\x98 \x99  \x9a   \x9b\x9c \x9d  \x9e   \x9f\xa0 \xa1  \xa2   \xa3\xa4 \xa5  \xa6   \xa7\xa8 \xa9  \xaa   \xab\xac \xad  \xae   \xaf\xb0 \xb1  \xb2   \xb3\xb4 \xb5  \xb6   \xb7\xb8 \xb9  \xba   \xbb"$
      actual   (nonprintable as hex) : "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xffwidth: 1\x0awidth: 2\x0awidt"$
$
Test  22 (c_allprintable_width_lj) : FAILED.$
    First line of code: {return test("%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1      expected output : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      your output     : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~^?width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
width: 3$
"$
      expected (nonprintable as hex) : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      actual   (nonprintable as hex) : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fwidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awidth: 3\x0a"$
$
Test  23 (c_1_31_width_lj) : FAILED.$
    First line of code: {return test("%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1      expected output : "^A ^B  ^C   ^D^E ^F  ^G   ^H	 $
  ^K   ^L^M ^N  ^O   ^P^Q ^R  ^S   ^T^U ^V  ^W   ^X^Y ^Z  ^[   ^\^] ^^  ^_   "$
      your output     : "^A^B^C^D^E^F^G^H	$
^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
wi"$
      expected (nonprintable as hex) : "\x01 \x02  \x03   \x04\x05 \x06  \x07   \x08\x09 \x0a  \x0b   \x0c\x0d \x0e  \x0f   \x10\x11 \x12  \x13   \x14\x15 \x16  \x17   \x18\x19 \x1a  \x1b   \x1c\x1d \x1e  \x1f   "$
      actual   (nonprintable as hex) : "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1fwidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awi"$
$
Test  24 (c_128_255_width_lj) : FAILED.$
    First line of code: {return test("%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4      expected output : "M-^@M-^A M-^B  M-^C   M-^DM-^E M-^F  M-^G   M-^HM-^I M-^J  M-^K   M-^LM-^M M-^N  M-^O   M-^PM-^Q M-^R  M-^S   M-^TM-^U M-^V  M-^W   M-^XM-^Y M-^Z  M-^[   M-^\M-^] M-^^  M-^_    ¡ ¢  £   ¤¥ ¦  §   ¨© ª  «   ¬­ ®  ¯   °± ²  ³   ´µ ¶  ·   ¸¹ º  »   "$
      your output     : "M-^@M-^AM-^BM-^CM-^DM-^EM-^FM-^GM-^HM-^IM-^JM-^KM-^LM-^MM-^NM-^OM-^PM-^QM-^RM-^SM-^TM-^UM-^VM-^WM-^XM-^YM-^ZM-^[M-^\M-^]M-^^M-^_ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿwidth: 1$
width: 2$
widt"$
      expected (nonprintable as hex) : "\x80\x81 \x82  \x83   \x84\x85 \x86  \x87   \x88\x89 \x8a  \x8b   \x8c\x8d \x8e  \x8f   \x90\x91 \x92  \x93   \x94\x95 \x96  \x97   \x98\x99 \x9a  \x9b   \x9c\x9d \x9e  \x9f   \xa0\xa1 \xa2  \xa3   \xa4\xa5 \xa6  \xa7   \xa8\xa9 \xaa  \xab   \xac\xad \xae  \xaf   \xb0\xb1 \xb2  \xb3   \xb4\xb5 \xb6  \xb7   \xb8\xb9 \xba  \xbb   "$
      actual   (nonprintable as hex) : "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xffwidth: 1\x0awidth: 2\x0awidt"$
$
Test  25 (c_nullterm_basic) : FAILED.$
    First line of code: {return test("%c", '$
      expected output : "^@"$
      your output     : "^@width: 0$
"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00width: 0\x0a"$
$
Test  26 (c_nullterm_5w) : FAILED.$
    First line of code: {return test("%5c", '$
      expected output : "    ^@"$
      your output     : "^@width: 5$
"$
      expected (nonprintable as hex) : "    \x00"$
      actual   (nonprintable as hex) : "\x00width: 5\x0a"$
$
Test  27 (c_nullterm_5wlj) : FAILED.$
    First line of code: {return test("%-5c", '$
      expected output : "^@    "$
      your output     : "^@width: 5$
"$
      expected (nonprintable as hex) : "\x00    "$
      actual   (nonprintable as hex) : "\x00width: 5\x0a"$
$
Test  28 (s_basic_string_expansion) : FAILED.$
    First line of code: {return test("hello, %s.", "gavin");}$
      expected output : "hello, gavin."$
      your output     : "hello, gavin.width: 0$
"$
      expected (nonprintable as hex) : "hello, gavin."$
      actual   (nonprintable as hex) : "hello, gavin.width: 0\x0a"$
$
Test  29 (s_only_string_expansion) : FAILED.$
    First line of code: {return test("%s", "testing testing");}$
      expected output : "testing testing"$
      your output     : "testing testingwidth: 0$
"$
      expected (nonprintable as hex) : "testing testing"$
      actual   (nonprintable as hex) : "testing testingwidth: 0\x0a"$
$
Test  30 (s_two_string_expansions) : FAILED.$
    First line of code: {return test("%s%s", "hello", "world");}$
      expected output : "helloworld"$
      your output     : "helloworldwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "helloworldwidth: 0\x0awidth: 0\x0a"$
$
Test  31 (s_two_string_expansions2) : FAILED.$
    First line of code: {return test("..%s stuff %s", "a", "b");}$
      expected output : "..a stuff b"$
      your output     : "..a stuff bwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "..a stuff b"$
      actual   (nonprintable as hex) : "..a stuff bwidth: 0\x0awidth: 0\x0a"$
$
Test  32 (s_empty_string_expansion) : FAILED.$
    First line of code: {return test("this %s is empty", "");}$
      expected output : "this  is empty"$
      your output     : "this  is emptywidth: 0$
"$
      expected (nonprintable as hex) : "this  is empty"$
      actual   (nonprintable as hex) : "this  is emptywidth: 0\x0a"$
$
Test  33 (s_full_then_empty_string) : FAILED.$
    First line of code: {return test("this %s is %s", "hello", "");}$
      expected output : "this hello is "$
      your output     : "this hello is width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "this hello is "$
      actual   (nonprintable as hex) : "this hello is width: 0\x0awidth: 0\x0a"$
$
Test  34 (s_empty_then_full_string) : FAILED.$
    First line of code: {return test("this %s is %s", "", "hello");}$
      expected output : "this  is hello"$
      your output     : "this  is hellowidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "this  is hello"$
      actual   (nonprintable as hex) : "this  is hellowidth: 0\x0awidth: 0\x0a"$
$
Test  35 (s_three_strings) : FAILED.$
    First line of code: {return test("%s%s%s", "1", "2", "3's a charm");}$
      expected output : "123's a charm"$
      your output     : "123's a charmwidth: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "123's a charm"$
      actual   (nonprintable as hex) : "123's a charmwidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test  36 (s_space_padded_field_width) : FAILED.$
    First line of code: {return test("%32s", "abc");}$
      expected output : "                             abc"$
      your output     : "                             abcwidth: 32$
"$
      expected (nonprintable as hex) : "                             abc"$
      actual   (nonprintable as hex) : "                             abcwidth: 32\x0a"$
$
Test  37 (s_space_padded_field_width2) : FAILED.$
    First line of code: {return test("%16s", "nark nark");}$
      expected output : "       nark nark"$
      your output     : "       nark narkwidth: 16$
"$
      expected (nonprintable as hex) : "       nark nark"$
      actual   (nonprintable as hex) : "       nark narkwidth: 16\x0a"$
$
Test  38 (s_space_padded_over_field_width) : FAILED.$
    First line of code: {return test("%5s", "goes over");}$
      expected output : "goes over"$
      your output     : "goes overwidth: 5$
"$
      expected (nonprintable as hex) : "goes over"$
      actual   (nonprintable as hex) : "goes overwidth: 5\x0a"$
$
Test  39 (s_space_padded_field_width_lj) : FAILED.$
    First line of code: {return test("%-32s", "abc");}$
      expected output : "abc                             "$
      your output     : "abc                             width: 32$
"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             width: 32\x0a"$
$
Test  40 (s_space_padded_field_width2_lj) : FAILED.$
    First line of code: {return test("%-16s", "nark nark");}$
      expected output : "nark nark       "$
      your output     : "nark nark       width: 16$
"$
      expected (nonprintable as hex) : "nark nark       "$
      actual   (nonprintable as hex) : "nark nark       width: 16\x0a"$
$
Test  41 (s_space_padded_over_field_width_lj) : FAILED.$
    First line of code: {return test("%-5s", "goes over");}$
      expected output : "goes over"$
      your output     : "goes overwidth: 5$
"$
      expected (nonprintable as hex) : "goes over"$
      actual   (nonprintable as hex) : "goes overwidth: 5\x0a"$
$
Test  42 (s_string_prec_notrunc) : FAILED.$
    First line of code: {return test("%.7s", "hello");}$
      expected output : "hello"$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test  43 (s_string_prec_trunc) : FAILED.$
    First line of code: {return test("%.3s", "hello");}$
      expected output : "hel"$
      your output     : "helwidth: 0$
"$
      expected (nonprintable as hex) : "hel"$
      actual   (nonprintable as hex) : "helwidth: 0\x0a"$
$
Test  44 (s_string_prec_default) : FAILED.$
    First line of code: {return test("%.s", "hello");}$
      expected output : ""$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test  45 (s_string_prec_zero) : FAILED.$
    First line of code: {return test("%.0s", "hello");}$
      expected output : ""$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test  46 (s_two_strings_prec_2trunc) : FAILED.$
    First line of code: {return test("%.3s%.2s", "holla", "bitch");}$
      expected output : "holbi"$
      your output     : "holbiwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "holbi"$
      actual   (nonprintable as hex) : "holbiwidth: 0\x0awidth: 0\x0a"$
$
Test  47 (s_two_strings_prec_1trunc_a) : FAILED.$
    First line of code: {return test("%.2s%.7s", "hello", "world");}$
      expected output : "heworld"$
      your output     : "heworldwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "heworld"$
      actual   (nonprintable as hex) : "heworldwidth: 0\x0awidth: 0\x0a"$
$
Test  48 (s_two_strings_prec_1trunc_b) : FAILED.$
    First line of code: {return test("%.7s%.2s", "hello", "world");}$
      expected output : "hellowo"$
      your output     : "hellowowidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "hellowo"$
      actual   (nonprintable as hex) : "hellowowidth: 0\x0awidth: 0\x0a"$
$
Test  49 (s_two_strings_prec_0trunc) : FAILED.$
    First line of code: {return test("%.5s%7s", "yo", "boi");}$
      expected output : "yo    boi"$
      your output     : "yo    boiyowidth: 0$
width: 7$
"$
      expected (nonprintable as hex) : "yo    boi"$
      actual   (nonprintable as hex) : "yo    boiyowidth: 0\x0awidth: 7\x0a"$
$
Test  50 (s_string_prec_width_notrunc) : FAILED.$
    First line of code: {return test("%7.5s", "yolo");}$
      expected output : "   yolo"$
      your output     : "   yolowidth: 7$
"$
      expected (nonprintable as hex) : "   yolo"$
      actual   (nonprintable as hex) : "   yolowidth: 7\x0a"$
$
Test  51 (s_string_prec_width_trunc) : FAILED.$
    First line of code: {return test("%7.5s", "bombastic");}$
      expected output : "  bomba"$
      your output     : "  bombawidth: 7$
"$
      expected (nonprintable as hex) : "  bomba"$
      actual   (nonprintable as hex) : "  bombawidth: 7\x0a"$
$
Test  52 (s_string_prec_width_notrunc_lj) : FAILED.$
    First line of code: {return test("%-7.5s", "yolo");}$
      expected output : "yolo   "$
      your output     : "yolo   width: 7$
"$
      expected (nonprintable as hex) : "yolo   "$
      actual   (nonprintable as hex) : "yolo   width: 7\x0a"$
$
Test  53 (s_string_prec_width_trunc_lj) : FAILED.$
    First line of code: {return test("%-7.5s", "tubular");}$
      expected output : "tubul  "$
      your output     : "tubul^@^@width: 7$
"$
      expected (nonprintable as hex) : "tubul  "$
      actual   (nonprintable as hex) : "tubul\x00\x00width: 7\x0a"$
$
Test  54 (s_two_s_prec_width_2fit_0trunc) : FAILED.$
    First line of code: {return test("%7.7s%7.7s", "hello", "world");}$
      expected output : "  hello  world"$
      your output     : "  hello  worldwidth: 7$
width: 7$
"$
      expected (nonprintable as hex) : "  hello  world"$
      actual   (nonprintable as hex) : "  hello  worldwidth: 7\x0awidth: 7\x0a"$
$
Test  55 (s_two_s_prec_width_1fit_a_0trunc) : FAILED.$
    First line of code: {return test("%3.7s%7.7s", "hello", "world");}$
      expected output : "hello  world"$
      your output     : "hello  worldwidth: 3$
width: 7$
"$
      expected (nonprintable as hex) : "hello  world"$
      actual   (nonprintable as hex) : "hello  worldwidth: 3\x0awidth: 7\x0a"$
$
Test  56 (s_two_s_prec_width_1fit_b_0trunc) : FAILED.$
    First line of code: {return test("%7.7s%3.7s", "hello", "world");}$
      expected output : "  helloworld"$
      your output     : "  helloworldwidth: 7$
width: 3$
"$
      expected (nonprintable as hex) : "  helloworld"$
      actual   (nonprintable as hex) : "  helloworldwidth: 7\x0awidth: 3\x0a"$
$
Test  57 (s_two_s_prec_width_0fit_0trunc) : FAILED.$
    First line of code: {return test("%3.7s%3.7s", "hello", "world");}$
      expected output : "helloworld"$
      your output     : "helloworldwidth: 3$
width: 3$
"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "helloworldwidth: 3\x0awidth: 3\x0a"$
$
Test  58 (s_two_s_prec_width_2fit_1trunc_a) : FAILED.$
    First line of code: {return test("%7.3s%7.7s", "hello", "world");}$
      expected output : "    hel  world"$
      your output     : "    hel  worldwidth: 7$
width: 7$
"$
      expected (nonprintable as hex) : "    hel  world"$
      actual   (nonprintable as hex) : "    hel  worldwidth: 7\x0awidth: 7\x0a"$
$
Test  59 (s_two_s_prec_width_1fit_a_1trunc_a) : FAILED.$
    First line of code: {return test("%3.3s%7.7s", "hello", "world");}$
      expected output : "hel  world"$
      your output     : "hel  worldwidth: 3$
width: 7$
"$
      expected (nonprintable as hex) : "hel  world"$
      actual   (nonprintable as hex) : "hel  worldwidth: 3\x0awidth: 7\x0a"$
$
Test  60 (s_two_s_prec_width_1fit_b_1trunc_a) : FAILED.$
    First line of code: {return test("%7.3s%3.7s", "hello", "world");}$
      expected output : "    helworld"$
      your output     : "    helworldwidth: 7$
width: 3$
"$
      expected (nonprintable as hex) : "    helworld"$
      actual   (nonprintable as hex) : "    helworldwidth: 7\x0awidth: 3\x0a"$
$
Test  61 (s_two_s_prec_width_0fit_1trunc_a) : FAILED.$
    First line of code: {return test("%3.3s%3.7s", "hello", "world");}$
      expected output : "helworld"$
      your output     : "helworldwidth: 3$
width: 3$
"$
      expected (nonprintable as hex) : "helworld"$
      actual   (nonprintable as hex) : "helworldwidth: 3\x0awidth: 3\x0a"$
$
Test  62 (s_two_s_prec_width_2fit_1trunc_b) : FAILED.$
    First line of code: {return test("%7.7s%7.3s", "hello", "world");}$
      expected output : "  hello    wor"$
      your output     : "  hello    worwidth: 7$
width: 7$
"$
      expected (nonprintable as hex) : "  hello    wor"$
      actual   (nonprintable as hex) : "  hello    worwidth: 7\x0awidth: 7\x0a"$
$
Test  63 (s_two_s_prec_width_1fit_a_1trunc_b) : FAILED.$
    First line of code: {return test("%3.7s%7.3s", "hello", "world");}$
      expected output : "hello    wor"$
      your output     : "hello    worwidth: 3$
width: 7$
"$
      expected (nonprintable as hex) : "hello    wor"$
      actual   (nonprintable as hex) : "hello    worwidth: 3\x0awidth: 7\x0a"$
$
Test  64 (s_two_s_prec_width_1fit_b_1trunc_b) : FAILED.$
    First line of code: {return test("%7.7s%3.3s", "hello", "world");}$
      expected output : "  hellowor"$
      your output     : "  helloworwidth: 7$
width: 3$
"$
      expected (nonprintable as hex) : "  hellowor"$
      actual   (nonprintable as hex) : "  helloworwidth: 7\x0awidth: 3\x0a"$
$
Test  65 (s_two_s_prec_width_0fit_1trunc_b) : FAILED.$
    First line of code: {return test("%3.7s%3.3s", "hello", "world");}$
      expected output : "hellowor"$
      your output     : "helloworwidth: 3$
width: 3$
"$
      expected (nonprintable as hex) : "hellowor"$
      actual   (nonprintable as hex) : "helloworwidth: 3\x0awidth: 3\x0a"$
$
Test  66 (s_two_s_prec_width_2fit_2trunc) : FAILED.$
    First line of code: {return test("%7.3s%7.3s", "hello", "world");}$
      expected output : "    hel    wor"$
      your output     : "    hel    worwidth: 7$
width: 7$
"$
      expected (nonprintable as hex) : "    hel    wor"$
      actual   (nonprintable as hex) : "    hel    worwidth: 7\x0awidth: 7\x0a"$
$
Test  67 (s_two_s_prec_width_1fit_a_2trunc) : FAILED.$
    First line of code: {return test("%3.3s%7.3s", "hello", "world");}$
      expected output : "hel    wor"$
      your output     : "hel    worwidth: 3$
width: 7$
"$
      expected (nonprintable as hex) : "hel    wor"$
      actual   (nonprintable as hex) : "hel    worwidth: 3\x0awidth: 7\x0a"$
$
Test  68 (s_two_s_prec_width_1fit_b_2trunc) : FAILED.$
    First line of code: {return test("%7.3s%3.3s", "hello", "world");}$
      expected output : "    helwor"$
      your output     : "    helworwidth: 7$
width: 3$
"$
      expected (nonprintable as hex) : "    helwor"$
      actual   (nonprintable as hex) : "    helworwidth: 7\x0awidth: 3\x0a"$
$
Test  69 (s_two_s_prec_width_0fit_2trunc) : FAILED.$
    First line of code: {return test("%3.3s%3.3s", "hello", "world");}$
      expected output : "helwor"$
      your output     : "helworwidth: 3$
width: 3$
"$
      expected (nonprintable as hex) : "helwor"$
      actual   (nonprintable as hex) : "helworwidth: 3\x0awidth: 3\x0a"$
$
Test  70 (s_two_s_prec_width_2trunc) : FAILED.$
    First line of code: {return test("%3s%3s", "hello", "world");}$
      expected output : "helloworld"$
      your output     : "helloworldwidth: 3$
width: 3$
"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "helloworldwidth: 3\x0awidth: 3\x0a"$
$
Test  71 (s_two_strings_lj_and_rj) : FAILED.$
    First line of code: {return test("%-7s%5s", "hello", "world");}$
      expected output : "hello  world"$
      your output     : "hello  world      ^V-5swidth: 7$
width: 5$
width: 7$
"$
      expected (nonprintable as hex) : "hello  world"$
      actual   (nonprintable as hex) : "hello  world      \x16-5swidth: 7\x0awidth: 5\x0awidth: 7\x0a"$
$
Test  72 (s_two_strings_rj_and_lj) : FAILED.$
    First line of code: {return test("%7s%-5s", "hello", "world");}$
      expected output : "  helloworld"$
      your output     : "  helloworldwidth: 7$
width: 5$
"$
      expected (nonprintable as hex) : "  helloworld"$
      actual   (nonprintable as hex) : "  helloworldwidth: 7\x0awidth: 5\x0a"$
$
Test  73 (s_null_basic_string_expansion) : FAILED.$
    First line of code: {return test("hello, %s.", NULL);}$
    SEGFAULT$
$
Test  74 (s_null_only_string_expansion) : FAILED.$
    First line of code: {return test("%s", NULL);}$
    SEGFAULT$
$
Test  75 (s_null_space_padded_field_width) : FAILED.$
    First line of code: {return test("%32s", NULL);}$
    SEGFAULT$
$
Test  76 (s_null_space_padded_over_field_width) : FAILED.$
    First line of code: {return test("%2s", NULL);}$
    SEGFAULT$
$
Test  77 (s_null_space_padded_field_width_lj) : FAILED.$
    First line of code: {return test("%-32s", NULL);}$
    SEGFAULT$
$
Test  78 (s_null_space_padded_field_width2_lj) : FAILED.$
    First line of code: {return test("%-16s", NULL);}$
    SEGFAULT$
$
Test  79 (s_null_space_padded_over_field_width_lj) : FAILED.$
    First line of code: {return test("%-3s", NULL);}$
    SEGFAULT$
$
Test  80 (s_null_string_prec_notrunc) : FAILED.$
    First line of code: {return test("%.9s", "NULL");}$
      expected output : "NULL"$
      your output     : "NULLwidth: 0$
"$
      expected (nonprintable as hex) : "NULL"$
      actual   (nonprintable as hex) : "NULLwidth: 0\x0a"$
$
Test  81 (s_null_string_prec_trunc) : FAILED.$
    First line of code: {return test("%.3s", "NULL");}$
      expected output : "NUL"$
      your output     : "NULwidth: 0$
"$
      expected (nonprintable as hex) : "NUL"$
      actual   (nonprintable as hex) : "NULwidth: 0\x0a"$
$
Test  82 (s_null_string_prec_default) : FAILED.$
    First line of code: {return test("%.s", "NULL");}$
      expected output : ""$
      your output     : "NULLwidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "NULLwidth: 0\x0a"$
$
Test  83 (s_null_string_prec_zero) : FAILED.$
    First line of code: {return test("%.0s", "NULL");}$
      expected output : ""$
      your output     : "NULLwidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "NULLwidth: 0\x0a"$
$
Test  84 (s_basic_s_hidden) : FAILED.$
    First line of code: {return test("%s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test  85 (s_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test  86 (s_width_9_s_hidden) : FAILED.$
    First line of code: {return test("%9s", s_hidden);}$
      expected output : "   hi low"$
      your output     : "   hi lowwidth: 9$
"$
      expected (nonprintable as hex) : "   hi low"$
      actual   (nonprintable as hex) : "   hi lowwidth: 9\x0a"$
$
Test  87 (s_prec_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.s", s_hidden);}$
      expected output : ""$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test  88 (s_prec_9_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.9s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test  89 (s_prec_03_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.03s", s_hidden);}$
      expected output : "hi "$
      your output     : "hi width: 0$
"$
      expected (nonprintable as hex) : "hi "$
      actual   (nonprintable as hex) : "hi width: 0\x0a"$
$
Test  90 (s_prec_09_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.09s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test  91 (s_prec_03_no_width_s_null) : FAILED.$
    First line of code: {return test("%.03s", NULL);}$
    SEGFAULT$
$
Test  92 (s_prec_09_no_width_s_null) : FAILED.$
    First line of code: {return test("%.09s", NULL);}$
    SEGFAULT$
$
Test  93 (s_prec_00_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.00s", "$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test  94 (s_prec_01_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.01s", "$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test  95 (s_prec_03_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.03s", "$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test  96 (s_prec_09_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.09s", "$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test  97 (s_prec_0_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.s", s_hidden);}$
      expected output : "   "$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test  98 (s_prec_0_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%10.s", s_hidden);}$
      expected output : "          "$
      your output     : "    hi lowwidth: 10$
"$
      expected (nonprintable as hex) : "          "$
      actual   (nonprintable as hex) : "    hi lowwidth: 10\x0a"$
$
Test  99 (s_prec_0_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.s", NULL);}$
    SEGFAULT$
$
Test 100 (s_prec_0_width_10_s_null) : FAILED.$
    First line of code: {return test("%10.s", NULL);}$
    SEGFAULT$
$
Test 101 (s_prec_0_width_1_s_nullchar) : FAILED.$
    First line of code: {return test("%1.s", "$
      expected output : " "$
      your output     : " width: 1$
"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " width: 1\x0a"$
$
Test 102 (s_prec_0_width_2_s_nullchar) : FAILED.$
    First line of code: {return test("%2.s", "$
      expected output : "  "$
      your output     : "  width: 2$
"$
      expected (nonprintable as hex) : "  "$
      actual   (nonprintable as hex) : "  width: 2\x0a"$
$
Test 103 (s_prec_0_width_9_s_nullchar) : FAILED.$
    First line of code: {return test("%9.s", "$
      expected output : "         "$
      your output     : "         width: 9$
"$
      expected (nonprintable as hex) : "         "$
      actual   (nonprintable as hex) : "         width: 9\x0a"$
$
Test 104 (s_prec_0_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.s", s_hidden);}$
      expected output : "   "$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test 105 (s_prec_0_lj_width_8_s_hidden) : FAILED.$
    First line of code: {return test("%-8.s", s_hidden);}$
      expected output : "        "$
      your output     : "hi low  width: 8$
"$
      expected (nonprintable as hex) : "        "$
      actual   (nonprintable as hex) : "hi low  width: 8\x0a"$
$
Test 106 (s_prec_0_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.s", NULL);}$
    SEGFAULT$
$
Test 107 (s_prec_0_lj_width_8_s_null) : FAILED.$
    First line of code: {return test("%-8.s", NULL);}$
    SEGFAULT$
$
Test 108 (s_prec_0_lj_width_1_s_nullchar) : FAILED.$
    First line of code: {return test("%-1.s", "$
      expected output : " "$
      your output     : " width: 1$
"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " width: 1\x0a"$
$
Test 109 (s_prec_0_lj_width_2_s_nullchar) : FAILED.$
    First line of code: {return test("%-2.s", "$
      expected output : "  "$
      your output     : "  width: 2$
"$
      expected (nonprintable as hex) : "  "$
      actual   (nonprintable as hex) : "  width: 2\x0a"$
$
Test 110 (s_prec_0_lj_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%-6.s", "$
      expected output : "      "$
      your output     : "      width: 6$
"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      width: 6\x0a"$
$
Test 111 (s_prec_1_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.1s", s_hidden);}$
      expected output : "  h"$
      your output     : "  hwidth: 3$
"$
      expected (nonprintable as hex) : "  h"$
      actual   (nonprintable as hex) : "  hwidth: 3\x0a"$
$
Test 112 (s_prec_1_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%10.1s", s_hidden);}$
      expected output : "         h"$
      your output     : "         hwidth: 10$
"$
      expected (nonprintable as hex) : "         h"$
      actual   (nonprintable as hex) : "         hwidth: 10\x0a"$
$
Test 113 (s_prec_1_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.1s", NULL);}$
    SEGFAULT$
$
Test 114 (s_prec_1_width_9_s_null) : FAILED.$
    First line of code: {return test("%9.1s", NULL);}$
    SEGFAULT$
$
Test 115 (s_prec_1_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.1s", s_hidden);}$
      expected output : "h  "$
      your output     : "h^@^@width: 3$
"$
      expected (nonprintable as hex) : "h  "$
      actual   (nonprintable as hex) : "h\x00\x00width: 3\x0a"$
$
Test 116 (s_prec_1_lj_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%-10.1s", s_hidden);}$
      expected output : "h         "$
      your output     : "h^@^@^@^@^@    width: 10$
"$
      expected (nonprintable as hex) : "h         "$
      actual   (nonprintable as hex) : "h\x00\x00\x00\x00\x00    width: 10\x0a"$
$
Test 117 (s_prec_1_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.1s", NULL);}$
    SEGFAULT$
$
Test 118 (s_prec_1_lj_width_9_s_null) : FAILED.$
    First line of code: {return test("%-9.1s", NULL);}$
    SEGFAULT$
$
Test 119 (s_prec_1_lj_width_3_s_nullchar) : FAILED.$
    First line of code: {return test("%-3.1s", "$
      expected output : "   "$
      your output     : "   width: 3$
"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   width: 3\x0a"$
$
Test 120 (s_prec_1_lj_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%-6.1s", "$
      expected output : "      "$
      your output     : "      width: 6$
"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      width: 6\x0a"$
$
Test 121 (s_prec_perfect_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.6s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test 122 (s_prec_perfect_width_20_s_hidden) : FAILED.$
    First line of code: {return test("%20.6s", s_hidden);}$
      expected output : "              hi low"$
      your output     : "              hi lowwidth: 20$
"$
      expected (nonprintable as hex) : "              hi low"$
      actual   (nonprintable as hex) : "              hi lowwidth: 20\x0a"$
$
Test 123 (s_prec_perfect_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.6s", NULL);}$
    SEGFAULT$
$
Test 124 (s_prec_perfect_width_20_s_null) : FAILED.$
    First line of code: {return test("%20.6s", NULL);}$
    SEGFAULT$
$
Test 125 (s_prec_perfect_width_3_s_nullchar) : FAILED.$
    First line of code: {return test("%3.6s", "$
      expected output : "   "$
      your output     : "   width: 3$
"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   width: 3\x0a"$
$
Test 126 (s_prec_perfect_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%6.6s", "$
      expected output : "      "$
      your output     : "      width: 6$
"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      width: 6\x0a"$
$
Test 127 (s_prec_perfect_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.6s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test 128 (s_prec_perfect_lj_width_20_s_hidden) : FAILED.$
    First line of code: {return test("%-20.6s", s_hidden);}$
      expected output : "hi low              "$
      your output     : "hi low              width: 20$
"$
      expected (nonprintable as hex) : "hi low              "$
      actual   (nonprintable as hex) : "hi low              width: 20\x0a"$
$
Test 129 (s_prec_8_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.8s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test 130 (s_prec_8_lj_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%-10.8s", s_hidden);}$
      expected output : "hi low    "$
      your output     : "hi low    width: 10$
"$
      expected (nonprintable as hex) : "hi low    "$
      actual   (nonprintable as hex) : "hi low    width: 10\x0a"$
$
Test 131 (s_prec_8_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.8s", NULL);}$
    SEGFAULT$
$
Test 132 (s_prec_8_lj_width_10_s_null) : FAILED.$
    First line of code: {return test("%-10.8s", NULL);}$
    SEGFAULT$
$
Test 133 (s_prec_00_lj_s_hidden_trunc) : FAILED.$
    First line of code: {return test("%-.00s", s_hidden);}$
      expected output : ""$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test 134 (s_prec_09_lj_s_hidden_notrunc) : FAILED.$
    First line of code: {return test("%-.09s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test 173 (p_null) : FAILED.$
    First line of code: {return test("%p", NULL);}$
      expected output : "0x0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0x0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 178 (p_ftfc_5w_throwswarning) : FAILED.$
    First line of code: {return test("%5p", 0);}$
      expected output : "  0x0"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "  0x0"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 179 (p_basic) : FAILED.$
    First line of code: {return test("%p%p%p%p%p%p%p%p%p%p%p%p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected output : "0x10c724ee80x10c724ee90x10c724eea0x10c724eec0x10c724ef00x10c724ef40x10c724ef80x10c724f000x10c724f080x10c724f100x10c724f180x10c724f20"$
      your output     : "width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "0x10c724ee80x10c724ee90x10c724eea0x10c724eec0x10c724ef00x10c724ef40x10c724ef80x10c724f000x10c724f080x10c724f100x10c724f180x10c724f20"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 180 (p_width_fit) : FAILED.$
    First line of code: {return test("%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "                                                           0x10c724ee8                                                           0x10c724ee9          "$
      your output     : "width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
"$
      expected (nonprintable as hex) : "                                                           0x10c724ee8                                                           0x10c724ee9          "$
      actual   (nonprintable as hex) : "width: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0a"$
$
Test 181 (p_width_nofit) : FAILED.$
    First line of code: {return test("%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected output : "0x10c724ee80x10c724ee90x10c724eea0x10c724eec0x10c724ef00x10c724ef40x10c724ef80x10c724f000x10c724f080x10c724f100x10c724f180x10c724f20"$
      your output     : "width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
"$
      expected (nonprintable as hex) : "0x10c724ee80x10c724ee90x10c724eea0x10c724eec0x10c724ef00x10c724ef40x10c724ef80x10c724f000x10c724f080x10c724f100x10c724f180x10c724f20"$
      actual   (nonprintable as hex) : "width: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0a"$
$
Test 182 (p_width_16) : FAILED.$
    First line of code: {return test("%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "     0x10c724ee8     0x10c724ee9     0x10c724eea     0x10c724eec     0x10c724ef0     0x10c724ef4     0x10c724ef8     0x10c724f00     0x10c724f08     0"$
      your output     : "width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
"$
      expected (nonprintable as hex) : "     0x10c724ee8     0x10c724ee9     0x10c724eea     0x10c724eec     0x10c724ef0     0x10c724ef4     0x10c724ef8     0x10c724f00     0x10c724f08     0"$
      actual   (nonprintable as hex) : "width: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0a"$
$
Test 183 (p_width_8) : FAILED.$
    First line of code: {return test("%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected output : "0x10c724ee80x10c724ee90x10c724eea0x10c724eec0x10c724ef00x10c724ef40x10c724ef80x10c724f000x10c724f080x10c724f100x10c724f180x10c724f20"$
      your output     : "width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
"$
      expected (nonprintable as hex) : "0x10c724ee80x10c724ee90x10c724eea0x10c724eec0x10c724ef00x10c724ef40x10c724ef80x10c724f000x10c724f080x10c724f100x10c724f180x10c724f20"$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0a"$
$
Test 184 (p_width_32) : FAILED.$
    First line of code: {return test("%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "                     0x10c724ee8                     0x10c724ee9                     0x10c724eea                     0x10c724eec                     0"$
      your output     : "width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
"$
      expected (nonprintable as hex) : "                     0x10c724ee8                     0x10c724ee9                     0x10c724eea                     0x10c724eec                     0"$
      actual   (nonprintable as hex) : "width: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0a"$
$
Test 185 (p_width_fit_lj) : FAILED.$
    First line of code: {return test("%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected output : "0x10c724ee8                                                           0x10c724ee9                                                           0x10c724ee"$
      your output     : "width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
"$
      expected (nonprintable as hex) : "0x10c724ee8                                                           0x10c724ee9                                                           0x10c724ee"$
      actual   (nonprintable as hex) : "width: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0a"$
$
Test 186 (p_width_nofit_lj) : FAILED.$
    First line of code: {return test("%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "0x10c724ee80x10c724ee90x10c724eea0x10c724eec0x10c724ef00x10c724ef40x10c724ef80x10c724f000x10c724f080x10c724f100x10c724f180x10c724f20"$
      your output     : "width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
"$
      expected (nonprintable as hex) : "0x10c724ee80x10c724ee90x10c724eea0x10c724eec0x10c724ef00x10c724ef40x10c724ef80x10c724f000x10c724f080x10c724f100x10c724f180x10c724f20"$
      actual   (nonprintable as hex) : "width: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0a"$
$
Test 187 (p_width_16_lj) : FAILED.$
    First line of code: {return test("%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected output : "0x10c724ee8     0x10c724ee9     0x10c724eea     0x10c724eec     0x10c724ef0     0x10c724ef4     0x10c724ef8     0x10c724f00     0x10c724f08     0x10c7"$
      your output     : "width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
"$
      expected (nonprintable as hex) : "0x10c724ee8     0x10c724ee9     0x10c724eea     0x10c724eec     0x10c724ef0     0x10c724ef4     0x10c724ef8     0x10c724f00     0x10c724f08     0x10c7"$
      actual   (nonprintable as hex) : "width: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0a"$
$
Test 188 (p_width_8_lj) : FAILED.$
    First line of code: {return test("%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "0x10c724ee80x10c724ee90x10c724eea0x10c724eec0x10c724ef00x10c724ef40x10c724ef80x10c724f000x10c724f080x10c724f100x10c724f180x10c724f20"$
      your output     : "width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
"$
      expected (nonprintable as hex) : "0x10c724ee80x10c724ee90x10c724eea0x10c724eec0x10c724ef00x10c724ef40x10c724ef80x10c724f000x10c724f080x10c724f100x10c724f180x10c724f20"$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0a"$
$
Test 189 (p_width_32_lj) : FAILED.$
    First line of code: {return test("%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected output : "0x10c724ee8                     0x10c724ee9                     0x10c724eea                     0x10c724eec                     0x10c724ef0           "$
      your output     : "width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
"$
      expected (nonprintable as hex) : "0x10c724ee8                     0x10c724ee9                     0x10c724eea                     0x10c724eec                     0x10c724ef0           "$
      actual   (nonprintable as hex) : "width: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0a"$
$
Test 190 (d_basic_pos) : FAILED.$
    First line of code: {return test("this %d number", 17);}$
      expected output : "this 17 number"$
      your output     : "this 17 numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this 17 numberwidth: 0\x0a"$
$
Test 191 (d_basic_neg) : FAILED.$
    First line of code: {return test("this %d number", -267);}$
      expected output : "this -267 number"$
      your output     : "this -267 numberwidth: 0$
"$
      expected (nonprintable as hex) : "this -267 number"$
      actual   (nonprintable as hex) : "this -267 numberwidth: 0\x0a"$
$
Test 192 (d_basic_zero) : FAILED.$
    First line of code: {return test("this %d number", 0);}$
      expected output : "this 0 number"$
      your output     : "this 0 numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0 numberwidth: 0\x0a"$
$
Test 193 (d_basic_onlypos) : FAILED.$
    First line of code: {return test("%d", 3);}$
      expected output : "3"$
      your output     : "3width: 0$
"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3width: 0\x0a"$
$
Test 194 (d_basic_onlyneg) : FAILED.$
    First line of code: {return test("%d", -1);}$
      expected output : "-1"$
      your output     : "-1width: 0$
"$
      expected (nonprintable as hex) : "-1"$
      actual   (nonprintable as hex) : "-1width: 0\x0a"$
$
Test 195 (d_basic_onlyzero) : FAILED.$
    First line of code: {return test("%d", 0);}$
      expected output : "0"$
      your output     : "0width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0width: 0\x0a"$
$
Test 196 (d_intmax) : FAILED.$
    First line of code: {return test("%d",  2147483647);}$
      expected output : "2147483647"$
      your output     : "2147483647width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647width: 0\x0a"$
$
Test 197 (d_intmin) : FAILED.$
    First line of code: {return test("%d", (int)(-2147483678));}$
      expected output : "2147483618"$
      your output     : "2147483618width: 0$
"$
      expected (nonprintable as hex) : "2147483618"$
      actual   (nonprintable as hex) : "2147483618width: 0\x0a"$
$
Test 198 (d_width_pos_fits) : FAILED.$
    First line of code: {return test("%7d", 33);}$
      expected output : "     33"$
      your output     : "     33width: 7$
"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "     33width: 7\x0a"$
$
Test 199 (d_width_neg_fits) : FAILED.$
    First line of code: {return test("%7d", -14);}$
      expected output : "    -14"$
      your output     : "    -14width: 7$
"$
      expected (nonprintable as hex) : "    -14"$
      actual   (nonprintable as hex) : "    -14width: 7\x0a"$
$
Test 200 (d_width_zero_fits) : FAILED.$
    First line of code: {return test("%3d", 0);}$
      expected output : "  0"$
      your output     : "   width: 3$
"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "   width: 3\x0a"$
$
Test 201 (d_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5d", 52625);}$
      expected output : "52625"$
      your output     : "52625width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "52625width: 5\x0a"$
$
Test 202 (d_width_neg_exactfit) : FAILED.$
    First line of code: {return test("%5d", -2562);}$
      expected output : "-2562"$
      your output     : "-2562width: 5$
"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-2562width: 5\x0a"$
$
Test 203 (d_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4d", 94827);}$
      expected output : "94827"$
      your output     : "94827width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827width: 4\x0a"$
$
Test 204 (d_width_neg_nofit) : FAILED.$
    First line of code: {return test("%4d", -2464);}$
      expected output : "-2464"$
      your output     : "-2464width: 4$
"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-2464width: 4\x0a"$
$
Test 205 (d_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7d", 33);}$
      expected output : "33     "$
      your output     : "33     width: 7$
"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "33     width: 7\x0a"$
$
Test 206 (d_width_neg_fits_lj) : FAILED.$
    First line of code: {return test("%-7d", -14);}$
      expected output : "-14    "$
      your output     : "-14    width: 7$
"$
      expected (nonprintable as hex) : "-14    "$
      actual   (nonprintable as hex) : "-14    width: 7\x0a"$
$
Test 207 (d_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3d", 0);}$
      expected output : "0  "$
      your output     : "   width: 3$
"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "   width: 3\x0a"$
$
Test 208 (d_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5d", 52625);}$
      expected output : "52625"$
      your output     : "52625width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "52625width: 5\x0a"$
$
Test 209 (d_width_neg_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5d", -2562);}$
      expected output : "-2562"$
      your output     : "-2562width: 5$
"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-2562width: 5\x0a"$
$
Test 210 (d_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4d", 94827);}$
      expected output : "94827"$
      your output     : "94827width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827width: 4\x0a"$
$
Test 211 (d_width_neg_nofit_lj) : FAILED.$
    First line of code: {return test("%-4d", -2464);}$
      expected output : "-2464"$
      your output     : "-2464width: 4$
"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-2464width: 4\x0a"$
$
Test 212 (d_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5d", 2);}$
      expected output : "00002"$
      your output     : "00002width: 0$
"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "00002width: 0\x0a"$
$
Test 213 (d_prec_fits_neg) : FAILED.$
    First line of code: {return test("%.6d", -3);}$
      expected output : "-000003"$
      your output     : "-000003width: 0$
"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "-000003width: 0\x0a"$
$
Test 214 (d_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3d", 0);}$
      expected output : "000"$
      your output     : "0000width: 0$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "0000width: 0\x0a"$
$
Test 215 (d_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4d", 5263);}$
      expected output : "5263"$
      your output     : "5263width: 0$
"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "5263width: 0\x0a"$
$
Test 216 (d_prec_exactfit_neg) : FAILED.$
    First line of code: {return test("%.4d", -2372);}$
      expected output : "-2372"$
      your output     : "-2372width: 0$
"$
      expected (nonprintable as hex) : "-2372"$
      actual   (nonprintable as hex) : "-2372width: 0\x0a"$
$
Test 217 (d_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3d", 13862);}$
      expected output : "13862"$
      your output     : "13862width: 0$
"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "13862width: 0\x0a"$
$
Test 218 (d_prec_nofit_neg) : FAILED.$
    First line of code: {return test("%.3d",-23646);}$
      expected output : "-23646"$
      your output     : "-23646width: 0$
"$
      expected (nonprintable as hex) : "-23646"$
      actual   (nonprintable as hex) : "-23646width: 0\x0a"$
$
Test 219 (d_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05d", 43);}$
      expected output : "00043"$
      your output     : "43^@0^@width: 5$
"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "43\x000\x00width: 5\x0a"$
$
Test 220 (d_zp_neg_fits) : FAILED.$
    First line of code: {return test("%07d", -54);}$
      expected output : "-000054"$
      your output     : "-000054width: 7$
"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "-000054width: 7\x0a"$
$
Test 221 (d_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03d", 0);}$
      expected output : "000"$
      your output     : "^@00width: 3$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "\x0000width: 3\x0a"$
$
Test 222 (d_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03d", 634);}$
      expected output : "634"$
      your output     : "634width: 3$
"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "634width: 3\x0a"$
$
Test 223 (d_zp_neg_exactfit) : FAILED.$
    First line of code: {return test("%04d", -532);}$
      expected output : "-532"$
      your output     : "532width: 4$
"$
      expected (nonprintable as hex) : "-532"$
      actual   (nonprintable as hex) : "532width: 4\x0a"$
$
Test 224 (d_zp_neg_minus1fit) : FAILED.$
    First line of code: {return test("%04d", -4825);}$
      expected output : "-4825"$
      your output     : "4825width: 4$
"$
      expected (nonprintable as hex) : "-4825"$
      actual   (nonprintable as hex) : "4825width: 4\x0a"$
$
Test 225 (d_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5d", 34);}$
      expected output : "   00034"$
      your output     : "   00034width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   00034width: 8\x0a"$
$
Test 226 (d_prec_width_fit_fit_neg) : FAILED.$
    First line of code: {return test("%10.5d", -216);}$
      expected output : "    -00216"$
      your output     : "    -00216width: 10$
"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -00216width: 10\x0a"$
$
Test 227 (d_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5d", 0);}$
      expected output : "   00000"$
      your output     : "   00000width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   00000width: 8\x0a"$
$
Test 228 (d_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3d", 8375);}$
      expected output : "    8375"$
      your output     : "    8375width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    8375width: 8\x0a"$
$
Test 229 (d_prec_width_nofit_fit_neg) : FAILED.$
    First line of code: {return test("%8.3d", -8473);}$
      expected output : "   -8473"$
      your output     : "   -8473width: 8$
"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -8473width: 8\x0a"$
$
Test 230 (d_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7d", 3267);}$
      expected output : "0003267"$
      your output     : "0003267width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267width: 3\x0a"$
$
Test 231 (d_prec_width_fit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.7d", -2375);}$
      expected output : "-0002375"$
      your output     : "-0002375width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-0002375width: 3\x0a"$
$
Test 232 (d_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3d", 6983);}$
      expected output : "6983"$
      your output     : "6983width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983width: 3\x0a"$
$
Test 233 (d_prec_width_nofit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.3d", -8462);}$
      expected output : "-8462"$
      your output     : "-8462width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-8462width: 3\x0a"$
$
Test 234 (d_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5d", 34);}$
      expected output : "00034   "$
      your output     : "00034   width: 8$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   width: 8\x0a"$
$
Test 235 (d_prec_width_fit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-10.5d", -216);}$
      expected output : "-00216    "$
      your output     : "-00216    width: 10$
"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "-00216    width: 10\x0a"$
$
Test 236 (d_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5d", 0);}$
      expected output : "00000   "$
      your output     : "00000   width: 8$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   width: 8\x0a"$
$
Test 237 (d_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3d", 8375);}$
      expected output : "8375    "$
      your output     : "8375    width: 8$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    width: 8\x0a"$
$
Test 238 (d_prec_width_nofit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-8.3d", -8473);}$
      expected output : "-8473   "$
      your output     : "-8473   width: 8$
"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "-8473   width: 8\x0a"$
$
Test 239 (d_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7d", 3267);}$
      expected output : "0003267"$
      your output     : "0003267width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267width: 3\x0a"$
$
Test 240 (d_prec_width_fit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.7d", -2375);}$
      expected output : "-0002375"$
      your output     : "-0002375width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-0002375width: 3\x0a"$
$
Test 241 (d_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3d", 6983);}$
      expected output : "6983"$
      your output     : "6983width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983width: 3\x0a"$
$
Test 242 (d_prec_width_nofit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.3d", -8462);}$
      expected output : "-8462"$
      your output     : "-8462width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-8462width: 3\x0a"$
$
Test 243 (d_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5d", 34);}$
      expected output : "   00034"$
      your output     : "   00034width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   00034width: 8\x0a"$
$
Test 244 (d_prec_width_ff_neg_zp) : FAILED.$
    First line of code: {return test("%010.5d", -216);}$
      expected output : "    -00216"$
      your output     : "    -00216width: 10$
"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -00216width: 10\x0a"$
$
Test 245 (d_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5d", 0);}$
      expected output : "   00000"$
      your output     : "   00000width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   00000width: 8\x0a"$
$
Test 246 (d_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3d", 8375);}$
      expected output : "    8375"$
      your output     : "    8375width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    8375width: 8\x0a"$
$
Test 247 (d_prec_width_nf_neg_zp) : FAILED.$
    First line of code: {return test("%08.3d", -8473);}$
      expected output : "   -8473"$
      your output     : "   -8473width: 8$
"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -8473width: 8\x0a"$
$
Test 248 (d_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7d", 3267);}$
      expected output : "0003267"$
      your output     : "0003267width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267width: 3\x0a"$
$
Test 249 (d_prec_width_fn_neg_zp) : FAILED.$
    First line of code: {return test("%03.7d", -2375);}$
      expected output : "-0002375"$
      your output     : "-0002375width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-0002375width: 3\x0a"$
$
Test 250 (d_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3d", 6983);}$
      expected output : "6983"$
      your output     : "6983width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983width: 3\x0a"$
$
Test 251 (d_prec_width_nn_neg_zp) : FAILED.$
    First line of code: {return test("%03.3d", -8462);}$
      expected output : "-8462"$
      your output     : "-8462width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-8462width: 3\x0a"$
$
Test 252 (d_prec_width_ff_pos_lj_zp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5d", 34);}$
      expected output : "00034   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 253 (d_prec_width_ff_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-10.5d", -216);}$
      expected output : "-00216    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 254 (d_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5d", 0);}$
      expected output : "00000   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 255 (d_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3d", 8375);}$
      expected output : "8375    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 256 (d_prec_width_nf_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3d", -8473);}$
      expected output : "-8473   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 257 (d_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7d", 3267);}$
      expected output : "0003267"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 258 (d_prec_width_fn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7d", -2375);}$
      expected output : "-0002375"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 259 (d_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3d", 6983);}$
      expected output : "6983"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 260 (d_prec_width_nn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3d", -8462);}$
      expected output : "-8462"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 261 (d_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0d", 0);}$
      expected output : ""$
      your output     : "0width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "0width: 0\x0a"$
$
Test 262 (d_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.d", 0);}$
      expected output : ""$
      your output     : "0width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "0width: 0\x0a"$
$
Test 263 (d_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0d", 0);}$
      expected output : "     "$
      your output     : "     width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     width: 5\x0a"$
$
Test 264 (d_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.d", 0);}$
      expected output : "     "$
      your output     : "     width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     width: 5\x0a"$
$
Test 265 (d_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0d", 0);}$
      expected output : "     "$
      your output     : "     width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     width: 5\x0a"$
$
Test 266 (d_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.d", 0);}$
      expected output : "     "$
      your output     : "     width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     width: 5\x0a"$
$
Test 267 (i_basic_pos) : FAILED.$
    First line of code: {return test("this %i number", 17);}$
      expected output : "this 17 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 268 (i_basic_neg) : FAILED.$
    First line of code: {return test("this %i number", -267);}$
      expected output : "this -267 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this -267 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 269 (i_basic_zero) : FAILED.$
    First line of code: {return test("this %i number", 0);}$
      expected output : "this 0 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 270 (i_basic_onlypos) : FAILED.$
    First line of code: {return test("%i", 3);}$
      expected output : "3"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 271 (i_basic_onlyneg) : FAILED.$
    First line of code: {return test("%i", -1);}$
      expected output : "-1"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-1"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 272 (i_basic_onlyzero) : FAILED.$
    First line of code: {return test("%i", 0);}$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 273 (i_intmax) : FAILED.$
    First line of code: {return test("%i",  2147483647);}$
      expected output : "2147483647"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 274 (i_intmin) : FAILED.$
    First line of code: {return test("%i", (int)(-2147483678));}$
      expected output : "2147483618"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483618"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 275 (i_width_pos_fits) : FAILED.$
    First line of code: {return test("%7i", 33);}$
      expected output : "     33"$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 276 (i_width_neg_fits) : FAILED.$
    First line of code: {return test("%7i", -14);}$
      expected output : "    -14"$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "    -14"$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 277 (i_width_zero_fits) : FAILED.$
    First line of code: {return test("%3i", 0);}$
      expected output : "  0"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 278 (i_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5i", 52625);}$
      expected output : "52625"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 279 (i_width_neg_exactfit) : FAILED.$
    First line of code: {return test("%5i", -2562);}$
      expected output : "-2562"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 280 (i_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4i", 94827);}$
      expected output : "94827"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 281 (i_width_neg_nofit) : FAILED.$
    First line of code: {return test("%4i", -2464);}$
      expected output : "-2464"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 282 (i_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7i", 33);}$
      expected output : "33     "$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 283 (i_width_neg_fits_lj) : FAILED.$
    First line of code: {return test("%-7i", -14);}$
      expected output : "-14    "$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "-14    "$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 284 (i_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3i", 0);}$
      expected output : "0  "$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 285 (i_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5i", 52625);}$
      expected output : "52625"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 286 (i_width_neg_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5i", -2562);}$
      expected output : "-2562"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 287 (i_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4i", 94827);}$
      expected output : "94827"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 288 (i_width_neg_nofit_lj) : FAILED.$
    First line of code: {return test("%-4i", -2464);}$
      expected output : "-2464"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 289 (i_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5i", 2);}$
      expected output : "00002"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 290 (i_prec_fits_neg) : FAILED.$
    First line of code: {return test("%.6i", -3);}$
      expected output : "-000003"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 291 (i_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3i", 0);}$
      expected output : "000"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 292 (i_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4i", 5263);}$
      expected output : "5263"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 293 (i_prec_exactfit_neg) : FAILED.$
    First line of code: {return test("%.4i", -2372);}$
      expected output : "-2372"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-2372"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 294 (i_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3i", 13862);}$
      expected output : "13862"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 295 (i_prec_nofit_neg) : FAILED.$
    First line of code: {return test("%.3i",-23646);}$
      expected output : "-23646"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-23646"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 296 (i_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05i", 43);}$
      expected output : "00043"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 297 (i_zp_neg_fits) : FAILED.$
    First line of code: {return test("%07i", -54);}$
      expected output : "-000054"$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 298 (i_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03i", 0);}$
      expected output : "000"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 299 (i_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03i", 634);}$
      expected output : "634"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 300 (i_zp_neg_exactfit) : FAILED.$
    First line of code: {return test("%04i", -532);}$
      expected output : "-532"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "-532"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 301 (i_zp_neg_minus1fit) : FAILED.$
    First line of code: {return test("%04i", -4825);}$
      expected output : "-4825"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "-4825"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 302 (i_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5i", 34);}$
      expected output : "   00034"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 303 (i_prec_width_fit_fit_neg) : FAILED.$
    First line of code: {return test("%10.5i", -216);}$
      expected output : "    -00216"$
      your output     : "width: 10$
"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "width: 10\x0a"$
$
Test 304 (i_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5i", 0);}$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 305 (i_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3i", 8375);}$
      expected output : "    8375"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 306 (i_prec_width_nofit_fit_neg) : FAILED.$
    First line of code: {return test("%8.3i", -8473);}$
      expected output : "   -8473"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 307 (i_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7i", 3267);}$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 308 (i_prec_width_fit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.7i", -2375);}$
      expected output : "-0002375"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 309 (i_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3i", 6983);}$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 310 (i_prec_width_nofit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.3i", -8462);}$
      expected output : "-8462"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 311 (i_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5i", 34);}$
      expected output : "00034   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 312 (i_prec_width_fit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-10.5i", -216);}$
      expected output : "-00216    "$
      your output     : "width: 10$
"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "width: 10\x0a"$
$
Test 313 (i_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5i", 0);}$
      expected output : "00000   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 314 (i_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3i", 8375);}$
      expected output : "8375    "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 315 (i_prec_width_nofit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-8.3i", -8473);}$
      expected output : "-8473   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 316 (i_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7i", 3267);}$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 317 (i_prec_width_fit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.7i", -2375);}$
      expected output : "-0002375"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 318 (i_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3i", 6983);}$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 319 (i_prec_width_nofit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.3i", -8462);}$
      expected output : "-8462"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 320 (i_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5i", 34);}$
      expected output : "   00034"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 321 (i_prec_width_ff_neg_zp) : FAILED.$
    First line of code: {return test("%010.5i", -216);}$
      expected output : "    -00216"$
      your output     : "width: 10$
"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "width: 10\x0a"$
$
Test 322 (i_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5i", 0);}$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 323 (i_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3i", 8375);}$
      expected output : "    8375"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 324 (i_prec_width_nf_neg_zp) : FAILED.$
    First line of code: {return test("%08.3i", -8473);}$
      expected output : "   -8473"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 325 (i_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7i", 3267);}$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 326 (i_prec_width_fn_neg_zp) : FAILED.$
    First line of code: {return test("%03.7i", -2375);}$
      expected output : "-0002375"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 327 (i_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3i", 6983);}$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 328 (i_prec_width_nn_neg_zp) : FAILED.$
    First line of code: {return test("%03.3i", -8462);}$
      expected output : "-8462"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 329 (i_prec_width_ff_pos_lj_zp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5i", 34);}$
      expected output : "00034   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 330 (i_prec_width_ff_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-10.5i", -216);}$
      expected output : "-00216    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 331 (i_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5i", 0);}$
      expected output : "00000   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 332 (i_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3i", 8375);}$
      expected output : "8375    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 333 (i_prec_width_nf_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3i", -8473);}$
      expected output : "-8473   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 334 (i_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7i", 3267);}$
      expected output : "0003267"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 335 (i_prec_width_fn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7i", -2375);}$
      expected output : "-0002375"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 336 (i_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3i", 6983);}$
      expected output : "6983"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 337 (i_prec_width_nn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3i", -8462);}$
      expected output : "-8462"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 338 (i_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0i", 0);}$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 339 (i_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.i", 0);}$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 340 (i_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0i", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 341 (i_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.i", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 342 (i_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0i", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 343 (i_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.i", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 344 (u_basic_pos) : FAILED.$
    First line of code: {return test("this %u number", 17);}$
      expected output : "this 17 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 345 (u_basic_zero) : FAILED.$
    First line of code: {return test("this %u number", 0);}$
      expected output : "this 0 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 346 (u_basic_onlypos) : FAILED.$
    First line of code: {return test("%u", 3);}$
      expected output : "3"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 347 (u_uintmax) : FAILED.$
    First line of code: {return test("%u", 4294967295u);}$
      expected output : "4294967295"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "4294967295"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 348 (u_width_pos_fits) : FAILED.$
    First line of code: {return test("%7u", 33);}$
      expected output : "     33"$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 349 (u_width_zero_fits) : FAILED.$
    First line of code: {return test("%3u", 0);}$
      expected output : "  0"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 350 (u_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5u", 52625);}$
      expected output : "52625"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 351 (u_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4u", 94827);}$
      expected output : "94827"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 352 (u_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7u", 33);}$
      expected output : "33     "$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 353 (u_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3u", 0);}$
      expected output : "0  "$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 354 (u_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5u", 52625);}$
      expected output : "52625"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 355 (u_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4u", 94827);}$
      expected output : "94827"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 356 (u_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5u", 2);}$
      expected output : "00002"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 357 (u_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3u", 0);}$
      expected output : "000"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 358 (u_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4u", 5263);}$
      expected output : "5263"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 359 (u_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3u", 13862);}$
      expected output : "13862"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 360 (u_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05u", 43);}$
      expected output : "00043"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 361 (u_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03u", 0);}$
      expected output : "000"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 362 (u_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03u", 634);}$
      expected output : "634"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 363 (u_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5u", 34);}$
      expected output : "   00034"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 364 (u_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5u", 0);}$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 365 (u_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3u", 8375);}$
      expected output : "    8375"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 366 (u_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7u", 3267);}$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 367 (u_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3u", 6983);}$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 368 (u_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5u", 34);}$
      expected output : "00034   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 369 (u_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5u", 0);}$
      expected output : "00000   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 370 (u_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3u", 8375);}$
      expected output : "8375    "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 371 (u_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7u", 3267);}$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 372 (u_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3u", 6983);}$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 373 (u_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5u", 34);}$
      expected output : "   00034"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 374 (u_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5u", 0);}$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 375 (u_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3u", 8375);}$
      expected output : "    8375"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 376 (u_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7u", 3267);}$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 377 (u_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3u", 6983);}$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 378 (u_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5u", 34);}$
      expected output : "00034   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 379 (u_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5u", 0);}$
      expected output : "00000   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 380 (u_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3u", 8375);}$
      expected output : "8375    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 381 (u_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7u", 3267);}$
      expected output : "0003267"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 382 (u_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3u", 6983);}$
      expected output : "6983"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 383 (u_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0u", 0);}$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 384 (u_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.u", 0);}$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 385 (u_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0u", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 386 (u_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.u", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 387 (u_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0u", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 388 (u_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.u", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 389 (x_basic_pos) : FAILED.$
    First line of code: {return test("this %x number", 17);}$
      expected output : "this 11 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 11 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 390 (x_basic_zero) : FAILED.$
    First line of code: {return test("this %x number", 0);}$
      expected output : "this 0 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 391 (x_basic_onlypos) : FAILED.$
    First line of code: {return test("%x", 3);}$
      expected output : "3"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 392 (x_hexlmax) : FAILED.$
    First line of code: {return test("%x", 4294967295u);}$
      expected output : "ffffffff"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "ffffffff"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 393 (x_width_pos_fits) : FAILED.$
    First line of code: {return test("%7x", 33);}$
      expected output : "     21"$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "     21"$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 394 (x_width_zero_fits) : FAILED.$
    First line of code: {return test("%3x", 0);}$
      expected output : "  0"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 395 (x_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5x", 52625);}$
      expected output : " cd91"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : " cd91"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 396 (x_width_pos_nofit) : FAILED.$
    First line of code: {return test("%2x", 94827);}$
      expected output : "1726b"$
      your output     : "width: 2$
"$
      expected (nonprintable as hex) : "1726b"$
      actual   (nonprintable as hex) : "width: 2\x0a"$
$
Test 397 (x_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7x", 33);}$
      expected output : "21     "$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "21     "$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 398 (x_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3x", 0);}$
      expected output : "0  "$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 399 (x_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5x", 52625);}$
      expected output : "cd91 "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "cd91 "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 400 (x_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4x", 9648627);}$
      expected output : "9339f3"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "9339f3"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 401 (x_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5x", 21);}$
      expected output : "00015"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00015"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 402 (x_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3x", 0);}$
      expected output : "000"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 403 (x_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4x", 5263);}$
      expected output : "148f"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "148f"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 404 (x_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3x", 938862);}$
      expected output : "e536e"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "e536e"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 405 (x_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05x", 43);}$
      expected output : "0002b"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "0002b"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 406 (x_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03x", 0);}$
      expected output : "000"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 407 (x_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03x", 698334);}$
      expected output : "aa7de"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "aa7de"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 408 (x_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5x", 34);}$
      expected output : "   00022"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 409 (x_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5x", 0);}$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 410 (x_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3x", 8375);}$
      expected output : "    20b7"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    20b7"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 411 (x_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%2.7x", 3267);}$
      expected output : "0000cc3"$
      your output     : "width: 2$
"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "width: 2\x0a"$
$
Test 412 (x_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3x", 6983);}$
      expected output : "1b47"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 413 (x_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5x", 34);}$
      expected output : "00022   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 414 (x_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5x", 0);}$
      expected output : "00000   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 415 (x_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3x", 8375);}$
      expected output : "20b7    "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "20b7    "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 416 (x_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-2.7x", 3267);}$
      expected output : "0000cc3"$
      your output     : "width: 2$
"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "width: 2\x0a"$
$
Test 417 (x_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3x", 6983);}$
      expected output : "1b47"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 418 (x_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5x", 34);}$
      expected output : "   00022"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 419 (x_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5x", 0);}$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 420 (x_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3x", 8375);}$
      expected output : "    20b7"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    20b7"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 421 (x_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%02.7x", 3267);}$
      expected output : "0000cc3"$
      your output     : "width: 2$
"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "width: 2\x0a"$
$
Test 422 (x_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3x", 6983);}$
      expected output : "1b47"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 423 (x_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5x", 34);}$
      expected output : "00022   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 424 (x_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5x", 0);}$
      expected output : "00000   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 425 (x_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3x", 8375);}$
      expected output : "20b7    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "20b7    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 426 (x_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-2.7x", 3267);}$
      expected output : "0000cc3"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 427 (x_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3x", 6983);}$
      expected output : "1b47"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 428 (x_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0x", 0);}$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 429 (x_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.x", 0);}$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 430 (x_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0x", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 431 (x_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.x", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 432 (x_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0x", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 433 (x_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.x", 0);}$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 434 (X_basic_hexu_pos) : FAILED.$
    First line of code: {return test("this %X number", 17);}$
      expected output : "this 11 number"$
      your output     : "this mberwidth: 0$
"$
      expected (nonprintable as hex) : "this 11 number"$
      actual   (nonprintable as hex) : "this mberwidth: 0\x0a"$
$
Test 435 (X_basic_hexu_zero) : FAILED.$
    First line of code: {return test("this %X number", 0);}$
      expected output : "this 0 number"$
      your output     : "this mberwidth: 0$
"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this mberwidth: 0\x0a"$
$
Test 436 (X_basic_hexu_onlypos) : FAILED.$
    First line of code: {return test("%X", 3);}$
    SEGFAULT$
$
Test 437 (X_hexumax) : FAILED.$
    First line of code: {return test("%X", 4294967295u);}$
    SEGFAULT$
$
Test 438 (X_width_pos_fits) : FAILED.$
    First line of code: {return test("%7X", 33);}$
    SEGFAULT$
$
Test 439 (X_width_zero_fits) : FAILED.$
    First line of code: {return test("%3X", 0);}$
    SEGFAULT$
$
Test 440 (X_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5X", 52625);}$
    SEGFAULT$
$
Test 441 (X_width_pos_nofit) : FAILED.$
    First line of code: {return test("%2X", 94827);}$
    SEGFAULT$
$
Test 442 (X_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7X", 33);}$
    SEGFAULT$
$
Test 443 (X_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3X", 0);}$
    SEGFAULT$
$
Test 444 (X_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5X", 52625);}$
    SEGFAULT$
$
Test 445 (X_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4X", 9648627);}$
    SEGFAULT$
$
Test 446 (X_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5X", 21);}$
    SEGFAULT$
$
Test 447 (X_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3X", 0);}$
    SEGFAULT$
$
Test 448 (X_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4X", 5263);}$
    SEGFAULT$
$
Test 449 (X_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3X", 938862);}$
    SEGFAULT$
$
Test 450 (X_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05X", 43);}$
    SEGFAULT$
$
Test 451 (X_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03X", 0);}$
    SEGFAULT$
$
Test 452 (X_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03X", 698334);}$
    SEGFAULT$
$
Test 453 (X_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5X", 34);}$
    SEGFAULT$
$
Test 454 (X_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5X", 0);}$
    SEGFAULT$
$
Test 455 (X_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3X", 8375);}$
    SEGFAULT$
$
Test 456 (X_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%2.7X", 3267);}$
    SEGFAULT$
$
Test 457 (X_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3X", 6983);}$
    SEGFAULT$
$
Test 458 (X_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5X", 34);}$
    SEGFAULT$
$
Test 459 (X_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5X", 0);}$
    SEGFAULT$
$
Test 460 (X_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3X", 8375);}$
    SEGFAULT$
$
Test 461 (X_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-2.7X", 3267);}$
    SEGFAULT$
$
Test 462 (X_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3X", 6983);}$
    SEGFAULT$
$
Test 463 (X_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5X", 34);}$
    SEGFAULT$
$
Test 464 (X_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5X", 0);}$
    SEGFAULT$
$
Test 465 (X_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3X", 8375);}$
    SEGFAULT$
$
Test 466 (X_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%02.7X", 3267);}$
    SEGFAULT$
$
Test 467 (X_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3X", 6983);}$
    SEGFAULT$
$
Test 468 (X_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5X", 34);}$
    SEGFAULT$
$
Test 469 (X_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5X", 0);}$
    SEGFAULT$
$
Test 470 (X_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3X", 8375);}$
    SEGFAULT$
$
Test 471 (X_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-2.7X", 3267);}$
    SEGFAULT$
$
Test 472 (X_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3X", 6983);}$
    SEGFAULT$
$
Test 473 (X_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0X", 0);}$
      expected output : ""$
      your output     : "5.0Xwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "5.0Xwidth: 0\x0awidth: 0\x0a"$
$
Test 474 (X_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.X", 0);}$
      expected output : ""$
      your output     : "-5.0Xwidth: 0$
width: 5$
width: 5$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "-5.0Xwidth: 0\x0awidth: 5\x0awidth: 5\x0a"$
$
Test 475 (X_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0X", 0);}$
      expected output : "     "$
      your output     : "-5.0Xwidth: 5$
width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "-5.0Xwidth: 5\x0awidth: 5\x0a"$
$
Test 476 (X_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.X", 0);}$
      expected output : "     "$
      your output     : "*swidth: 5$
width: 5$
width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "*swidth: 5\x0awidth: 5\x0awidth: 5\x0a"$
$
Test 477 (X_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0X", 0);}$
      expected output : "     "$
      your output     : "*swidth: 5$
width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "*swidth: 5\x0awidth: 5\x0a"$
$
Test 478 (X_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.X", 0);}$
    SEGFAULT$
$
Test 479 (new2019_star_1) : FAILED.$
    First line of code: {return test("%*s", 32, "abc");}$
      expected output : "                             abc"$
      your output     : "                             abcwidth: 32$
"$
      expected (nonprintable as hex) : "                             abc"$
      actual   (nonprintable as hex) : "                             abcwidth: 32\x0a"$
$
Test 480 (new2019_star_2) : FAILED.$
    First line of code: {return test("%-*s", 32, "abc");}$
      expected output : "abc                             "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 481 (new2019_star_3) : FAILED.$
    First line of code: {return test("%*s", 3, "hello");}$
      expected output : "hello"$
      your output     : "hellowidth: 3$
"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hellowidth: 3\x0a"$
$
Test 482 (new2019_star_4) : FAILED.$
    First line of code: {return test("%.*s", 3, "hello");}$
      expected output : "hel"$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : "hel"$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test 483 (new2019_star_5) : FAILED.$
    First line of code: {return test("%.*s", 0, "hello");}$
      expected output : ""$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test 484 (new2019_star_6) : FAILED.$
    First line of code: {return test("%-*.*s", 7, 3, "yolo");}$
      expected output : "yol    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "yol    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 485 (new2019_star_7) : FAILED.$
    First line of code: {return test("%*i", 4, 94827);}$
      expected output : "94827"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 486 (new2019_star_8) : FAILED.$
    First line of code: {return test("%*i", 14, 94827);}$
      expected output : "         94827"$
      your output     : "width: 14$
"$
      expected (nonprintable as hex) : "         94827"$
      actual   (nonprintable as hex) : "width: 14\x0a"$
$
Test 487 (new2019_star_9) : FAILED.$
    First line of code: {return test("%.*i", 6, -3);}$
      expected output : "-000003"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 488 (new2019_star_10) : FAILED.$
    First line of code: {return test("%0*i", 7, -54);}$
      expected output : "-000054"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 489 (new2019_negstar_1) : FAILED.$
    First line of code: {return test("%*s", -32, "abc");}$
      expected output : "abc                             "$
      your output     : "abc                             width: -32$
"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             width: -32\x0a"$
$
Test 490 (new2019_negstar_2) : FAILED.$
    First line of code: {return test("%-*s", -32, "abc");}$
      expected output : "abc                             "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 491 (new2019_negstar_3) : FAILED.$
    First line of code: {return test("%*s", -3, "hello");}$
      expected output : "hello"$
      your output     : "hellowidth: -3$
"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hellowidth: -3\x0a"$
$
Test 492 (new2019_negstar_4) : FAILED.$
    First line of code: {return test("%.*s", -3, "hello");}$
      expected output : "hello"$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test 493 (new2019_negstar_5) : FAILED.$
    First line of code: {return test("%-*.*s", -7, -3, "yolo");}$
      expected output : "yolo   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "yolo   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 494 (new2019_negstar_6) : FAILED.$
    First line of code: {return test("%*i", -4, 94827);}$
      expected output : "94827"$
      your output     : "width: -4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: -4\x0a"$
$
Test 495 (new2019_negstar_7) : FAILED.$
    First line of code: {return test("%*i", -14, 94827);}$
      expected output : "94827         "$
      your output     : "width: -14$
"$
      expected (nonprintable as hex) : "94827         "$
      actual   (nonprintable as hex) : "width: -14\x0a"$
$
Test 496 (new2019_negstar_8) : FAILED.$
    First line of code: {return test("%.*i", -6, -3);}$
      expected output : "-3"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-3"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 497 (new2019_negstar_9) : FAILED.$
    First line of code: {return test("%0*i", -7, -54);}$
      expected output : "-54    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-54    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 548 (moul_c_1) : FAILED.$
    First line of code: {return test("%c", 42);}$
      expected output : "*"$
      your output     : "*width: 0$
"$
      expected (nonprintable as hex) : "*"$
      actual   (nonprintable as hex) : "*width: 0\x0a"$
$
Test 549 (moul_c_2) : FAILED.$
    First line of code: {return test("Kashim a %c histoires Ã  raconter", 1001);}$
      expected output : "Kashim a é histoires Ã  raconter"$
      your output     : "Kashim a é histoires Ã  raconterwidth: 0$
"$
      expected (nonprintable as hex) : "Kashim a \xe9 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a \xe9 histoires \xc3\xa0 raconterwidth: 0\x0a"$
$
Test 550 (moul_c_3) : FAILED.$
    First line of code: {return test("Il fait au moins %c$
", -8000);}$
      expected output : "Il fait au moins À$
"$
      your output     : "Il fait au moins À$
width: 0$
"$
      expected (nonprintable as hex) : "Il fait au moins \xc0\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins \xc0\x0awidth: 0\x0a"$
$
Test 551 (moul_c_4) : FAILED.$
    First line of code: {return test("%c", -0);}$
      expected output : "^@"$
      your output     : "^@width: 0$
"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00width: 0\x0a"$
$
Test 552 (moul_c_5) : FAILED.$
    First line of code: {return test("%c", 0);}$
      expected output : "^@"$
      your output     : "^@width: 0$
"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00width: 0\x0a"$
$
Test 553 (moul_c_5b) : FAILED.$
    First line of code: {return test("%c$
", INT_MAX);}$
      expected output : "ÿ$
"$
      your output     : "ÿ$
width: 0$
"$
      expected (nonprintable as hex) : "\xff\x0a"$
      actual   (nonprintable as hex) : "\xff\x0awidth: 0\x0a"$
$
Test 554 (moul_c_6) : FAILED.$
    First line of code: {return test("%c$
", 'c');}$
      expected output : "c$
"$
      your output     : "c$
width: 0$
"$
      expected (nonprintable as hex) : "c\x0a"$
      actual   (nonprintable as hex) : "c\x0awidth: 0\x0a"$
$
Test 555 (moul_c_7) : FAILED.$
    First line of code: {return test("%c$
", '$
');}$
      expected output : "$
$
"$
      your output     : "$
$
width: 0$
"$
      expected (nonprintable as hex) : "\x0a\x0a"$
      actual   (nonprintable as hex) : "\x0a\x0awidth: 0\x0a"$
$
Test 556 (moul_c_8) : FAILED.$
    First line of code: {return test("%c", 'l');}$
      expected output : "l"$
      your output     : "lwidth: 0$
"$
      expected (nonprintable as hex) : "l"$
      actual   (nonprintable as hex) : "lwidth: 0\x0a"$
$
Test 557 (moul_c_9) : FAILED.$
    First line of code: {return test("%c", 'y');}$
      expected output : "y"$
      your output     : "ywidth: 0$
"$
      expected (nonprintable as hex) : "y"$
      actual   (nonprintable as hex) : "ywidth: 0\x0a"$
$
Test 558 (moul_c_10) : FAILED.$
    First line of code: {return test("%c", ' ');}$
      expected output : " "$
      your output     : " width: 0$
"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " width: 0\x0a"$
$
Test 559 (moul_c_11) : FAILED.$
    First line of code: {return test("%c", 'e');}$
      expected output : "e"$
      your output     : "ewidth: 0$
"$
      expected (nonprintable as hex) : "e"$
      actual   (nonprintable as hex) : "ewidth: 0\x0a"$
$
Test 560 (moul_c_12) : FAILED.$
    First line of code: {return test("%c", 's');}$
      expected output : "s"$
      your output     : "swidth: 0$
"$
      expected (nonprintable as hex) : "s"$
      actual   (nonprintable as hex) : "swidth: 0\x0a"$
$
Test 561 (moul_c_13) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected output : "t"$
      your output     : "twidth: 0$
"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "twidth: 0\x0a"$
$
Test 562 (moul_c_14) : FAILED.$
    First line of code: {return test("%c", ' ');}$
      expected output : " "$
      your output     : " width: 0$
"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " width: 0\x0a"$
$
Test 563 (moul_c_15) : FAILED.$
    First line of code: {return test("%c", 'f');}$
      expected output : "f"$
      your output     : "fwidth: 0$
"$
      expected (nonprintable as hex) : "f"$
      actual   (nonprintable as hex) : "fwidth: 0\x0a"$
$
Test 564 (moul_c_16) : FAILED.$
    First line of code: {return test("%c", 'a');}$
      expected output : "a"$
      your output     : "awidth: 0$
"$
      expected (nonprintable as hex) : "a"$
      actual   (nonprintable as hex) : "awidth: 0\x0a"$
$
Test 565 (moul_c_17) : FAILED.$
    First line of code: {return test("%c", 'n');}$
      expected output : "n"$
      your output     : "nwidth: 0$
"$
      expected (nonprintable as hex) : "n"$
      actual   (nonprintable as hex) : "nwidth: 0\x0a"$
$
Test 566 (moul_c_18) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected output : "t"$
      your output     : "twidth: 0$
"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "twidth: 0\x0a"$
$
Test 567 (moul_c_19) : FAILED.$
    First line of code: {return test("%c", 'a');}$
      expected output : "a"$
      your output     : "awidth: 0$
"$
      expected (nonprintable as hex) : "a"$
      actual   (nonprintable as hex) : "awidth: 0\x0a"$
$
Test 568 (moul_c_20) : FAILED.$
    First line of code: {return test("%c", 's');}$
      expected output : "s"$
      your output     : "swidth: 0$
"$
      expected (nonprintable as hex) : "s"$
      actual   (nonprintable as hex) : "swidth: 0\x0a"$
$
Test 569 (moul_c_21) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected output : "t"$
      your output     : "twidth: 0$
"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "twidth: 0\x0a"$
$
Test 570 (moul_c_22) : FAILED.$
    First line of code: {return test("%c", 'i');}$
      expected output : "i"$
      your output     : "iwidth: 0$
"$
      expected (nonprintable as hex) : "i"$
      actual   (nonprintable as hex) : "iwidth: 0\x0a"$
$
Test 571 (moul_c_23) : FAILED.$
    First line of code: {return test("%c", 'q');}$
      expected output : "q"$
      your output     : "qwidth: 0$
"$
      expected (nonprintable as hex) : "q"$
      actual   (nonprintable as hex) : "qwidth: 0\x0a"$
$
Test 572 (moul_c_24) : FAILED.$
    First line of code: {return test("%c", 'u');}$
      expected output : "u"$
      your output     : "uwidth: 0$
"$
      expected (nonprintable as hex) : "u"$
      actual   (nonprintable as hex) : "uwidth: 0\x0a"$
$
Test 573 (moul_c_25) : FAILED.$
    First line of code: {return test("%c", 'e');}$
      expected output : "e"$
      your output     : "ewidth: 0$
"$
      expected (nonprintable as hex) : "e"$
      actual   (nonprintable as hex) : "ewidth: 0\x0a"$
$
Test 574 (moul_c_26) : FAILED.$
    First line of code: {return test("%c$
", '!');}$
      expected output : "!$
"$
      your output     : "!$
width: 0$
"$
      expected (nonprintable as hex) : "!\x0a"$
      actual   (nonprintable as hex) : "!\x0awidth: 0\x0a"$
$
Test 575 (moul_c_27) : FAILED.$
    First line of code: {return test("%c$
", '^M');}$
      expected output : "^M$
"$
      your output     : "^M$
width: 0$
"$
      expected (nonprintable as hex) : "\x0d\x0a"$
      actual   (nonprintable as hex) : "\x0d\x0awidth: 0\x0a"$
$
Test 576 (moul_c_28) : FAILED.$
    First line of code: {return test("%c$
", '	');}$
      expected output : "	$
"$
      your output     : "	$
width: 0$
"$
      expected (nonprintable as hex) : "\x09\x0a"$
      actual   (nonprintable as hex) : "\x09\x0awidth: 0\x0a"$
$
Test 577 (moul_s_1) : FAILED.$
    First line of code: {return test(" pouet %s !!", "camembert");}$
      expected output : " pouet camembert !!"$
      your output     : " pouet camembert !!width: 0$
"$
      expected (nonprintable as hex) : " pouet camembert !!"$
      actual   (nonprintable as hex) : " pouet camembert !!width: 0\x0a"$
$
Test 578 (moul_s_2) : FAILED.$
    First line of code: {return test("%s !", "Ceci n'est pas un $
      expected output : "Ceci n'est pas un  !"$
      your output     : "Ceci n'est pas un  !width: 0$
"$
      expected (nonprintable as hex) : "Ceci n'est pas un  !"$
      actual   (nonprintable as hex) : "Ceci n'est pas un  !width: 0\x0a"$
$
Test 579 (moul_s_3) : FAILED.$
    First line of code: {return test("%s!", "Ceci n'est toujours pas un exercice !");}$
      expected output : "Ceci n'est toujours pas un exercice !!"$
      your output     : "Ceci n'est toujours pas un exercice !!width: 0$
"$
      expected (nonprintable as hex) : "Ceci n'est toujours pas un exercice !!"$
      actual   (nonprintable as hex) : "Ceci n'est toujours pas un exercice !!width: 0\x0a"$
$
Test 580 (moul_s_4) : FAILED.$
    First line of code: {char *str = NULL; return test("%s!", str);}$
    SEGFAULT$
$
Test 581 (moul_s_5_this_ones_a_doozy) : FAILED.$
    First line of code: {return test("%s",$
      expected output : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdecÅM-^Surc'Ã©taitunsoir"$
      your output     : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdecÅM-^Surc'Ã©taitunsoir"$
      expected (nonprintable as hex) : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdec\xc5\x93urc'\xc3\xa9taitunsoir"$
      actual   (nonprintable as hex) : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdec\xc5\x93urc'\xc3\xa9taitunsoir"$
$
Test 582 (moul_d_1) : FAILED.$
    First line of code: {return test("%d", 42);}$
      expected output : "42"$
      your output     : "42width: 0$
"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "42width: 0\x0a"$
$
Test 583 (moul_d_2) : FAILED.$
    First line of code: {return test("Kashim a %d histoires Ã  raconter", 1001);}$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a 1001 histoires Ã  raconterwidth: 0$
"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconterwidth: 0\x0a"$
$
Test 584 (moul_d_3) : FAILED.$
    First line of code: {return test("Il fait au moins %d$
", -8000);}$
      expected output : "Il fait au moins -8000$
"$
      your output     : "Il fait au moins -8000$
width: 0$
"$
      expected (nonprintable as hex) : "Il fait au moins -8000\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins -8000\x0awidth: 0\x0a"$
$
Test 585 (moul_d_4) : FAILED.$
    First line of code: {return test("%d", -0);}$
      expected output : "0"$
      your output     : "0width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0width: 0\x0a"$
$
Test 586 (moul_d_5) : FAILED.$
    First line of code: {return test("%d", 0);}$
      expected output : "0"$
      your output     : "0width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0width: 0\x0a"$
$
Test 587 (moul_d_6) : FAILED.$
    First line of code: {return test("%d", INT_MAX);}$
      expected output : "2147483647"$
      your output     : "2147483647width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647width: 0\x0a"$
$
Test 588 (moul_d_7) : FAILED.$
    First line of code: {return test("%d", INT_MIN);}$
      expected output : "-2147483648"$
      your output     : "-2147483648width: 0$
"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648width: 0\x0a"$
$
Test 589 (moul_d_8) : FAILED.$
    First line of code: {return test("%d", INT_MIN - 1);}$
      expected output : "2147483647"$
      your output     : "2147483647width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647width: 0\x0a"$
$
Test 590 (moul_d_9) : FAILED.$
    First line of code: {return test("%d", INT_MAX + 1);}$
      expected output : "-2147483648"$
      your output     : "-2147483648width: 0$
"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648width: 0\x0a"$
$
Test 591 (moul_d_10) : FAILED.$
    First line of code: {return test("%%d 0000042 == |%d|$
", 0000042);}$
      expected output : "%d 0000042 == |34|$
"$
      your output     : "d 0000042 == |34|$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "d 0000042 == |34|\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 592 (moul_d_11) : FAILED.$
    First line of code: {return test("%%d 	 == |%d|$
", '	');}$
      expected output : "%d 	 == |9|$
"$
      your output     : "d 	 == |9|$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%d \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "d \x09 == |9|\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 593 (moul_d_12) : FAILED.$
    First line of code: {return test("%%d Lydie == |%d|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%d Lydie == |503|$
"$
      your output     : "d Lydie == |503|$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%d Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "d Lydie == |503|\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 594 (moul_mix_1) : FAILED.$
    First line of code: {int r00 = 0; return test("Lalalala, %d%% des gens qui parlent Ã  Ly adorent %s. Ou Presque. %p", 100, "Ly", &r00);}$
      expected output : "Lalalala, 100% des gens qui parlent Ã  Ly adorent Ly. Ou Presque. 0x7ffee35bf4fc"$
      your output     : "Lalalala, 100 des gens qui parlent Ã  Ly adorent Ly. Ou Presque. width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Lalalala, 100% des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. 0x7ffee35bf4fc"$
      actual   (nonprintable as hex) : "Lalalala, 100 des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 595 (moul_i_1) : FAILED.$
    First line of code: {return test("%i", 42);}$
      expected output : "42"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 596 (moul_i_2) : FAILED.$
    First line of code: {return test("Kashim a %i histoires Ã  raconter", 1001);}$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a  histoires Ã  raconterwidth: 0$
"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a  histoires \xc3\xa0 raconterwidth: 0\x0a"$
$
Test 597 (moul_i_3) : FAILED.$
    First line of code: {return test("Il fait au moins %i$
", -8000);}$
      expected output : "Il fait au moins -8000$
"$
      your output     : "Il fait au moins $
width: 0$
"$
      expected (nonprintable as hex) : "Il fait au moins -8000\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins \x0awidth: 0\x0a"$
$
Test 598 (moul_i_4) : FAILED.$
    First line of code: {return test("%i", -0);}$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 599 (moul_i_5) : FAILED.$
    First line of code: {return test("%i", 0);}$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 600 (moul_i_6) : FAILED.$
    First line of code: {return test("%i", INT_MAX);}$
      expected output : "2147483647"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 601 (moul_i_7) : FAILED.$
    First line of code: {return test("%i", INT_MIN);}$
      expected output : "-2147483648"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 602 (moul_i_8) : FAILED.$
    First line of code: {return test("%i", INT_MIN - 1);}$
      expected output : "2147483647"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 603 (moul_i_9) : FAILED.$
    First line of code: {return test("%i", INT_MAX + 1);}$
      expected output : "-2147483648"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 604 (moul_i_10) : FAILED.$
    First line of code: {return test("%%i 0000042 == |%i|$
", 0000042);}$
      expected output : "%i 0000042 == |34|$
"$
      your output     : "i 0000042 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%i 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "i 0000042 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 605 (moul_i_11) : FAILED.$
    First line of code: {return test("%%i 	 == |%i|$
", '	');}$
      expected output : "%i 	 == |9|$
"$
      your output     : "i 	 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%i \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "i \x09 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 606 (moul_i_12) : FAILED.$
    First line of code: {return test("%%i Lydie == |%i|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%i Lydie == |503|$
"$
      your output     : "i Lydie == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%i Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "i Lydie == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 607 (moul_u_1) : FAILED.$
    First line of code: {return test("%u", 42);}$
      expected output : "42"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 608 (moul_u_2) : FAILED.$
    First line of code: {return test("Kashim a %u histoires Ã  raconter", 1001);}$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a  histoires Ã  raconterwidth: 0$
"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a  histoires \xc3\xa0 raconterwidth: 0\x0a"$
$
Test 609 (moul_u_3) : FAILED.$
    First line of code: {return test("Il fait au moins %u$
", -8000);}$
      expected output : "Il fait au moins 4294959296$
"$
      your output     : "Il fait au moins $
width: 0$
"$
      expected (nonprintable as hex) : "Il fait au moins 4294959296\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins \x0awidth: 0\x0a"$
$
Test 610 (moul_u_4) : FAILED.$
    First line of code: {return test("%u", -0);}$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 611 (moul_u_5) : FAILED.$
    First line of code: {return test("%u", 0);}$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 612 (moul_u_6) : FAILED.$
    First line of code: {return test("%u", INT_MAX);}$
      expected output : "2147483647"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 613 (moul_u_7) : FAILED.$
    First line of code: {return test("%u", INT_MIN);}$
      expected output : "2147483648"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483648"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 614 (moul_u_8) : FAILED.$
    First line of code: {return test("%u", INT_MIN - 1);}$
      expected output : "2147483647"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 615 (moul_u_9) : FAILED.$
    First line of code: {return test("%u", INT_MAX + 1);}$
      expected output : "2147483648"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483648"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 616 (moul_u_10) : FAILED.$
    First line of code: {return test("%%u 0000042 == |%u|$
", 0000042);}$
      expected output : "%u 0000042 == |34|$
"$
      your output     : "u 0000042 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%u 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "u 0000042 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 617 (moul_u_11) : FAILED.$
    First line of code: {return test("%%u 	 == |%u|$
", '	');}$
      expected output : "%u 	 == |9|$
"$
      your output     : "u 	 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%u \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "u \x09 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 618 (moul_u_12) : FAILED.$
    First line of code: {return test("%%u Lydie == |%u|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%u Lydie == |503|$
"$
      your output     : "u Lydie == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%u Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "u Lydie == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 619 (moul_x_1) : FAILED.$
    First line of code: {return test("%x", 42);}$
      expected output : "2a"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2a"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 620 (moul_x_2) : FAILED.$
    First line of code: {return test("Kashim a %x histoires Ã  raconter", 1001);}$
      expected output : "Kashim a 3e9 histoires Ã  raconter"$
      your output     : "Kashim a  histoires Ã  raconterwidth: 0$
"$
      expected (nonprintable as hex) : "Kashim a 3e9 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a  histoires \xc3\xa0 raconterwidth: 0\x0a"$
$
Test 621 (moul_x_3) : FAILED.$
    First line of code: {return test("Il fait au moins %x$
", -8000);}$
      expected output : "Il fait au moins ffffe0c0$
"$
      your output     : "Il fait au moins $
width: 0$
"$
      expected (nonprintable as hex) : "Il fait au moins ffffe0c0\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins \x0awidth: 0\x0a"$
$
Test 622 (moul_x_4) : FAILED.$
    First line of code: {return test("%x", -0);}$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 623 (moul_x_5) : FAILED.$
    First line of code: {return test("%x", 0);}$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 624 (moul_x_6) : FAILED.$
    First line of code: {return test("%x", INT_MAX);}$
      expected output : "7fffffff"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "7fffffff"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 625 (moul_x_7) : FAILED.$
    First line of code: {return test("%x", INT_MIN);}$
      expected output : "80000000"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "80000000"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 626 (moul_x_8) : FAILED.$
    First line of code: {return test("%x", INT_MIN - 1);}$
      expected output : "7fffffff"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "7fffffff"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 627 (moul_x_9) : FAILED.$
    First line of code: {return test("%x", INT_MAX + 1);}$
      expected output : "80000000"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "80000000"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 628 (moul_x_10) : FAILED.$
    First line of code: {return test("%%x 0000042 == |%x|$
", 0000042);}$
      expected output : "%x 0000042 == |22|$
"$
      your output     : "x 0000042 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%x 0000042 == |22|\x0a"$
      actual   (nonprintable as hex) : "x 0000042 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 629 (moul_x_11) : FAILED.$
    First line of code: {return test("%%x 	 == |%x|$
", '	');}$
      expected output : "%x 	 == |9|$
"$
      your output     : "x 	 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%x \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "x \x09 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 630 (moul_x_12) : FAILED.$
    First line of code: {return test("%%x Lydie == |%x|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%x Lydie == |1f7|$
"$
      your output     : "x Lydie == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%x Lydie == |1f7|\x0a"$
      actual   (nonprintable as hex) : "x Lydie == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 631 (moul_prec_1) : FAILED.$
    First line of code: {return test("%%-5.3s LYDI == |%-5.3s|$
", "LYDI");}$
      expected output : "%-5.3s LYDI == |LYD  |$
"$
      your output     : "-5.3s LYDI == |LYD^@ |$
width: 0$
width: 5$
"$
      expected (nonprintable as hex) : "%-5.3s LYDI == |LYD  |\x0a"$
      actual   (nonprintable as hex) : "-5.3s LYDI == |LYD\x00 |\x0awidth: 0\x0awidth: 5\x0a"$
$
Test 632 (moul_prec_3) : FAILED.$
    First line of code: {return test("%%04.5i 42 == |%04.5i|$
", 42);}$
      expected output : "%04.5i 42 == |00042|$
"$
      your output     : "04.5i 42 == ||$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%04.5i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "04.5i 42 == ||\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 633 (moul_prec_4) : FAILED.$
    First line of code: {return test("%%04.3i 42 == |%04.3i|$
", 42);}$
      expected output : "%04.3i 42 == | 042|$
"$
      your output     : "04.3i 42 == ||$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%04.3i 42 == | 042|\x0a"$
      actual   (nonprintable as hex) : "04.3i 42 == ||\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 634 (moul_prec_5) : FAILED.$
    First line of code: {return test("%%04.2i 42 == |%04.2i|$
", 42);}$
      expected output : "%04.2i 42 == |  42|$
"$
      your output     : "04.2i 42 == ||$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%04.2i 42 == |  42|\x0a"$
      actual   (nonprintable as hex) : "04.2i 42 == ||\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 635 (moul_zeropad_1) : FAILED.$
    First line of code: {return test("%%04i 42 == |%04i|$
", 42);}$
      expected output : "%04i 42 == |0042|$
"$
      your output     : "04i 42 == ||$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%04i 42 == |0042|\x0a"$
      actual   (nonprintable as hex) : "04i 42 == ||\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 636 (moul_zeropad_2) : FAILED.$
    First line of code: {return test("%%05i 42 == |%05i|$
", 42);}$
      expected output : "%05i 42 == |00042|$
"$
      your output     : "05i 42 == ||$
width: 0$
width: 5$
"$
      expected (nonprintable as hex) : "%05i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "05i 42 == ||\x0awidth: 0\x0awidth: 5\x0a"$
$
Test 637 (moul_zeropad_3) : FAILED.$
    First line of code: {return test("%%0i 42 == |%0i|$
", 42);}$
      expected output : "%0i 42 == |42|$
"$
      your output     : "0i 42 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%0i 42 == |42|\x0a"$
      actual   (nonprintable as hex) : "0i 42 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 638 (moul_zeropad_4) : FAILED.$
    First line of code: {return test("%%0d 0000042 == |%0d|$
", 0000042);}$
      expected output : "%0d 0000042 == |34|$
"$
      your output     : "0d 0000042 == |34|$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%0d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "0d 0000042 == |34|\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 639 (moul_leftjusty_1) : FAILED.$
    First line of code: {return test("%%-i 42 == %-i$
", 42);}$
      expected output : "%-i 42 == 42$
"$
      your output     : "-i 42 == $
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%-i 42 == 42\x0a"$
      actual   (nonprintable as hex) : "-i 42 == \x0awidth: 0\x0awidth: 0\x0a"$
$
Test 640 (moul_leftjusty_2) : FAILED.$
    First line of code: {return test("%%-d 42 == %-d$
", INT_MIN);}$
      expected output : "%-d 42 == -2147483648$
"$
      your output     : "-d 42 == -2147483648$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%-d 42 == -2147483648\x0a"$
      actual   (nonprintable as hex) : "-d 42 == -2147483648\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 641 (moul_leftjusty_3) : FAILED.$
    First line of code: {return test("%%-i -42 == %-i$
", -42);}$
      expected output : "%-i -42 == -42$
"$
      your output     : "-i -42 == $
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%-i -42 == -42\x0a"$
      actual   (nonprintable as hex) : "-i -42 == \x0awidth: 0\x0awidth: 0\x0a"$
$
Test 642 (moul_leftjusty_4) : FAILED.$
    First line of code: {return test("%%-4d 42 == |%-4d|$
", 42);}$
      expected output : "%-4d 42 == |42  |$
"$
      your output     : "-4d 42 == |42  |$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%-4d 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "-4d 42 == |42  |\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 643 (moul_leftjusty_5) : FAILED.$
    First line of code: {return test("%%-5d -42 == |%-5d|$
", -42);}$
      expected output : "%-5d -42 == |-42  |$
"$
      your output     : "-5d -42 == |-42  |$
width: 0$
width: 5$
"$
      expected (nonprintable as hex) : "%-5d -42 == |-42  |\x0a"$
      actual   (nonprintable as hex) : "-5d -42 == |-42  |\x0awidth: 0\x0awidth: 5\x0a"$
$
Test 644 (moul_leftjusty_6) : FAILED.$
    First line of code: {return test("|%3i|%-3i|$
", 42, 42);}$
      expected output : "| 42|42 |$
"$
      your output     : "|||$
width: 3$
width: 3$
"$
      expected (nonprintable as hex) : "| 42|42 |\x0a"$
      actual   (nonprintable as hex) : "|||\x0awidth: 3\x0awidth: 3\x0a"$
$
Test 645 (moul_leftjusty_7) : FAILED.$
    First line of code: {return test("%%-4i 42 == |%-4i|$
", 42);}$
      expected output : "%-4i 42 == |42  |$
"$
      your output     : "-4i 42 == ||$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%-4i 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "-4i 42 == ||\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 646 (moul_star_1) : FAILED.$
    First line of code: {return test("%%-*.3s LYDI == |%-*.3s|$
", 5, "LYDI");}$
      expected output : "%-*.3s LYDI == |LYD  |$
"$
      your output     : "-*.3s LYDI == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%-*.3s LYDI == |LYD  |\x0a"$
      actual   (nonprintable as hex) : "-*.3s LYDI == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 647 (moul_star_2) : FAILED.$
    First line of code: {return test("%% *.5i 42 == |% *.5i|$
", 4, 42);}$
      expected output : "% *.5i 42 == | 00042|$
"$
      your output     : " *.5i 42 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "% *.5i 42 == | 00042|\x0a"$
      actual   (nonprintable as hex) : " *.5i 42 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 648 (moul_star_3) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 5, 42);}$
      expected output : "%*i 42 == |   42|$
"$
      your output     : "*i 42 == ||$
width: 0$
width: 5$
"$
      expected (nonprintable as hex) : "%*i 42 == |   42|\x0a"$
      actual   (nonprintable as hex) : "*i 42 == ||\x0awidth: 0\x0awidth: 5\x0a"$
$
Test 649 (moul_star_4) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 3, 42);}$
      expected output : "%*i 42 == | 42|$
"$
      your output     : "*i 42 == ||$
width: 0$
width: 3$
"$
      expected (nonprintable as hex) : "%*i 42 == | 42|\x0a"$
      actual   (nonprintable as hex) : "*i 42 == ||\x0awidth: 0\x0awidth: 3\x0a"$
$
Test 650 (moul_star_5) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 2, 42);}$
      expected output : "%*i 42 == |42|$
"$
      your output     : "*i 42 == ||$
width: 0$
width: 2$
"$
      expected (nonprintable as hex) : "%*i 42 == |42|\x0a"$
      actual   (nonprintable as hex) : "*i 42 == ||\x0awidth: 0\x0awidth: 2\x0a"$
$
Test 651 (mix_test_0) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 652 (mix_test_1) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    G    EB    Hello, World!    235    0x10c714310  "$
      your output     : "      ë    Gs    p  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  eb    G    EB    Hello, World!    235    0x10c714310  "$
      actual   (nonprintable as hex) : "      \xeb    Gs    p  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 653 (mix_test_2) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    EB    0x10c714310    G    Hello, World!  "$
      your output     : "          p    *s  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  %    42    EB    0x10c714310    G    Hello, World!  "$
      actual   (nonprintable as hex) : "          p    *s  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 654 (mix_test_3) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 655 (mix_test_4) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 656 (mix_test_5) : FAILED.$
    First line of code: {return test($
      expected output : "  G    EB    42    %    Hello, World!    0x10c714310  "$
      your output     : "  G    ëi    s    p        *    i    Hello, World!        X            c            i    u    *X    M-^P    s    £c      width: 0$
width: 0$
width: 0$
width"$
      expected (nonprintable as hex) : "  G    EB    42    %    Hello, World!    0x10c714310  "$
      actual   (nonprintable as hex) : "  G    \xebi    s    p        *    i    Hello, World!        X            c            i    u    *X    \x90    s    \xa3c      width: 0\x0awidth: 0\x0awidth: 0\x0awidth"$
$
Test 657 (mix_test_6) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 658 (mix_test_7) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 659 (mix_test_8) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 660 (mix_test_9) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 661 (mix_test_10) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 662 (mix_test_11) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    G    0x10c714310    eb    42    235  "$
      your output     : "  c    x    u  width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  EB    G    0x10c714310    eb    42    235  "$
      actual   (nonprintable as hex) : "  c    x    u  width: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 663 (mix_test_12) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 664 (mix_test_13) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 665 (mix_test_14) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    0x10c714310    EB    G    42    eb  "$
      your output     : "  Hello, World!        c    x  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  Hello, World!    0x10c714310    EB    G    42    eb  "$
      actual   (nonprintable as hex) : "  Hello, World!        c    x  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 666 (mix_test_15) : FAILED.$
    First line of code: {return test($
      expected output : "  235    G    EB    eb    0x10c714310    Hello, World!  "$
      your output     : "      ë    Gx    s  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  235    G    EB    eb    0x10c714310    Hello, World!  "$
      actual   (nonprintable as hex) : "      \xeb    Gx    s  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 667 (mix_test_16) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 668 (mix_test_17) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 669 (mix_test_18) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 670 (mix_test_19) : FAILED.$
    First line of code: {return test($
      expected output : "  %    0x10c714310    42    G    eb    EB  "$
      your output     : "              ^P          *s    u    x  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  %    0x10c714310    42    G    eb    EB  "$
      actual   (nonprintable as hex) : "              \x10          *s    u    x  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 671 (mix_test_20) : FAILED.$
    First line of code: {return test($
      expected output : "  G    Hello, World!    %    235    0x10c714310    eb  "$
      your output     : "  G    Hello, World!                  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  G    Hello, World!    %    235    0x10c714310    eb  "$
      actual   (nonprintable as hex) : "  G    Hello, World!                  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 672 (mix_test_21) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 673 (mix_test_22) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 674 (mix_test_23) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 675 (mix_test_24) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 676 (mix_test_25) : FAILED.$
    First line of code: {return test($
      expected output : "  42    0x10c714310    eb    G    EB    0x10c714310  "$
      your output     : "              *    ^Pp  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  42    0x10c714310    eb    G    EB    0x10c714310  "$
      actual   (nonprintable as hex) : "              *    \x10p  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 677 (mix_test_26) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    G    42    235    eb    0x10c714310  "$
      your output     : "  c    u    p  width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  EB    G    42    235    eb    0x10c714310  "$
      actual   (nonprintable as hex) : "  c    u    p  width: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 678 (mix_test_27) : FAILED.$
    First line of code: {return test($
      expected output : "  42    235    G    %    EB    0x10c714310  "$
      your output     : "          *        p  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  42    235    G    %    EB    0x10c714310  "$
      actual   (nonprintable as hex) : "          *        p  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 679 (mix_test_28) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    42    G    0x10c714310    eb    235  "$
      your output     : "  Hello, World!        *              width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  Hello, World!    42    G    0x10c714310    eb    235  "$
      actual   (nonprintable as hex) : "  Hello, World!        *              width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 680 (mix_test_29) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10c714310    %    eb    EB    42    G  "$
      your output     : "              i    ^PX            p    c  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  0x10c714310    %    eb    EB    42    G  "$
      actual   (nonprintable as hex) : "              i    \x10X            p    c  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 681 (mix_test_30) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 682 (mix_test_31) : FAILED.$
    First line of code: {return test($
      expected output : "  %    235    0x10c714310    42    EB    G  "$
      your output     : "                  c  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  %    235    0x10c714310    42    EB    G  "$
      actual   (nonprintable as hex) : "                  c  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 683 (mix_test_32) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 684 (mix_test_33) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 685 (mix_test_34) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 686 (mix_test_35) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 687 (mix_test_36) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    Hello, World!    eb    0x10c714310    %    42  "$
      your output     : "  s    p    i  width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  EB    Hello, World!    eb    0x10c714310    %    42  "$
      actual   (nonprintable as hex) : "  s    p    i  width: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 688 (mix_test_37) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 689 (mix_test_38) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    235    eb    %    42    G  "$
      your output     : "  Hello, World!                    ë  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  Hello, World!    235    eb    %    42    G  "$
      actual   (nonprintable as hex) : "  Hello, World!                    \xeb  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 690 (mix_test_39) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10c714310    42    eb    %    235    EB  "$
      your output     : "                        c    p    x  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  0x10c714310    42    eb    %    235    EB  "$
      actual   (nonprintable as hex) : "                        c    p    x  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 691 (mix_test_40) : FAILED.$
    First line of code: {return test($
      expected output : "  %    G    EB    0x10c714310    235    eb  "$
      your output     : "      G    ëp    x  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  %    G    EB    0x10c714310    235    eb  "$
      actual   (nonprintable as hex) : "      G    \xebp    x  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 692 (mix_test_41) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 693 (mix_test_42) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 694 (mix_test_43) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 695 (mix_test_44) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    G    EB    %    42    0x10c714310  "$
      your output     : "  Hello, World!    G    ë*    x            *x            X            c            s            M-^P£X    x  width: 0$
width: 0$
width: 0$
width: 0$
width: 0"$
      expected (nonprintable as hex) : "  Hello, World!    G    EB    %    42    0x10c714310  "$
      actual   (nonprintable as hex) : "  Hello, World!    G    \xeb*    x            *x            X            c            s            \x90\xa3X    x  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0"$
$
Test 696 (mix_test_45) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    EB    235    42    %    Hello, World!  "$
      your output     : "      u      width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  eb    EB    235    42    %    Hello, World!  "$
      actual   (nonprintable as hex) : "      u      width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 697 (mix_test_46) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 698 (mix_test_47) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 699 (mix_test_48) : FAILED.$
    First line of code: {return test($
      expected output : "  G    42    %    EB    0x10c714310    235  "$
      your output     : "  G            p    s            *ëX    x  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  G    42    %    EB    0x10c714310    235  "$
      actual   (nonprintable as hex) : "  G            p    s            *\xebX    x  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 700 (mix_test_49) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    235    42    EB    %    G  "$
      your output     : "  Hello, World!              width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  Hello, World!    235    42    EB    %    G  "$
      actual   (nonprintable as hex) : "  Hello, World!              width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 701 (mix_test_50) : FAILED.$
    First line of code: {return test($
      expected output : "  %    0x10c714310    EB    42    Hello, World!    eb  "$
      your output     : "          i    *x  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  %    0x10c714310    EB    42    Hello, World!    eb  "$
      actual   (nonprintable as hex) : "          i    *x  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 702 (mix_test_51) : FAILED.$
    First line of code: {return test($
      expected output : "  42    eb    0x10c714310    G    235    EB  "$
      your output     : "              *          c    i    s  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  42    eb    0x10c714310    G    235    EB  "$
      actual   (nonprintable as hex) : "              *          c    i    s  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 703 (mix_test_52) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    G    %    42    eb    Hello, World!  "$
      your output     : "  c    i    s  width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  EB    G    %    42    eb    Hello, World!  "$
      actual   (nonprintable as hex) : "  c    i    s  width: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 704 (mix_test_53) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 705 (mix_test_54) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 706 (mix_test_55) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 707 (mix_test_56) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    EB    0x10c714310    235    Hello, World!  "$
      your output     : "          p    s  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  %    42    EB    0x10c714310    235    Hello, World!  "$
      actual   (nonprintable as hex) : "          p    s  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 708 (mix_test_57) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 709 (mix_test_58) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 710 (mix_test_59) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 711 (mix_test_60) : FAILED.$
    First line of code: {return test($
      expected output : "  235    %    eb    42    EB    G  "$
      your output     : "                  c  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  235    %    eb    42    EB    G  "$
      actual   (nonprintable as hex) : "                  c  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 712 (mix_test_61) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 713 (mix_test_62) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 714 (mix_test_63) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    eb    %    EB    42    G  "$
      your output     : "  Hello, World!            i    ëx    ë    *    c            i    G    p  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
widt"$
      expected (nonprintable as hex) : "  Hello, World!    eb    %    EB    42    G  "$
      actual   (nonprintable as hex) : "  Hello, World!            i    \xebx    \xeb    *    c            i    G    p  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidt"$
$
Test 715 (mix_test_64) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    EB    235    G    %    42  "$
      your output     : "      u    ëë  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  eb    EB    235    G    %    42  "$
      actual   (nonprintable as hex) : "      u    \xeb\xeb  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 716 (mix_test_65) : FAILED.$
    First line of code: {return test($
      expected output : "  G    %    42    0x10c714310    235    EB  "$
      your output     : "  G                      c    u    p  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  G    %    42    0x10c714310    235    EB  "$
      actual   (nonprintable as hex) : "  G                      c    u    p  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 717 (mix_test_66) : FAILED.$
    First line of code: {return test($
      expected output : "  42    G    %    235    EB    0x10c714310  "$
      your output     : "      *            p  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  42    G    %    235    EB    0x10c714310  "$
      actual   (nonprintable as hex) : "      *            p  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 718 (mix_test_67) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    42    eb    235    G    0x10c714310  "$
      your output     : "  Hello, World!                *      width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  Hello, World!    42    eb    235    G    0x10c714310  "$
      actual   (nonprintable as hex) : "  Hello, World!                *      width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 719 (mix_test_68) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    eb    G    0x10c714310    235    EB  "$
      your output     : "  Hello, World!        ë              s    i    c  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  Hello, World!    eb    G    0x10c714310    235    EB  "$
      actual   (nonprintable as hex) : "  Hello, World!        \xeb              s    i    c  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 720 (mix_test_69) : FAILED.$
    First line of code: {return test($
      expected output : "  %    Hello, World!    0x10c714310    42    EB    G  "$
      your output     : "      Hello, World!            c  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  %    Hello, World!    0x10c714310    42    EB    G  "$
      actual   (nonprintable as hex) : "      Hello, World!            c  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 721 (mix_test_70) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 722 (mix_test_71) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    42    EB    G    %    0x10c714310  "$
      your output     : "  Hello, World!        c    p  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  Hello, World!    42    EB    G    %    0x10c714310  "$
      actual   (nonprintable as hex) : "  Hello, World!        c    p  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 723 (mix_test_72) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 724 (mix_test_73) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 725 (mix_test_74) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 726 (mix_test_75) : FAILED.$
    First line of code: {return test($
      expected output : "  42    G    %    0x10c714310    235    eb  "$
      your output     : "      *                  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  42    G    %    0x10c714310    235    eb  "$
      actual   (nonprintable as hex) : "      *                  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 727 (mix_test_76) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 728 (mix_test_77) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    42    G    235    0x10c714310    Hello, World!  "$
      your output     : "  i    ëu    s  width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  EB    42    G    235    0x10c714310    Hello, World!  "$
      actual   (nonprintable as hex) : "  i    \xebu    s  width: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 729 (mix_test_78) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 730 (mix_test_79) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    G    42    %    0x10c714310    EB  "$
      your output     : "  Hello, World!    G                      s    x    *    *i  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0"$
      expected (nonprintable as hex) : "  Hello, World!    G    42    %    0x10c714310    EB  "$
      actual   (nonprintable as hex) : "  Hello, World!    G                      s    x    *    *i  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0"$
$
Test 731 (mix_test_80) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 732 (mix_test_81) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 733 (mix_test_82) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 734 (mix_test_83) : FAILED.$
    First line of code: {return test($
      expected output : "  42    EB    %    G    235    Hello, World!  "$
      your output     : "          s  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  42    EB    %    G    235    Hello, World!  "$
      actual   (nonprintable as hex) : "          s  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 735 (mix_test_84) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 736 (mix_test_85) : FAILED.$
    First line of code: {return test($
      expected output : "  235    0x10c714310    G    EB    Hello, World!    0x10c714310  "$
      your output     : "          ë    ^Ps    p    G    ë    i    p    0i    ^P    ^@s    M-^P    u    M-^IEÔHM-^K}ø¾¤^A    u        c        x    ^@    X        p    ^?p    ^@  width: 0$
wid"$
      expected (nonprintable as hex) : "  235    0x10c714310    G    EB    Hello, World!    0x10c714310  "$
      actual   (nonprintable as hex) : "          \xeb    \x10s    p    G    \xeb    i    p    0i    \x10    \x00s    \x90    u    \x89E\xd4H\x8b}\xf8\xbe\xa4\x01    u        c        x    \x00    X        p    \x7fp    \x00  width: 0\x0awid"$
$
Test 737 (mix_test_86) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10c714310    G    235    EB    Hello, World!    0x10c714310  "$
      your output     : "      ^P        s    i    p    Gi    ë    ës    0    u    *    u        c        x    ^@    X        p    M-^Pp    £  width: 0$
width: 0$
width: 0$
width: 0$
w"$
      expected (nonprintable as hex) : "  0x10c714310    G    235    EB    Hello, World!    0x10c714310  "$
      actual   (nonprintable as hex) : "      \x10        s    i    p    Gi    \xeb    \xebs    0    u    *    u        c        x    \x00    X        p    \x90p    \xa3  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0aw"$
$
Test 738 (mix_test_87) : FAILED.$
    First line of code: {return test($
      expected output : "  42    235    EB    0x10c714310    G    0x10c714310  "$
      your output     : "          p    *p  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  42    235    EB    0x10c714310    G    0x10c714310  "$
      actual   (nonprintable as hex) : "          p    *p  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 739 (mix_test_88) : FAILED.$
    First line of code: {return test($
      expected output : "  42    G    0x10c714310    %    EB    235  "$
      your output     : "      *            u  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  42    G    0x10c714310    %    EB    235  "$
      actual   (nonprintable as hex) : "      *            u  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 740 (mix_test_89) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    G    42    eb    0x10c714310    235  "$
      your output     : "  Hello, World!    G                  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  Hello, World!    G    42    eb    0x10c714310    235  "$
      actual   (nonprintable as hex) : "  Hello, World!    G                  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 741 (mix_test_90) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 742 (mix_test_91) : FAILED.$
    First line of code: {return test($
      expected output : "  235    0x10c714310    EB    G    %    eb  "$
      your output     : "          c    x  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  235    0x10c714310    EB    G    %    eb  "$
      actual   (nonprintable as hex) : "          c    x  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 743 (mix_test_92) : FAILED.$
    First line of code: {return test($
      expected output : "  G    0x10c714310    EB    eb    %    Hello, World!  "$
      your output     : "  G        x    s  width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  G    0x10c714310    EB    eb    %    Hello, World!  "$
      actual   (nonprintable as hex) : "  G        x    s  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 744 (mix_test_93) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 745 (mix_test_94) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    0x10c714310    G    %    235    42  "$
      your output     : "  p    ë^P    x    s  width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  EB    0x10c714310    G    %    235    42  "$
      actual   (nonprintable as hex) : "  p    \xeb\x10    x    s  width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 746 (mix_test_95) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 747 (mix_test_96) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    0x10c714310    G    Hello, World!    42    235  "$
      your output     : "  p    ës    u  width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  EB    0x10c714310    G    Hello, World!    42    235  "$
      actual   (nonprintable as hex) : "  p    \xebs    u  width: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 748 (mix_test_97) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 749 (mix_test_98) : FAILED.$
    First line of code: {return test($
    SEGFAULT$
$
Test 750 (mix_test_99) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    0x10c714310    G    235    eb    42  "$
      your output     : "  p    ëu    i  width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "  EB    0x10c714310    G    235    eb    42  "$
      actual   (nonprintable as hex) : "  p    \xebu    i  width: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 751 (mix_successive_0) : FAILED.$
    First line of code: {return ( test("%c", mx_c) + test("%u", mx_u));}$
      expected output : "G235"$
      your output     : "Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "G235"$
      actual   (nonprintable as hex) : "Gwidth: 0\x0awidth: 0\x0a"$
$
Test 752 (mix_successive_4) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%i", mx_i));}$
      expected output : "eb42"$
      your output     : "width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "eb42"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0a"$
$
Test 753 (mix_successive_6) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!Gwidth: 0\x0awidth: 0\x0a"$
$
Test 754 (mix_successive_10) : FAILED.$
    First line of code: {return ( test("%u", mx_u) + test("%s", mx_s));}$
      expected output : "235Hello, World!"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "235Hello, World!"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 755 (mix_successive_16) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%x", mx_u));}$
      expected output : "Hello, World!eb"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Hello, World!eb"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 756 (mix_successive_20) : FAILED.$
    First line of code: {return ( test("%p", &mx_i) + test("%s", mx_s));}$
      expected output : "0x10c714310Hello, World!"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "0x10c714310Hello, World!"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 757 (mix_successive_21) : FAILED.$
    First line of code: {return ( test("%X", mx_u) + test("%x", mx_u));}$
    SEGFAULT$
$
Test 758 (mix_successive_28) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%u", mx_u));}$
      expected output : "42235"$
      your output     : "width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "42235"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0a"$
$
Test 759 (mix_successive_30) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%u", mx_u));}$
      expected output : "Hello, World!235"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Hello, World!235"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 760 (mix_successive_31) : FAILED.$
    First line of code: {return ( test("%X", mx_u) + test("%c", mx_c));}$
    SEGFAULT$
$
Test 761 (mix_successive_32) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%u", mx_u));}$
      expected output : "eb235"$
      your output     : "width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "eb235"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0a"$
$
Test 762 (mix_successive_39) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%c", mx_c));}$
      expected output : "42G"$
      your output     : "Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "42G"$
      actual   (nonprintable as hex) : "Gwidth: 0\x0awidth: 0\x0a"$
$
Test 763 (mix_successive_40) : FAILED.$
    First line of code: {return ( test("%c", mx_c) + test("%x", mx_u));}$
      expected output : "Geb"$
      your output     : "Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Geb"$
      actual   (nonprintable as hex) : "Gwidth: 0\x0awidth: 0\x0a"$
$
Test 764 (mix_successive_42) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%s", mx_s));}$
      expected output : "ebHello, World!"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "ebHello, World!"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 765 (mix_successive_43) : FAILED.$
    First line of code: {return ( test("%u", mx_u) + test("%x", mx_u));}$
      expected output : "235eb"$
      your output     : "width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "235eb"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0a"$
$
Test 766 (mix_successive_45) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!Gwidth: 0\x0awidth: 0\x0a"$
$
Test 767 (mix_successive_46) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%s", mx_s));}$
      expected output : "42Hello, World!"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "42Hello, World!"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 768 (mix_successive_61) : FAILED.$
    First line of code: {return ( test("%p", &mx_i) + test("%c", mx_c));}$
      expected output : "0x10c714310G"$
      your output     : "Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "0x10c714310G"$
      actual   (nonprintable as hex) : "Gwidth: 0\x0awidth: 0\x0a"$
$
Test 769 (mix_successive_64) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!Gwidth: 0\x0awidth: 0\x0a"$
$
Test 4186 (d_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*d", -3, 12345);}$
      expected output : "12345"$
      your output     : "12345width: 0$
"$
      expected (nonprintable as hex) : "12345"$
      actual   (nonprintable as hex) : "12345width: 0\x0a"$
$
Test 4187 (d_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*d", -1, 12345);}$
      expected output : "12345"$
      your output     : "12345width: 0$
"$
      expected (nonprintable as hex) : "12345"$
      actual   (nonprintable as hex) : "12345width: 0\x0a"$
$
Test 4188 (d_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*d", -1, 0);}$
      expected output : "0"$
      your output     : "0width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0width: 0\x0a"$
$
Test 4189 (u_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*u", -3, 12345);}$
      expected output : "12345"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "12345"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 4190 (u_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*u", -1, 12345);}$
      expected output : "12345"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "12345"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 4191 (u_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*u", -1, 0);}$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 4192 (notintsubject_o_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*o", -3, 12345);}$
      expected output : "30071"$
      your output     : "pfttwidth: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "30071"$
      actual   (nonprintable as hex) : "pfttwidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 4193 (notintsubject_o_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*o", -1, 12345);}$
      expected output : "30071"$
      your output     : "pfttwidth: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "30071"$
      actual   (nonprintable as hex) : "pfttwidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 4194 (notintsubject_o_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*o", -1, 0);}$
      expected output : "0"$
      your output     : "pfttwidth: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "pfttwidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 4195 (x_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*x", -3, 12345);}$
      expected output : "3039"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "3039"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 4196 (x_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*x", -1, 12345);}$
      expected output : "3039"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "3039"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 4197 (x_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*x", -1, 0);}$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 4198 (X_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*X", -3, 12345);}$
      expected output : "3039"$
      your output     : "pfttwidth: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "3039"$
      actual   (nonprintable as hex) : "pfttwidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 4199 (X_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*X", -1, 12345);}$
      expected output : "3039"$
      your output     : "pfttwidth: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "3039"$
      actual   (nonprintable as hex) : "pfttwidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 4200 (X_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*X", -1, 0);}$
      expected output : "0"$
      your output     : "pfttwidth: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "pfttwidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 4201 (s_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*s", -3, 0);}$
    SEGFAULT$
$
Test 4202 (s_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*s", -1, 0);}$
    SEGFAULT$
$
Test 4203 (p_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*p", -3, s_hello);}$
      expected output : "0x10c6e743e"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0x10c6e743e"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 4204 (p_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*p", -1, s_hello);}$
      expected output : "0x10c6e743e"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0x10c6e743e"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 4205 (p_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*p", -3, 0);}$
      expected output : "0x0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0x0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 4206 (p_neg_prec_star_04) : FAILED.$
    First line of code: {return test("%.*p", -1, 0);}$
      expected output : "0x0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0x0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
#########PFT_2019##########
WARNING: The return values reported here may be bugged on some systems.$
          See https://github.com/gavinfielder/pft/issues/11$
          Run in non-fork mode (-X) to ensure accurate return value$
          reporting, set IGNORE_RETURN_VALUE=1 in options-config.ini,$
          or run test_pipes.sh to see if your system has this bug.$
          This bug does not affect the pass/fail result of a test, nor$
          the function output--only the reported return value.$
$
$
Test   6 (pct_basic) : FAILED.$
    First line of code: {return test("%%");}$
      expected return value : 1$
      your return value     : 0$
      expected output : "%"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "%"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test   7 (pct_5w) : FAILED.$
    First line of code: {return test("%5%");}$
      expected return value : 5$
      your return value     : 0$
      expected output : "    %"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "    %"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test   8 (pct_5wlj) : FAILED.$
    First line of code: {return test("%-5%");}$
      expected return value : 5$
      your return value     : 0$
      expected output : "%    "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test   9 (pct_5wzp) : FAILED.$
    First line of code: {return test("%05%");}$
      expected return value : 5$
      your return value     : 0$
      expected output : "0000%"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "0000%"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test  10 (pct_5wljzp) : FAILED.$
    First line of code: {return test("%-05%");}$
      expected return value : 5$
      your return value     : 0$
      expected output : "%    "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test  15 (nocrash_nullspec_5wlj) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%-5");}$
    SEGFAULT$
$
Test  16 (s_basic_string_expansion) : FAILED.$
    First line of code: {return test("hello, %s.", "gavin");}$
      expected return value : 14$
      your return value     : 14$
      expected output : "hello, gavin."$
      your output     : "hello, gavin.width: 0$
"$
      expected (nonprintable as hex) : "hello, gavin."$
      actual   (nonprintable as hex) : "hello, gavin.width: 0\x0a"$
$
Test  17 (s_only_string_expansion) : FAILED.$
    First line of code: {return test("%s", "testing testing");}$
      expected return value : 16$
      your return value     : 16$
      expected output : "testing testing"$
      your output     : "testing testingwidth: 0$
"$
      expected (nonprintable as hex) : "testing testing"$
      actual   (nonprintable as hex) : "testing testingwidth: 0\x0a"$
$
Test  18 (s_two_string_expansions) : FAILED.$
    First line of code: {return test("%s%s", "hello", "world");}$
      expected return value : 11$
      your return value     : 11$
      expected output : "helloworld"$
      your output     : "helloworldwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "helloworldwidth: 0\x0awidth: 0\x0a"$
$
Test  19 (s_two_string_expansions2) : FAILED.$
    First line of code: {return test("..%s stuff %s", "a", "b");}$
      expected return value : 12$
      your return value     : 12$
      expected output : "..a stuff b"$
      your output     : "..a stuff bwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "..a stuff b"$
      actual   (nonprintable as hex) : "..a stuff bwidth: 0\x0awidth: 0\x0a"$
$
Test  20 (s_empty_string_expansion) : FAILED.$
    First line of code: {return test("this %s is empty", "");}$
      expected return value : 15$
      your return value     : 15$
      expected output : "this  is empty"$
      your output     : "this  is emptywidth: 0$
"$
      expected (nonprintable as hex) : "this  is empty"$
      actual   (nonprintable as hex) : "this  is emptywidth: 0\x0a"$
$
Test  21 (s_full_then_empty_string) : FAILED.$
    First line of code: {return test("this %s is %s", "hello", "");}$
      expected return value : 15$
      your return value     : 15$
      expected output : "this hello is "$
      your output     : "this hello is width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "this hello is "$
      actual   (nonprintable as hex) : "this hello is width: 0\x0awidth: 0\x0a"$
$
Test  22 (s_empty_then_full_string) : FAILED.$
    First line of code: {return test("this %s is %s", "", "hello");}$
      expected return value : 15$
      your return value     : 15$
      expected output : "this  is hello"$
      your output     : "this  is hellowidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "this  is hello"$
      actual   (nonprintable as hex) : "this  is hellowidth: 0\x0awidth: 0\x0a"$
$
Test  23 (s_three_strings) : FAILED.$
    First line of code: {return test("%s%s%s", "1", "2", "3's a charm");}$
      expected return value : 14$
      your return value     : 14$
      expected output : "123's a charm"$
      your output     : "123's a charmwidth: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "123's a charm"$
      actual   (nonprintable as hex) : "123's a charmwidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test  24 (s_space_padded_field_width) : FAILED.$
    First line of code: {return test("%32s", "abc");}$
      expected return value : 35$
      your return value     : 35$
      expected output : "                             abc"$
      your output     : "                             abcwidth: 32$
"$
      expected (nonprintable as hex) : "                             abc"$
      actual   (nonprintable as hex) : "                             abcwidth: 32\x0a"$
$
Test  25 (s_space_padded_field_width2) : FAILED.$
    First line of code: {return test("%16s", "nark nark");}$
      expected return value : 17$
      your return value     : 17$
      expected output : "       nark nark"$
      your output     : "       nark narkwidth: 16$
"$
      expected (nonprintable as hex) : "       nark nark"$
      actual   (nonprintable as hex) : "       nark narkwidth: 16\x0a"$
$
Test  26 (s_space_padded_over_field_width) : FAILED.$
    First line of code: {return test("%5s", "goes over");}$
      expected return value : 9$
      your return value     : 9$
      expected output : "goes over"$
      your output     : "goes overwidth: 5$
"$
      expected (nonprintable as hex) : "goes over"$
      actual   (nonprintable as hex) : "goes overwidth: 5\x0a"$
$
Test  27 (s_space_padded_field_width_lj) : FAILED.$
    First line of code: {return test("%-32s", "abc");}$
      expected return value : 35$
      your return value     : 35$
      expected output : "abc                             "$
      your output     : "abc                             width: 32$
"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             width: 32\x0a"$
$
Test  28 (s_space_padded_field_width2_lj) : FAILED.$
    First line of code: {return test("%-16s", "nark nark");}$
      expected return value : 17$
      your return value     : 17$
      expected output : "nark nark       "$
      your output     : "nark nark       width: 16$
"$
      expected (nonprintable as hex) : "nark nark       "$
      actual   (nonprintable as hex) : "nark nark       width: 16\x0a"$
$
Test  29 (s_space_padded_over_field_width_lj) : FAILED.$
    First line of code: {return test("%-5s", "goes over");}$
      expected return value : 9$
      your return value     : 9$
      expected output : "goes over"$
      your output     : "goes overwidth: 5$
"$
      expected (nonprintable as hex) : "goes over"$
      actual   (nonprintable as hex) : "goes overwidth: 5\x0a"$
$
Test  30 (s_string_prec_notrunc) : FAILED.$
    First line of code: {return test("%.7s", "hello");}$
      expected return value : 5$
      your return value     : 5$
      expected output : "hello"$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test  31 (s_string_prec_trunc) : FAILED.$
    First line of code: {return test("%.3s", "hello");}$
      expected return value : 3$
      your return value     : 3$
      expected output : "hel"$
      your output     : "helwidth: 0$
"$
      expected (nonprintable as hex) : "hel"$
      actual   (nonprintable as hex) : "helwidth: 0\x0a"$
$
Test  32 (s_string_prec_default) : FAILED.$
    First line of code: {return test("%.s", "hello");}$
      expected return value : 0$
      your return value     : 5$
      expected output : ""$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test  33 (s_string_prec_zero) : FAILED.$
    First line of code: {return test("%.0s", "hello");}$
      expected return value : 0$
      your return value     : 5$
      expected output : ""$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test  34 (s_two_strings_prec_2trunc) : FAILED.$
    First line of code: {return test("%.3s%.2s", "holla", "bitch");}$
      expected return value : 5$
      your return value     : 5$
      expected output : "holbi"$
      your output     : "holbiwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "holbi"$
      actual   (nonprintable as hex) : "holbiwidth: 0\x0awidth: 0\x0a"$
$
Test  35 (s_two_strings_prec_1trunc_a) : FAILED.$
    First line of code: {return test("%.2s%.7s", "hello", "world");}$
      expected return value : 7$
      your return value     : 7$
      expected output : "heworld"$
      your output     : "heworldwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "heworld"$
      actual   (nonprintable as hex) : "heworldwidth: 0\x0awidth: 0\x0a"$
$
Test  36 (s_two_strings_prec_1trunc_b) : FAILED.$
    First line of code: {return test("%.7s%.2s", "hello", "world");}$
      expected return value : 7$
      your return value     : 7$
      expected output : "hellowo"$
      your output     : "hellowowidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "hellowo"$
      actual   (nonprintable as hex) : "hellowowidth: 0\x0awidth: 0\x0a"$
$
Test  37 (s_two_strings_prec_0trunc) : FAILED.$
    First line of code: {return test("%.5s%7s", "yo", "boi");}$
      expected return value : 9$
      your return value     : 12$
      expected output : "yo    boi"$
      your output     : "yo    boiyowidth: 0$
width: 7$
"$
      expected (nonprintable as hex) : "yo    boi"$
      actual   (nonprintable as hex) : "yo    boiyowidth: 0\x0awidth: 7\x0a"$
$
Test  38 (s_string_prec_width_notrunc) : FAILED.$
    First line of code: {return test("%7.5s", "yolo");}$
      expected return value : 7$
      your return value     : 7$
      expected output : "   yolo"$
      your output     : "   yolowidth: 7$
"$
      expected (nonprintable as hex) : "   yolo"$
      actual   (nonprintable as hex) : "   yolowidth: 7\x0a"$
$
Test  39 (s_string_prec_width_trunc) : FAILED.$
    First line of code: {return test("%7.5s", "bombastic");}$
      expected return value : 7$
      your return value     : 7$
      expected output : "  bomba"$
      your output     : "  bombawidth: 7$
"$
      expected (nonprintable as hex) : "  bomba"$
      actual   (nonprintable as hex) : "  bombawidth: 7\x0a"$
$
Test  40 (s_string_prec_width_notrunc_lj) : FAILED.$
    First line of code: {return test("%-7.5s", "yolo");}$
      expected return value : 7$
      your return value     : 7$
      expected output : "yolo   "$
      your output     : "yolo   width: 7$
"$
      expected (nonprintable as hex) : "yolo   "$
      actual   (nonprintable as hex) : "yolo   width: 7\x0a"$
$
Test  41 (s_string_prec_width_trunc_lj) : FAILED.$
    First line of code: {return test("%-7.5s", "tubular");}$
      expected return value : 7$
      your return value     : 7$
      expected output : "tubul  "$
      your output     : "tubul^@^@width: 7$
"$
      expected (nonprintable as hex) : "tubul  "$
      actual   (nonprintable as hex) : "tubul\x00\x00width: 7\x0a"$
$
Test  42 (s_two_s_prec_width_2fit_0trunc) : FAILED.$
    First line of code: {return test("%7.7s%7.7s", "hello", "world");}$
      expected return value : 15$
      your return value     : 15$
      expected output : "  hello  world"$
      your output     : "  hello  worldwidth: 7$
width: 7$
"$
      expected (nonprintable as hex) : "  hello  world"$
      actual   (nonprintable as hex) : "  hello  worldwidth: 7\x0awidth: 7\x0a"$
$
Test  43 (s_two_s_prec_width_1fit_a_0trunc) : FAILED.$
    First line of code: {return test("%3.7s%7.7s", "hello", "world");}$
      expected return value : 13$
      your return value     : 13$
      expected output : "hello  world"$
      your output     : "hello  worldwidth: 3$
width: 7$
"$
      expected (nonprintable as hex) : "hello  world"$
      actual   (nonprintable as hex) : "hello  worldwidth: 3\x0awidth: 7\x0a"$
$
Test  44 (s_two_s_prec_width_1fit_b_0trunc) : FAILED.$
    First line of code: {return test("%7.7s%3.7s", "hello", "world");}$
      expected return value : 13$
      your return value     : 13$
      expected output : "  helloworld"$
      your output     : "  helloworldwidth: 7$
width: 3$
"$
      expected (nonprintable as hex) : "  helloworld"$
      actual   (nonprintable as hex) : "  helloworldwidth: 7\x0awidth: 3\x0a"$
$
Test  45 (s_two_s_prec_width_0fit_0trunc) : FAILED.$
    First line of code: {return test("%3.7s%3.7s", "hello", "world");}$
      expected return value : 11$
      your return value     : 11$
      expected output : "helloworld"$
      your output     : "helloworldwidth: 3$
width: 3$
"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "helloworldwidth: 3\x0awidth: 3\x0a"$
$
Test  46 (s_two_s_prec_width_2fit_1trunc_a) : FAILED.$
    First line of code: {return test("%7.3s%7.7s", "hello", "world");}$
      expected return value : 15$
      your return value     : 15$
      expected output : "    hel  world"$
      your output     : "    hel  worldwidth: 7$
width: 7$
"$
      expected (nonprintable as hex) : "    hel  world"$
      actual   (nonprintable as hex) : "    hel  worldwidth: 7\x0awidth: 7\x0a"$
$
Test  47 (s_two_s_prec_width_1fit_a_1trunc_a) : FAILED.$
    First line of code: {return test("%3.3s%7.7s", "hello", "world");}$
      expected return value : 11$
      your return value     : 11$
      expected output : "hel  world"$
      your output     : "hel  worldwidth: 3$
width: 7$
"$
      expected (nonprintable as hex) : "hel  world"$
      actual   (nonprintable as hex) : "hel  worldwidth: 3\x0awidth: 7\x0a"$
$
Test  48 (s_two_s_prec_width_1fit_b_1trunc_a) : FAILED.$
    First line of code: {return test("%7.3s%3.7s", "hello", "world");}$
      expected return value : 13$
      your return value     : 13$
      expected output : "    helworld"$
      your output     : "    helworldwidth: 7$
width: 3$
"$
      expected (nonprintable as hex) : "    helworld"$
      actual   (nonprintable as hex) : "    helworldwidth: 7\x0awidth: 3\x0a"$
$
Test  49 (s_two_s_prec_width_0fit_1trunc_a) : FAILED.$
    First line of code: {return test("%3.3s%3.7s", "hello", "world");}$
      expected return value : 8$
      your return value     : 8$
      expected output : "helworld"$
      your output     : "helworldwidth: 3$
width: 3$
"$
      expected (nonprintable as hex) : "helworld"$
      actual   (nonprintable as hex) : "helworldwidth: 3\x0awidth: 3\x0a"$
$
Test  50 (s_two_s_prec_width_2fit_1trunc_b) : FAILED.$
    First line of code: {return test("%7.7s%7.3s", "hello", "world");}$
      expected return value : 15$
      your return value     : 15$
      expected output : "  hello    wor"$
      your output     : "  hello    worwidth: 7$
width: 7$
"$
      expected (nonprintable as hex) : "  hello    wor"$
      actual   (nonprintable as hex) : "  hello    worwidth: 7\x0awidth: 7\x0a"$
$
Test  51 (s_two_s_prec_width_1fit_a_1trunc_b) : FAILED.$
    First line of code: {return test("%3.7s%7.3s", "hello", "world");}$
      expected return value : 13$
      your return value     : 13$
      expected output : "hello    wor"$
      your output     : "hello    worwidth: 3$
width: 7$
"$
      expected (nonprintable as hex) : "hello    wor"$
      actual   (nonprintable as hex) : "hello    worwidth: 3\x0awidth: 7\x0a"$
$
Test  52 (s_two_s_prec_width_1fit_b_1trunc_b) : FAILED.$
    First line of code: {return test("%7.7s%3.3s", "hello", "world");}$
      expected return value : 11$
      your return value     : 11$
      expected output : "  hellowor"$
      your output     : "  helloworwidth: 7$
width: 3$
"$
      expected (nonprintable as hex) : "  hellowor"$
      actual   (nonprintable as hex) : "  helloworwidth: 7\x0awidth: 3\x0a"$
$
Test  53 (s_two_s_prec_width_0fit_1trunc_b) : FAILED.$
    First line of code: {return test("%3.7s%3.3s", "hello", "world");}$
      expected return value : 8$
      your return value     : 8$
      expected output : "hellowor"$
      your output     : "helloworwidth: 3$
width: 3$
"$
      expected (nonprintable as hex) : "hellowor"$
      actual   (nonprintable as hex) : "helloworwidth: 3\x0awidth: 3\x0a"$
$
Test  54 (s_two_s_prec_width_2fit_2trunc) : FAILED.$
    First line of code: {return test("%7.3s%7.3s", "hello", "world");}$
      expected return value : 15$
      your return value     : 15$
      expected output : "    hel    wor"$
      your output     : "    hel    worwidth: 7$
width: 7$
"$
      expected (nonprintable as hex) : "    hel    wor"$
      actual   (nonprintable as hex) : "    hel    worwidth: 7\x0awidth: 7\x0a"$
$
Test  55 (s_two_s_prec_width_1fit_a_2trunc) : FAILED.$
    First line of code: {return test("%3.3s%7.3s", "hello", "world");}$
      expected return value : 11$
      your return value     : 11$
      expected output : "hel    wor"$
      your output     : "hel    worwidth: 3$
width: 7$
"$
      expected (nonprintable as hex) : "hel    wor"$
      actual   (nonprintable as hex) : "hel    worwidth: 3\x0awidth: 7\x0a"$
$
Test  56 (s_two_s_prec_width_1fit_b_2trunc) : FAILED.$
    First line of code: {return test("%7.3s%3.3s", "hello", "world");}$
      expected return value : 11$
      your return value     : 11$
      expected output : "    helwor"$
      your output     : "    helworwidth: 7$
width: 3$
"$
      expected (nonprintable as hex) : "    helwor"$
      actual   (nonprintable as hex) : "    helworwidth: 7\x0awidth: 3\x0a"$
$
Test  57 (s_two_s_prec_width_0fit_2trunc) : FAILED.$
    First line of code: {return test("%3.3s%3.3s", "hello", "world");}$
      expected return value : 6$
      your return value     : 6$
      expected output : "helwor"$
      your output     : "helworwidth: 3$
width: 3$
"$
      expected (nonprintable as hex) : "helwor"$
      actual   (nonprintable as hex) : "helworwidth: 3\x0awidth: 3\x0a"$
$
Test  58 (s_two_s_prec_width_2trunc) : FAILED.$
    First line of code: {return test("%3s%3s", "hello", "world");}$
      expected return value : 11$
      your return value     : 11$
      expected output : "helloworld"$
      your output     : "helloworldwidth: 3$
width: 3$
"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "helloworldwidth: 3\x0awidth: 3\x0a"$
$
Test  59 (s_two_strings_lj_and_rj) : FAILED.$
    First line of code: {return test("%-7s%5s", "hello", "world");}$
      expected return value : 13$
      your return value     : 24$
      expected output : "hello  world"$
      your output     : "hello  world      ^V-5swidth: 7$
width: 5$
width: 7$
"$
      expected (nonprintable as hex) : "hello  world"$
      actual   (nonprintable as hex) : "hello  world      \x16-5swidth: 7\x0awidth: 5\x0awidth: 7\x0a"$
$
Test  60 (s_two_strings_rj_and_lj) : FAILED.$
    First line of code: {return test("%7s%-5s", "hello", "world");}$
      expected return value : 13$
      your return value     : 13$
      expected output : "  helloworld"$
      your output     : "  helloworldwidth: 7$
width: 5$
"$
      expected (nonprintable as hex) : "  helloworld"$
      actual   (nonprintable as hex) : "  helloworldwidth: 7\x0awidth: 5\x0a"$
$
Test  61 (s_null_basic_string_expansion) : FAILED.$
    First line of code: {return test("hello, %s.", NULL);}$
    SEGFAULT$
$
Test  62 (s_null_only_string_expansion) : FAILED.$
    First line of code: {return test("%s", NULL);}$
    SEGFAULT$
$
Test  63 (s_null_space_padded_field_width) : FAILED.$
    First line of code: {return test("%32s", NULL);}$
    SEGFAULT$
$
Test  64 (s_null_space_padded_over_field_width) : FAILED.$
    First line of code: {return test("%2s", NULL);}$
    SEGFAULT$
$
Test  65 (s_null_space_padded_field_width_lj) : FAILED.$
    First line of code: {return test("%-32s", NULL);}$
    SEGFAULT$
$
Test  66 (s_null_space_padded_field_width2_lj) : FAILED.$
    First line of code: {return test("%-16s", NULL);}$
    SEGFAULT$
$
Test  67 (s_null_space_padded_over_field_width_lj) : FAILED.$
    First line of code: {return test("%-3s", NULL);}$
    SEGFAULT$
$
Test  68 (s_null_string_prec_notrunc) : FAILED.$
    First line of code: {return test("%.9s", "NULL");}$
      expected return value : 4$
      your return value     : 4$
      expected output : "NULL"$
      your output     : "NULLwidth: 0$
"$
      expected (nonprintable as hex) : "NULL"$
      actual   (nonprintable as hex) : "NULLwidth: 0\x0a"$
$
Test  69 (s_null_string_prec_trunc) : FAILED.$
    First line of code: {return test("%.3s", "NULL");}$
      expected return value : 3$
      your return value     : 3$
      expected output : "NUL"$
      your output     : "NULwidth: 0$
"$
      expected (nonprintable as hex) : "NUL"$
      actual   (nonprintable as hex) : "NULwidth: 0\x0a"$
$
Test  70 (s_null_string_prec_default) : FAILED.$
    First line of code: {return test("%.s", "NULL");}$
      expected return value : 0$
      your return value     : 4$
      expected output : ""$
      your output     : "NULLwidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "NULLwidth: 0\x0a"$
$
Test  71 (s_null_string_prec_zero) : FAILED.$
    First line of code: {return test("%.0s", "NULL");}$
      expected return value : 0$
      your return value     : 4$
      expected output : ""$
      your output     : "NULLwidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "NULLwidth: 0\x0a"$
$
Test  72 (s_basic_s_hidden) : FAILED.$
    First line of code: {return test("%s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test  73 (s_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test  74 (s_width_9_s_hidden) : FAILED.$
    First line of code: {return test("%9s", s_hidden);}$
      expected return value : 9$
      your return value     : 9$
      expected output : "   hi low"$
      your output     : "   hi lowwidth: 9$
"$
      expected (nonprintable as hex) : "   hi low"$
      actual   (nonprintable as hex) : "   hi lowwidth: 9\x0a"$
$
Test  75 (s_prec_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.s", s_hidden);}$
      expected return value : 0$
      your return value     : 6$
      expected output : ""$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test  76 (s_prec_9_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.9s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test  77 (s_prec_03_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.03s", s_hidden);}$
      expected return value : 3$
      your return value     : 3$
      expected output : "hi "$
      your output     : "hi width: 0$
"$
      expected (nonprintable as hex) : "hi "$
      actual   (nonprintable as hex) : "hi width: 0\x0a"$
$
Test  78 (s_prec_09_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.09s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test  79 (s_prec_03_no_width_s_null) : FAILED.$
    First line of code: {return test("%.03s", NULL);}$
    SEGFAULT$
$
Test  80 (s_prec_09_no_width_s_null) : FAILED.$
    First line of code: {return test("%.09s", NULL);}$
    SEGFAULT$
$
Test  81 (s_prec_00_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.00s", "$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test  82 (s_prec_01_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.01s", "$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test  83 (s_prec_03_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.03s", "$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test  84 (s_prec_09_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.09s", "$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test  85 (s_prec_0_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.s", s_hidden);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "   "$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test  86 (s_prec_0_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%10.s", s_hidden);}$
      expected return value : 11$
      your return value     : 11$
      expected output : "          "$
      your output     : "    hi lowwidth: 10$
"$
      expected (nonprintable as hex) : "          "$
      actual   (nonprintable as hex) : "    hi lowwidth: 10\x0a"$
$
Test  87 (s_prec_0_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.s", NULL);}$
    SEGFAULT$
$
Test  88 (s_prec_0_width_10_s_null) : FAILED.$
    First line of code: {return test("%10.s", NULL);}$
    SEGFAULT$
$
Test  89 (s_prec_0_width_1_s_nullchar) : FAILED.$
    First line of code: {return test("%1.s", "$
      expected return value : 1$
      your return value     : 1$
      expected output : " "$
      your output     : " width: 1$
"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " width: 1\x0a"$
$
Test  90 (s_prec_0_width_2_s_nullchar) : FAILED.$
    First line of code: {return test("%2.s", "$
      expected return value : 2$
      your return value     : 2$
      expected output : "  "$
      your output     : "  width: 2$
"$
      expected (nonprintable as hex) : "  "$
      actual   (nonprintable as hex) : "  width: 2\x0a"$
$
Test  91 (s_prec_0_width_9_s_nullchar) : FAILED.$
    First line of code: {return test("%9.s", "$
      expected return value : 9$
      your return value     : 9$
      expected output : "         "$
      your output     : "         width: 9$
"$
      expected (nonprintable as hex) : "         "$
      actual   (nonprintable as hex) : "         width: 9\x0a"$
$
Test  92 (s_prec_0_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.s", s_hidden);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "   "$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test  93 (s_prec_0_lj_width_8_s_hidden) : FAILED.$
    First line of code: {return test("%-8.s", s_hidden);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "        "$
      your output     : "hi low  width: 8$
"$
      expected (nonprintable as hex) : "        "$
      actual   (nonprintable as hex) : "hi low  width: 8\x0a"$
$
Test  94 (s_prec_0_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.s", NULL);}$
    SEGFAULT$
$
Test  95 (s_prec_0_lj_width_8_s_null) : FAILED.$
    First line of code: {return test("%-8.s", NULL);}$
    SEGFAULT$
$
Test  96 (s_prec_0_lj_width_1_s_nullchar) : FAILED.$
    First line of code: {return test("%-1.s", "$
      expected return value : 1$
      your return value     : 1$
      expected output : " "$
      your output     : " width: 1$
"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " width: 1\x0a"$
$
Test  97 (s_prec_0_lj_width_2_s_nullchar) : FAILED.$
    First line of code: {return test("%-2.s", "$
      expected return value : 2$
      your return value     : 2$
      expected output : "  "$
      your output     : "  width: 2$
"$
      expected (nonprintable as hex) : "  "$
      actual   (nonprintable as hex) : "  width: 2\x0a"$
$
Test  98 (s_prec_0_lj_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%-6.s", "$
      expected return value : 6$
      your return value     : 6$
      expected output : "      "$
      your output     : "      width: 6$
"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      width: 6\x0a"$
$
Test  99 (s_prec_1_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.1s", s_hidden);}$
      expected return value : 3$
      your return value     : 3$
      expected output : "  h"$
      your output     : "  hwidth: 3$
"$
      expected (nonprintable as hex) : "  h"$
      actual   (nonprintable as hex) : "  hwidth: 3\x0a"$
$
Test 100 (s_prec_1_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%10.1s", s_hidden);}$
      expected return value : 11$
      your return value     : 11$
      expected output : "         h"$
      your output     : "         hwidth: 10$
"$
      expected (nonprintable as hex) : "         h"$
      actual   (nonprintable as hex) : "         hwidth: 10\x0a"$
$
Test 101 (s_prec_1_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.1s", NULL);}$
    SEGFAULT$
$
Test 102 (s_prec_1_width_9_s_null) : FAILED.$
    First line of code: {return test("%9.1s", NULL);}$
    SEGFAULT$
$
Test 103 (s_prec_1_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.1s", s_hidden);}$
      expected return value : 3$
      your return value     : 3$
      expected output : "h  "$
      your output     : "h^@^@width: 3$
"$
      expected (nonprintable as hex) : "h  "$
      actual   (nonprintable as hex) : "h\x00\x00width: 3\x0a"$
$
Test 104 (s_prec_1_lj_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%-10.1s", s_hidden);}$
      expected return value : 11$
      your return value     : 11$
      expected output : "h         "$
      your output     : "h^@^@^@^@^@    width: 10$
"$
      expected (nonprintable as hex) : "h         "$
      actual   (nonprintable as hex) : "h\x00\x00\x00\x00\x00    width: 10\x0a"$
$
Test 105 (s_prec_1_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.1s", NULL);}$
    SEGFAULT$
$
Test 106 (s_prec_1_lj_width_9_s_null) : FAILED.$
    First line of code: {return test("%-9.1s", NULL);}$
    SEGFAULT$
$
Test 107 (s_prec_1_lj_width_3_s_nullchar) : FAILED.$
    First line of code: {return test("%-3.1s", "$
      expected return value : 3$
      your return value     : 3$
      expected output : "   "$
      your output     : "   width: 3$
"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   width: 3\x0a"$
$
Test 108 (s_prec_1_lj_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%-6.1s", "$
      expected return value : 6$
      your return value     : 6$
      expected output : "      "$
      your output     : "      width: 6$
"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      width: 6\x0a"$
$
Test 109 (s_prec_perfect_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.6s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test 110 (s_prec_perfect_width_20_s_hidden) : FAILED.$
    First line of code: {return test("%20.6s", s_hidden);}$
      expected return value : 22$
      your return value     : 22$
      expected output : "              hi low"$
      your output     : "              hi lowwidth: 20$
"$
      expected (nonprintable as hex) : "              hi low"$
      actual   (nonprintable as hex) : "              hi lowwidth: 20\x0a"$
$
Test 111 (s_prec_perfect_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.6s", NULL);}$
    SEGFAULT$
$
Test 112 (s_prec_perfect_width_20_s_null) : FAILED.$
    First line of code: {return test("%20.6s", NULL);}$
    SEGFAULT$
$
Test 113 (s_prec_perfect_width_3_s_nullchar) : FAILED.$
    First line of code: {return test("%3.6s", "$
      expected return value : 3$
      your return value     : 3$
      expected output : "   "$
      your output     : "   width: 3$
"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   width: 3\x0a"$
$
Test 114 (s_prec_perfect_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%6.6s", "$
      expected return value : 6$
      your return value     : 6$
      expected output : "      "$
      your output     : "      width: 6$
"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      width: 6\x0a"$
$
Test 115 (s_prec_perfect_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.6s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test 116 (s_prec_perfect_lj_width_20_s_hidden) : FAILED.$
    First line of code: {return test("%-20.6s", s_hidden);}$
      expected return value : 22$
      your return value     : 22$
      expected output : "hi low              "$
      your output     : "hi low              width: 20$
"$
      expected (nonprintable as hex) : "hi low              "$
      actual   (nonprintable as hex) : "hi low              width: 20\x0a"$
$
Test 117 (s_prec_8_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.8s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test 118 (s_prec_8_lj_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%-10.8s", s_hidden);}$
      expected return value : 11$
      your return value     : 11$
      expected output : "hi low    "$
      your output     : "hi low    width: 10$
"$
      expected (nonprintable as hex) : "hi low    "$
      actual   (nonprintable as hex) : "hi low    width: 10\x0a"$
$
Test 119 (s_prec_8_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.8s", NULL);}$
    SEGFAULT$
$
Test 120 (s_prec_8_lj_width_10_s_null) : FAILED.$
    First line of code: {return test("%-10.8s", NULL);}$
    SEGFAULT$
$
Test 121 (s_prec_00_lj_s_hidden_trunc) : FAILED.$
    First line of code: {return test("%-.00s", s_hidden);}$
      expected return value : 0$
      your return value     : 6$
      expected output : ""$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test 122 (s_prec_09_lj_s_hidden_notrunc) : FAILED.$
    First line of code: {return test("%-.09s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test 123 (s_undefbehav_0_2zero) : FAILED.$
    First line of code: {return test("%00s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test 124 (s_undefbehav_0_3zero) : FAILED.$
    First line of code: {return test("%000s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test 125 (s_undefbehav_0_4zero) : FAILED.$
    First line of code: {return test("%0000s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test 126 (s_undefbehav_0_lj_2zero) : FAILED.$
    First line of code: {return test("%-00s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 0\x0a"$
$
Test 127 (s_undefbehav_0_zero_lj_zero) : FAILED.$
    First line of code: {return test("%0-0s", s_hidden);}$
      expected return value : 6$
      your return value     : 0$
      expected output : "hi low"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 128 (s_undefbehav_0_2zero_lj) : FAILED.$
    First line of code: {return test("%00-s", s_hidden);}$
      expected return value : 6$
      your return value     : 0$
      expected output : "hi low"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 129 (s_undefbehav_0_width_3) : FAILED.$
    First line of code: {return test("%03s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test 130 (s_undefbehav_0_width_9) : FAILED.$
    First line of code: {return test("%09s", s_hidden);}$
      expected return value : 9$
      your return value     : 9$
      expected output : "000hi low"$
      your output     : "   hi lowwidth: 9$
"$
      expected (nonprintable as hex) : "000hi low"$
      actual   (nonprintable as hex) : "   hi lowwidth: 9\x0a"$
$
Test 131 (s_undefbehav_lj_0_width_3) : FAILED.$
    First line of code: {return test("%-03s", s_hidden);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "hi low"$
      your output     : "hi lowwidth: 3$
"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lowwidth: 3\x0a"$
$
Test 132 (s_undefbehav_lj_0_width_9) : FAILED.$
    First line of code: {return test("%-09s", s_hidden);}$
      expected return value : 9$
      your return value     : 9$
      expected output : "hi low   "$
      your output     : "hi low   width: 9$
"$
      expected (nonprintable as hex) : "hi low   "$
      actual   (nonprintable as hex) : "hi low   width: 9\x0a"$
$
Test 133 (i_basic_i_pos) : FAILED.$
    First line of code: {return test("this %i number", 17);}$
      expected return value : 15$
      your return value     : 13$
      expected output : "this 17 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 134 (i_basic_i_neg) : FAILED.$
    First line of code: {return test("this %i number", -267);}$
      expected return value : 17$
      your return value     : 13$
      expected output : "this -267 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this -267 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 135 (i_basic_i_zero) : FAILED.$
    First line of code: {return test("this %i number", 0);}$
      expected return value : 14$
      your return value     : 13$
      expected output : "this 0 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 136 (i_basic_i_onlypos) : FAILED.$
    First line of code: {return test("%i", 3);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "3"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 137 (i_basic_i_onlyneg) : FAILED.$
    First line of code: {return test("%i", -1);}$
      expected return value : 2$
      your return value     : 0$
      expected output : "-1"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-1"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 138 (i_basic_i_onlyzero) : FAILED.$
    First line of code: {return test("%i", 0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 139 (d_basic_pos) : FAILED.$
    First line of code: {return test("this %d number", 17);}$
      expected return value : 15$
      your return value     : 15$
      expected output : "this 17 number"$
      your output     : "this 17 numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this 17 numberwidth: 0\x0a"$
$
Test 140 (d_basic_neg) : FAILED.$
    First line of code: {return test("this %d number", -267);}$
      expected return value : 17$
      your return value     : 17$
      expected output : "this -267 number"$
      your output     : "this -267 numberwidth: 0$
"$
      expected (nonprintable as hex) : "this -267 number"$
      actual   (nonprintable as hex) : "this -267 numberwidth: 0\x0a"$
$
Test 141 (d_basic_zero) : FAILED.$
    First line of code: {return test("this %d number", 0);}$
      expected return value : 14$
      your return value     : 13$
      expected output : "this 0 number"$
      your output     : "this 0 numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0 numberwidth: 0\x0a"$
$
Test 142 (i_intmax) : FAILED.$
    First line of code: {return test("%i",  2147483647);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "2147483647"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 143 (i_intmin) : FAILED.$
    First line of code: {return test("%i", (int)(-2147483678));}$
      expected return value : 11$
      your return value     : 0$
      expected output : "2147483618"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483618"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 144 (i_width_pos_fits) : FAILED.$
    First line of code: {return test("%7i", 33);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "     33"$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 145 (i_width_neg_fits) : FAILED.$
    First line of code: {return test("%7i", -14);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "    -14"$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "    -14"$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 146 (i_width_zero_fits) : FAILED.$
    First line of code: {return test("%3i", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "  0"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 147 (i_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5i", 52625);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "52625"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 148 (i_width_neg_exactfit) : FAILED.$
    First line of code: {return test("%5i", -2562);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "-2562"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 149 (i_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4i", 94827);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "94827"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 150 (i_width_neg_nofit) : FAILED.$
    First line of code: {return test("%4i", -2464);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "-2464"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 151 (i_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7i", 33);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "33     "$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 152 (i_width_neg_fits_lj) : FAILED.$
    First line of code: {return test("%-7i", -14);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "-14    "$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "-14    "$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 153 (i_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3i", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "0  "$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 154 (i_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5i", 52625);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "52625"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 155 (i_width_neg_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5i", -2562);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "-2562"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 156 (i_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4i", 94827);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "94827"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 157 (i_width_neg_nofit_lj) : FAILED.$
    First line of code: {return test("%-4i", -2464);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "-2464"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 158 (i_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5i", 2);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "00002"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 159 (i_prec_fits_neg) : FAILED.$
    First line of code: {return test("%.6i", -3);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "-000003"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 160 (i_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3i", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "000"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 161 (i_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4i", 5263);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "5263"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 162 (i_prec_exactfit_neg) : FAILED.$
    First line of code: {return test("%.4i", -2372);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "-2372"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-2372"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 163 (i_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3i", 13862);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "13862"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 164 (i_prec_nofit_neg) : FAILED.$
    First line of code: {return test("%.3i",-23646);}$
      expected return value : 6$
      your return value     : 0$
      expected output : "-23646"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-23646"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 165 (i_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05i", 43);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "00043"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 166 (i_zp_neg_fits) : FAILED.$
    First line of code: {return test("%07i", -54);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "-000054"$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 167 (i_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03i", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "000"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 168 (i_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03i", 634);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "634"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 169 (i_zp_neg_exactfit) : FAILED.$
    First line of code: {return test("%04i", -532);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "-532"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "-532"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 170 (i_zp_neg_minus1fit) : FAILED.$
    First line of code: {return test("%04i", -4825);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "-4825"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "-4825"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 171 (i_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5i", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00034"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 172 (i_prec_width_fit_fit_neg) : FAILED.$
    First line of code: {return test("%10.5i", -216);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "    -00216"$
      your output     : "width: 10$
"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "width: 10\x0a"$
$
Test 173 (i_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5i", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 174 (i_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3i", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "    8375"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 175 (i_prec_width_nofit_fit_neg) : FAILED.$
    First line of code: {return test("%8.3i", -8473);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   -8473"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 176 (i_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7i", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 177 (i_prec_width_fit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.7i", -2375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "-0002375"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 178 (i_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3i", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 179 (i_prec_width_nofit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.3i", -8462);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "-8462"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 180 (i_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5i", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00034   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 181 (i_prec_width_fit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-10.5i", -216);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "-00216    "$
      your output     : "width: 10$
"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "width: 10\x0a"$
$
Test 182 (i_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5i", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00000   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 183 (i_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3i", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "8375    "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 184 (i_prec_width_nofit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-8.3i", -8473);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "-8473   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 185 (i_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7i", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 186 (i_prec_width_fit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.7i", -2375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "-0002375"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 187 (i_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3i", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 188 (i_prec_width_nofit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.3i", -8462);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "-8462"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 189 (i_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5i", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00034"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 190 (i_prec_width_ff_neg_zp) : FAILED.$
    First line of code: {return test("%010.5i", -216);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "    -00216"$
      your output     : "width: 10$
"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "width: 10\x0a"$
$
Test 191 (i_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5i", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 192 (i_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3i", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "    8375"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 193 (i_prec_width_nf_neg_zp) : FAILED.$
    First line of code: {return test("%08.3i", -8473);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   -8473"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 194 (i_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7i", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 195 (i_prec_width_fn_neg_zp) : FAILED.$
    First line of code: {return test("%03.7i", -2375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "-0002375"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 196 (i_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3i", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 197 (i_prec_width_nn_neg_zp) : FAILED.$
    First line of code: {return test("%03.3i", -8462);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "-8462"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 198 (i_prec_width_ff_pos_lj_zp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5i", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00034   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 199 (i_prec_width_ff_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-10.5i", -216);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "-00216    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 200 (i_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5i", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00000   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 201 (i_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3i", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "8375    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 202 (i_prec_width_nf_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3i", -8473);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "-8473   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 203 (i_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7i", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0003267"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 204 (i_prec_width_fn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7i", -2375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "-0002375"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 205 (i_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3i", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "6983"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 206 (i_prec_width_nn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3i", -8462);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "-8462"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 207 (i_size_follows_i_i) : FAILED.$
    First line of code: {return test("[%i] [%i]", i_pos_1, i_pos_1);}$
      expected return value : 18$
      your return value     : 5$
      expected output : "[878023] [878023]"$
      your output     : "[] []width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "[878023] [878023]"$
      actual   (nonprintable as hex) : "[] []width: 0\x0awidth: 0\x0a"$
$
Test 208 (i_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0i", 0);}$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 209 (i_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.i", 0);}$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 210 (i_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0i", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 211 (i_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.i", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 212 (i_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0i", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 213 (i_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.i", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 214 (d_basic_i_pos) : FAILED.$
    First line of code: {return test("this %d number", 17);}$
      expected return value : 15$
      your return value     : 15$
      expected output : "this 17 number"$
      your output     : "this 17 numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this 17 numberwidth: 0\x0a"$
$
Test 215 (d_basic_i_neg) : FAILED.$
    First line of code: {return test("this %d number", -267);}$
      expected return value : 17$
      your return value     : 17$
      expected output : "this -267 number"$
      your output     : "this -267 numberwidth: 0$
"$
      expected (nonprintable as hex) : "this -267 number"$
      actual   (nonprintable as hex) : "this -267 numberwidth: 0\x0a"$
$
Test 216 (d_basic_i_zero) : FAILED.$
    First line of code: {return test("this %d number", 0);}$
      expected return value : 14$
      your return value     : 13$
      expected output : "this 0 number"$
      your output     : "this 0 numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0 numberwidth: 0\x0a"$
$
Test 217 (d_basic_i_onlypos) : FAILED.$
    First line of code: {return test("%d", 3);}$
      expected return value : 1$
      your return value     : 1$
      expected output : "3"$
      your output     : "3width: 0$
"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3width: 0\x0a"$
$
Test 218 (d_basic_i_onlyneg) : FAILED.$
    First line of code: {return test("%d", -1);}$
      expected return value : 2$
      your return value     : 2$
      expected output : "-1"$
      your output     : "-1width: 0$
"$
      expected (nonprintable as hex) : "-1"$
      actual   (nonprintable as hex) : "-1width: 0\x0a"$
$
Test 219 (d_basic_i_onlyzero) : FAILED.$
    First line of code: {return test("%d", 0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "0"$
      your output     : "0width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0width: 0\x0a"$
$
Test 220 (d_intmax) : FAILED.$
    First line of code: {return test("%d",  2147483647);}$
      expected return value : 11$
      your return value     : 11$
      expected output : "2147483647"$
      your output     : "2147483647width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647width: 0\x0a"$
$
Test 221 (d_intmin) : FAILED.$
    First line of code: {return test("%d", (int)(-2147483678));}$
      expected return value : 11$
      your return value     : 11$
      expected output : "2147483618"$
      your output     : "2147483618width: 0$
"$
      expected (nonprintable as hex) : "2147483618"$
      actual   (nonprintable as hex) : "2147483618width: 0\x0a"$
$
Test 222 (d_width_pos_fits) : FAILED.$
    First line of code: {return test("%7d", 33);}$
      expected return value : 7$
      your return value     : 7$
      expected output : "     33"$
      your output     : "     33width: 7$
"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "     33width: 7\x0a"$
$
Test 223 (d_width_neg_fits) : FAILED.$
    First line of code: {return test("%7d", -14);}$
      expected return value : 7$
      your return value     : 7$
      expected output : "    -14"$
      your output     : "    -14width: 7$
"$
      expected (nonprintable as hex) : "    -14"$
      actual   (nonprintable as hex) : "    -14width: 7\x0a"$
$
Test 224 (d_width_zero_fits) : FAILED.$
    First line of code: {return test("%3d", 0);}$
      expected return value : 3$
      your return value     : 3$
      expected output : "  0"$
      your output     : "   width: 3$
"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "   width: 3\x0a"$
$
Test 225 (d_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5d", 52625);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "52625"$
      your output     : "52625width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "52625width: 5\x0a"$
$
Test 226 (d_width_neg_exactfit) : FAILED.$
    First line of code: {return test("%5d", -2562);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "-2562"$
      your output     : "-2562width: 5$
"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-2562width: 5\x0a"$
$
Test 227 (d_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4d", 94827);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "94827"$
      your output     : "94827width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827width: 4\x0a"$
$
Test 228 (d_width_neg_nofit) : FAILED.$
    First line of code: {return test("%4d", -2464);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "-2464"$
      your output     : "-2464width: 4$
"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-2464width: 4\x0a"$
$
Test 229 (d_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7d", 33);}$
      expected return value : 7$
      your return value     : 7$
      expected output : "33     "$
      your output     : "33     width: 7$
"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "33     width: 7\x0a"$
$
Test 230 (d_width_neg_fits_lj) : FAILED.$
    First line of code: {return test("%-7d", -14);}$
      expected return value : 7$
      your return value     : 7$
      expected output : "-14    "$
      your output     : "-14    width: 7$
"$
      expected (nonprintable as hex) : "-14    "$
      actual   (nonprintable as hex) : "-14    width: 7\x0a"$
$
Test 231 (d_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3d", 0);}$
      expected return value : 3$
      your return value     : 3$
      expected output : "0  "$
      your output     : "   width: 3$
"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "   width: 3\x0a"$
$
Test 232 (d_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5d", 52625);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "52625"$
      your output     : "52625width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "52625width: 5\x0a"$
$
Test 233 (d_width_neg_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5d", -2562);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "-2562"$
      your output     : "-2562width: 5$
"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-2562width: 5\x0a"$
$
Test 234 (d_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4d", 94827);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "94827"$
      your output     : "94827width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827width: 4\x0a"$
$
Test 235 (d_width_neg_nofit_lj) : FAILED.$
    First line of code: {return test("%-4d", -2464);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "-2464"$
      your output     : "-2464width: 4$
"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-2464width: 4\x0a"$
$
Test 236 (d_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5d", 2);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "00002"$
      your output     : "00002width: 0$
"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "00002width: 0\x0a"$
$
Test 237 (d_prec_fits_neg) : FAILED.$
    First line of code: {return test("%.6d", -3);}$
      expected return value : 7$
      your return value     : 7$
      expected output : "-000003"$
      your output     : "-000003width: 0$
"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "-000003width: 0\x0a"$
$
Test 238 (d_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3d", 0);}$
      expected return value : 3$
      your return value     : 3$
      expected output : "000"$
      your output     : "0000width: 0$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "0000width: 0\x0a"$
$
Test 239 (d_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4d", 5263);}$
      expected return value : 4$
      your return value     : 4$
      expected output : "5263"$
      your output     : "5263width: 0$
"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "5263width: 0\x0a"$
$
Test 240 (d_prec_exactfit_neg) : FAILED.$
    First line of code: {return test("%.4d", -2372);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "-2372"$
      your output     : "-2372width: 0$
"$
      expected (nonprintable as hex) : "-2372"$
      actual   (nonprintable as hex) : "-2372width: 0\x0a"$
$
Test 241 (d_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3d", 13862);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "13862"$
      your output     : "13862width: 0$
"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "13862width: 0\x0a"$
$
Test 242 (d_prec_nofit_neg) : FAILED.$
    First line of code: {return test("%.3d",-23646);}$
      expected return value : 6$
      your return value     : 6$
      expected output : "-23646"$
      your output     : "-23646width: 0$
"$
      expected (nonprintable as hex) : "-23646"$
      actual   (nonprintable as hex) : "-23646width: 0\x0a"$
$
Test 243 (d_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05d", 43);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "00043"$
      your output     : "43^@0^@width: 5$
"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "43\x000\x00width: 5\x0a"$
$
Test 244 (d_zp_neg_fits) : FAILED.$
    First line of code: {return test("%07d", -54);}$
      expected return value : 7$
      your return value     : 7$
      expected output : "-000054"$
      your output     : "-000054width: 7$
"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "-000054width: 7\x0a"$
$
Test 245 (d_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03d", 0);}$
      expected return value : 3$
      your return value     : 3$
      expected output : "000"$
      your output     : "^@00width: 3$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "\x0000width: 3\x0a"$
$
Test 246 (d_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03d", 634);}$
      expected return value : 3$
      your return value     : 3$
      expected output : "634"$
      your output     : "634width: 3$
"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "634width: 3\x0a"$
$
Test 247 (d_zp_neg_exactfit) : FAILED.$
    First line of code: {return test("%04d", -532);}$
      expected return value : 4$
      your return value     : 4$
      expected output : "-532"$
      your output     : "532width: 4$
"$
      expected (nonprintable as hex) : "-532"$
      actual   (nonprintable as hex) : "532width: 4\x0a"$
$
Test 248 (d_zp_neg_minus1fit) : FAILED.$
    First line of code: {return test("%04d", -4825);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "-4825"$
      your output     : "4825width: 4$
"$
      expected (nonprintable as hex) : "-4825"$
      actual   (nonprintable as hex) : "4825width: 4\x0a"$
$
Test 249 (d_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5d", 34);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "   00034"$
      your output     : "   00034width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   00034width: 8\x0a"$
$
Test 250 (d_prec_width_fit_fit_neg) : FAILED.$
    First line of code: {return test("%10.5d", -216);}$
      expected return value : 11$
      your return value     : 11$
      expected output : "    -00216"$
      your output     : "    -00216width: 10$
"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -00216width: 10\x0a"$
$
Test 251 (d_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5d", 0);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "   00000"$
      your output     : "   00000width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   00000width: 8\x0a"$
$
Test 252 (d_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3d", 8375);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "    8375"$
      your output     : "    8375width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    8375width: 8\x0a"$
$
Test 253 (d_prec_width_nofit_fit_neg) : FAILED.$
    First line of code: {return test("%8.3d", -8473);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "   -8473"$
      your output     : "   -8473width: 8$
"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -8473width: 8\x0a"$
$
Test 254 (d_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7d", 3267);}$
      expected return value : 7$
      your return value     : 7$
      expected output : "0003267"$
      your output     : "0003267width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267width: 3\x0a"$
$
Test 255 (d_prec_width_fit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.7d", -2375);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "-0002375"$
      your output     : "-0002375width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-0002375width: 3\x0a"$
$
Test 256 (d_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3d", 6983);}$
      expected return value : 4$
      your return value     : 4$
      expected output : "6983"$
      your output     : "6983width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983width: 3\x0a"$
$
Test 257 (d_prec_width_nofit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.3d", -8462);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "-8462"$
      your output     : "-8462width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-8462width: 3\x0a"$
$
Test 258 (d_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5d", 34);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "00034   "$
      your output     : "00034   width: 8$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   width: 8\x0a"$
$
Test 259 (d_prec_width_fit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-10.5d", -216);}$
      expected return value : 11$
      your return value     : 11$
      expected output : "-00216    "$
      your output     : "-00216    width: 10$
"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "-00216    width: 10\x0a"$
$
Test 260 (d_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5d", 0);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "00000   "$
      your output     : "00000   width: 8$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   width: 8\x0a"$
$
Test 261 (d_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3d", 8375);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "8375    "$
      your output     : "8375    width: 8$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    width: 8\x0a"$
$
Test 262 (d_prec_width_nofit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-8.3d", -8473);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "-8473   "$
      your output     : "-8473   width: 8$
"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "-8473   width: 8\x0a"$
$
Test 263 (d_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7d", 3267);}$
      expected return value : 7$
      your return value     : 7$
      expected output : "0003267"$
      your output     : "0003267width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267width: 3\x0a"$
$
Test 264 (d_prec_width_fit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.7d", -2375);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "-0002375"$
      your output     : "-0002375width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-0002375width: 3\x0a"$
$
Test 265 (d_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3d", 6983);}$
      expected return value : 4$
      your return value     : 4$
      expected output : "6983"$
      your output     : "6983width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983width: 3\x0a"$
$
Test 266 (d_prec_width_nofit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.3d", -8462);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "-8462"$
      your output     : "-8462width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-8462width: 3\x0a"$
$
Test 267 (d_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5d", 34);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "   00034"$
      your output     : "   00034width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   00034width: 8\x0a"$
$
Test 268 (d_prec_width_ff_neg_zp) : FAILED.$
    First line of code: {return test("%010.5d", -216);}$
      expected return value : 11$
      your return value     : 11$
      expected output : "    -00216"$
      your output     : "    -00216width: 10$
"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -00216width: 10\x0a"$
$
Test 269 (d_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5d", 0);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "   00000"$
      your output     : "   00000width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   00000width: 8\x0a"$
$
Test 270 (d_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3d", 8375);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "    8375"$
      your output     : "    8375width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    8375width: 8\x0a"$
$
Test 271 (d_prec_width_nf_neg_zp) : FAILED.$
    First line of code: {return test("%08.3d", -8473);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "   -8473"$
      your output     : "   -8473width: 8$
"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -8473width: 8\x0a"$
$
Test 272 (d_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7d", 3267);}$
      expected return value : 7$
      your return value     : 7$
      expected output : "0003267"$
      your output     : "0003267width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267width: 3\x0a"$
$
Test 273 (d_prec_width_fn_neg_zp) : FAILED.$
    First line of code: {return test("%03.7d", -2375);}$
      expected return value : 8$
      your return value     : 8$
      expected output : "-0002375"$
      your output     : "-0002375width: 3$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-0002375width: 3\x0a"$
$
Test 274 (d_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3d", 6983);}$
      expected return value : 4$
      your return value     : 4$
      expected output : "6983"$
      your output     : "6983width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983width: 3\x0a"$
$
Test 275 (d_prec_width_nn_neg_zp) : FAILED.$
    First line of code: {return test("%03.3d", -8462);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "-8462"$
      your output     : "-8462width: 3$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-8462width: 3\x0a"$
$
Test 276 (d_prec_width_ff_pos_lj_zp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5d", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00034   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 277 (d_prec_width_ff_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-10.5d", -216);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "-00216    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 278 (d_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5d", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00000   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 279 (d_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3d", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "8375    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 280 (d_prec_width_nf_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3d", -8473);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "-8473   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 281 (d_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7d", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0003267"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 282 (d_prec_width_fn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7d", -2375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "-0002375"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 283 (d_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3d", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "6983"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 284 (d_prec_width_nn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3d", -8462);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "-8462"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 285 (d_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0d", 0);}$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "0width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "0width: 0\x0a"$
$
Test 286 (d_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.d", 0);}$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "0width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "0width: 0\x0a"$
$
Test 287 (d_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0d", 0);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "     "$
      your output     : "     width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     width: 5\x0a"$
$
Test 288 (d_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.d", 0);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "     "$
      your output     : "     width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     width: 5\x0a"$
$
Test 289 (d_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0d", 0);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "     "$
      your output     : "     width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     width: 5\x0a"$
$
Test 290 (d_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.d", 0);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "     "$
      your output     : "     width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     width: 5\x0a"$
$
Test 291 (u_basic_u_pos) : FAILED.$
    First line of code: {return test("this %u number", 17);}$
      expected return value : 15$
      your return value     : 13$
      expected output : "this 17 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 292 (u_basic_u_zero) : FAILED.$
    First line of code: {return test("this %u number", 0);}$
      expected return value : 14$
      your return value     : 13$
      expected output : "this 0 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 293 (u_basic_u_onlypos) : FAILED.$
    First line of code: {return test("%u", 3);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "3"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 294 (u_uintmax) : FAILED.$
    First line of code: {return test("%u", 4294967295u);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "4294967295"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "4294967295"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 295 (u_width_pos_fits) : FAILED.$
    First line of code: {return test("%7u", 33);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "     33"$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 296 (u_width_zero_fits) : FAILED.$
    First line of code: {return test("%3u", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "  0"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 297 (u_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5u", 52625);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "52625"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 298 (u_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4u", 94827);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "94827"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 299 (u_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7u", 33);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "33     "$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 300 (u_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3u", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "0  "$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 301 (u_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5u", 52625);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "52625"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 302 (u_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4u", 94827);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "94827"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 303 (u_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5u", 2);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "00002"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 304 (u_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3u", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "000"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 305 (u_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4u", 5263);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "5263"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 306 (u_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3u", 13862);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "13862"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 307 (u_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05u", 43);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "00043"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 308 (u_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03u", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "000"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 309 (u_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03u", 634);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "634"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 310 (u_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5u", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00034"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 311 (u_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5u", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 312 (u_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3u", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "    8375"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 313 (u_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7u", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 314 (u_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3u", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 315 (u_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5u", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00034   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 316 (u_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5u", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00000   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 317 (u_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3u", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "8375    "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 318 (u_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7u", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 319 (u_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3u", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 320 (u_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5u", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00034"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 321 (u_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5u", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 322 (u_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3u", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "    8375"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 323 (u_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7u", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0003267"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 324 (u_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3u", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "6983"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 325 (u_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5u", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00034   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 326 (u_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5u", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00000   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 327 (u_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3u", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "8375    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 328 (u_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7u", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0003267"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 329 (u_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3u", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "6983"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 330 (u_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0u", 0);}$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 331 (u_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.u", 0);}$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 332 (u_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0u", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 333 (u_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.u", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 334 (u_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0u", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 335 (u_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.u", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 336 (x_basic_pos) : FAILED.$
    First line of code: {return test("this %x number", 17);}$
      expected return value : 15$
      your return value     : 13$
      expected output : "this 11 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 11 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 337 (x_basic_zero) : FAILED.$
    First line of code: {return test("this %x number", 0);}$
      expected return value : 14$
      your return value     : 13$
      expected output : "this 0 number"$
      your output     : "this  numberwidth: 0$
"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this  numberwidth: 0\x0a"$
$
Test 338 (x_basic_onlypos) : FAILED.$
    First line of code: {return test("%x", 3);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "3"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 339 (x_hexlmax) : FAILED.$
    First line of code: {return test("%x", 4294967295u);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "ffffffff"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "ffffffff"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 340 (x_width_pos_fits) : FAILED.$
    First line of code: {return test("%7x", 33);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "     21"$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "     21"$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 341 (x_width_zero_fits) : FAILED.$
    First line of code: {return test("%3x", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "  0"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 342 (x_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5x", 52625);}$
      expected return value : 5$
      your return value     : 0$
      expected output : " cd91"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : " cd91"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 343 (x_width_pos_nofit) : FAILED.$
    First line of code: {return test("%2x", 94827);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "1726b"$
      your output     : "width: 2$
"$
      expected (nonprintable as hex) : "1726b"$
      actual   (nonprintable as hex) : "width: 2\x0a"$
$
Test 344 (x_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7x", 33);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "21     "$
      your output     : "width: 7$
"$
      expected (nonprintable as hex) : "21     "$
      actual   (nonprintable as hex) : "width: 7\x0a"$
$
Test 345 (x_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3x", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "0  "$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 346 (x_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5x", 52625);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "cd91 "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "cd91 "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 347 (x_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4x", 9648627);}$
      expected return value : 6$
      your return value     : 0$
      expected output : "9339f3"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "9339f3"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 348 (x_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5x", 21);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "00015"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00015"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 349 (x_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3x", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "000"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 350 (x_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4x", 5263);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "148f"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "148f"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 351 (x_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3x", 938862);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "e536e"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "e536e"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 352 (x_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05x", 43);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "0002b"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "0002b"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 353 (x_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03x", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "000"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 354 (x_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03x", 698334);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "aa7de"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "aa7de"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 355 (x_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5x", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00022"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 356 (x_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5x", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 357 (x_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3x", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "    20b7"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    20b7"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 358 (x_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%2.7x", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0000cc3"$
      your output     : "width: 2$
"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "width: 2\x0a"$
$
Test 359 (x_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3x", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "1b47"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 360 (x_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5x", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00022   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 361 (x_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5x", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00000   "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 362 (x_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3x", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "20b7    "$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "20b7    "$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 363 (x_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-2.7x", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0000cc3"$
      your output     : "width: 2$
"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "width: 2\x0a"$
$
Test 364 (x_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3x", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "1b47"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 365 (x_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5x", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00022"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 366 (x_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5x", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00000"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 367 (x_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3x", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "    20b7"$
      your output     : "width: 8$
"$
      expected (nonprintable as hex) : "    20b7"$
      actual   (nonprintable as hex) : "width: 8\x0a"$
$
Test 368 (x_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%02.7x", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0000cc3"$
      your output     : "width: 2$
"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "width: 2\x0a"$
$
Test 369 (x_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3x", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "1b47"$
      your output     : "width: 3$
"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "width: 3\x0a"$
$
Test 370 (x_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5x", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00022   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 371 (x_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5x", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00000   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 372 (x_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3x", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "20b7    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "20b7    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 373 (x_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-2.7x", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0000cc3"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 374 (x_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3x", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "1b47"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 375 (x_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0x", 0);}$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 376 (x_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.x", 0);}$
      expected return value : 0$
      your return value     : 0$
      expected output : ""$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 377 (x_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0x", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 378 (x_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.x", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 379 (x_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0x", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 380 (x_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.x", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 381 (X_basic_hexu_pos) : FAILED.$
    First line of code: {return test("this %X number", 17);}$
      expected return value : 15$
      your return value     : 9$
      expected output : "this 11 number"$
      your output     : "this mberwidth: 0$
"$
      expected (nonprintable as hex) : "this 11 number"$
      actual   (nonprintable as hex) : "this mberwidth: 0\x0a"$
$
Test 382 (X_basic_hexu_zero) : FAILED.$
    First line of code: {return test("this %X number", 0);}$
      expected return value : 14$
      your return value     : 9$
      expected output : "this 0 number"$
      your output     : "this mberwidth: 0$
"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this mberwidth: 0\x0a"$
$
Test 383 (X_basic_hexu_onlypos) : FAILED.$
    First line of code: {return test("%X", 3);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "3"$
      your output     : "width: 0$
width: 7$
width: 3$
width: 5$
width: 2$
width: 7$
width: 3$
width: 5$
width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width:"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 2\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth:"$
$
Test 384 (X_hexumax) : FAILED.$
    First line of code: {return test("%X", 4294967295u);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "FFFFFFFF"$
      your output     : "width: 0$
width: 7$
width: 3$
width: 5$
width: 2$
width: 7$
width: 3$
width: 5$
width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width:"$
      expected (nonprintable as hex) : "FFFFFFFF"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 2\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth:"$
$
Test 385 (X_width_pos_fits) : FAILED.$
    First line of code: {return test("%7X", 33);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "     21"$
      your output     : "width: 7$
width: 3$
width: 5$
width: 2$
width: 7$
width: 3$
width: 5$
width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width:"$
      expected (nonprintable as hex) : "     21"$
      actual   (nonprintable as hex) : "width: 7\x0awidth: 3\x0awidth: 5\x0awidth: 2\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth:"$
$
Test 386 (X_width_zero_fits) : FAILED.$
    First line of code: {return test("%3X", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "  0"$
      your output     : "width: 3$
width: 5$
width: 2$
width: 7$
width: 3$
width: 5$
width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width:"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "width: 3\x0awidth: 5\x0awidth: 2\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth:"$
$
Test 387 (X_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5X", 52625);}$
      expected return value : 5$
      your return value     : 0$
      expected output : " CD91"$
      your output     : "width: 5$
width: 2$
width: 7$
width: 3$
width: 5$
width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width:"$
      expected (nonprintable as hex) : " CD91"$
      actual   (nonprintable as hex) : "width: 5\x0awidth: 2\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth:"$
$
Test 388 (X_width_pos_nofit) : FAILED.$
    First line of code: {return test("%2X", 94827);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "1726B"$
      your output     : "width: 2$
width: 7$
width: 3$
width: 5$
width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width:"$
      expected (nonprintable as hex) : "1726B"$
      actual   (nonprintable as hex) : "width: 2\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth:"$
$
Test 389 (X_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7X", 33);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "21     "$
      your output     : "width: 7$
width: 3$
width: 5$
width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width:"$
      expected (nonprintable as hex) : "21     "$
      actual   (nonprintable as hex) : "width: 7\x0awidth: 3\x0awidth: 5\x0awidth: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth:"$
$
Test 390 (X_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3X", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "0  "$
      your output     : "width: 3$
width: 5$
width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width:"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "width: 3\x0awidth: 5\x0awidth: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth:"$
$
Test 391 (X_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5X", 52625);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "CD91 "$
      your output     : "width: 5$
width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width:"$
      expected (nonprintable as hex) : "CD91 "$
      actual   (nonprintable as hex) : "width: 5\x0awidth: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth:"$
$
Test 392 (X_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4X", 9648627);}$
      expected return value : 6$
      your return value     : 0$
      expected output : "9339F3"$
      your output     : "width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width:"$
      expected (nonprintable as hex) : "9339F3"$
      actual   (nonprintable as hex) : "width: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth:"$
$
Test 393 (X_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5X", 21);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "00015"$
      your output     : "width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width:"$
      expected (nonprintable as hex) : "00015"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth:"$
$
Test 394 (X_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3X", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "000"$
      your output     : "width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width:"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth:"$
$
Test 395 (X_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4X", 5263);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "148F"$
      your output     : "width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width:"$
      expected (nonprintable as hex) : "148F"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth:"$
$
Test 396 (X_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3X", 938862);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "E536E"$
      your output     : "width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width:"$
      expected (nonprintable as hex) : "E536E"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth:"$
$
Test 397 (X_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05X", 43);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "0002B"$
      your output     : "width: 5$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width:"$
      expected (nonprintable as hex) : "0002B"$
      actual   (nonprintable as hex) : "width: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth:"$
$
Test 398 (X_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03X", 0);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "000"$
      your output     : "width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width:"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "width: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth:"$
$
Test 399 (X_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03X", 698334);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "AA7DE"$
      your output     : "width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width:"$
      expected (nonprintable as hex) : "AA7DE"$
      actual   (nonprintable as hex) : "width: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth:"$
$
Test 400 (X_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5X", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00022"$
      your output     : "width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width:"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth:"$
$
Test 401 (X_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5X", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00000"$
      your output     : "width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width:"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth:"$
$
Test 402 (X_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3X", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "    20B7"$
      your output     : "width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width:"$
      expected (nonprintable as hex) : "    20B7"$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth:"$
$
Test 403 (X_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%2.7X", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0000CC3"$
      your output     : "width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width:"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "width: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth:"$
$
Test 404 (X_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3X", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "1B47"$
      your output     : "width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width:"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "width: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth:"$
$
Test 405 (X_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5X", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00022   "$
      your output     : "width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 406 (X_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5X", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00000   "$
      your output     : "width: 8$
width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 407 (X_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3X", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "20B7    "$
      your output     : "width: 8$
width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "20B7    "$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 408 (X_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-2.7X", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0000CC3"$
      your output     : "width: 2$
width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "width: 2\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 409 (X_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3X", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "1B47"$
      your output     : "width: 3$
width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "width: 3\x0awidth: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 410 (X_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5X", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00022"$
      your output     : "width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 411 (X_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5X", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "   00000"$
      your output     : "width: 8$
width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 412 (X_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3X", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "    20B7"$
      your output     : "width: 8$
width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "    20B7"$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 413 (X_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%02.7X", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0000CC3"$
      your output     : "width: 2$
width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "width: 2\x0awidth: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 414 (X_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3X", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "1B47"$
      your output     : "width: 3$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "width: 3\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 415 (X_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5X", 34);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00022   "$
      your output     : "width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 416 (X_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5X", 0);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "00000   "$
      your output     : "width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 417 (X_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3X", 8375);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "20B7    "$
      your output     : "width: 0$
width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "20B7    "$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 418 (X_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-2.7X", 3267);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0000CC3"$
      your output     : "width: 0$
width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 419 (X_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3X", 6983);}$
      expected return value : 4$
      your return value     : 0$
      expected output : "1B47"$
      your output     : "width: 0$
width: 0$
width: 5$
width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0awidth: 5\x0awidth: 5\x0awidth: 0\x0a"$
$
Test 420 (X_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0X", 0);}$
      expected return value : 0$
      your return value     : 4$
      expected output : ""$
      your output     : "5.0Xwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "5.0Xwidth: 0\x0awidth: 0\x0a"$
$
Test 421 (X_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.X", 0);}$
      expected return value : 0$
      your return value     : 5$
      expected output : ""$
      your output     : "-5.0Xwidth: 0$
width: 5$
width: 5$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "-5.0Xwidth: 0\x0awidth: 5\x0awidth: 5\x0a"$
$
Test 422 (X_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0X", 0);}$
      expected return value : 5$
      your return value     : 5$
      expected output : "     "$
      your output     : "-5.0Xwidth: 5$
width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "-5.0Xwidth: 5\x0awidth: 5\x0a"$
$
Test 423 (X_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.X", 0);}$
      expected return value : 5$
      your return value     : 1$
      expected output : "     "$
      your output     : "pwidth: 5$
width: 5$
width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "pwidth: 5\x0awidth: 5\x0awidth: 5\x0a"$
$
Test 424 (X_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0X", 0);}$
      expected return value : 5$
      your return value     : 1$
      expected output : "     "$
      your output     : "pwidth: 5$
width: 5$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "pwidth: 5\x0awidth: 5\x0a"$
$
Test 425 (X_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.X", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "     "$
      your output     : "width: 5$
width: 0$
"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "width: 5\x0awidth: 0\x0a"$
$
Test 426 (p_null) : FAILED.$
    First line of code: {return test("%p", NULL);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "0x0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0x0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 427 (p_null_width_fit) : FAILED.$
    First line of code: {return test("%5p", NULL);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "  0x0"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "  0x0"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 428 (p_null_width_nofit) : FAILED.$
    First line of code: {return test("%2p", NULL);}$
      expected return value : 3$
      your return value     : 0$
      expected output : "0x0"$
      your output     : "width: 2$
"$
      expected (nonprintable as hex) : "0x0"$
      actual   (nonprintable as hex) : "width: 2\x0a"$
$
Test 429 (p_void) : FAILED.$
    First line of code: {return test("%.p", NULL);}$
      expected return value : 2$
      your return value     : 0$
      expected output : "0x"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0x"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 430 (p_void_width_fit) : FAILED.$
    First line of code: {return test("%5.p", NULL);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "   0x"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "   0x"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 431 (p_void_width_nofit) : FAILED.$
    First line of code: {return test("%2.p", NULL);}$
      expected return value : 2$
      your return value     : 0$
      expected output : "0x"$
      your output     : "width: 2$
"$
      expected (nonprintable as hex) : "0x"$
      actual   (nonprintable as hex) : "width: 2\x0a"$
$
Test 432 (p_ftfc_literal_9w_prec2_undefbehav) : FAILED.$
    First line of code: {return test("%9.2p$
", 1234);}$
      expected return value : 11$
      your return value     : 1$
      expected output : "    0x4d2$
"$
      your output     : "$
width: 9$
"$
      expected (nonprintable as hex) : "    0x4d2\x0a"$
      actual   (nonprintable as hex) : "\x0awidth: 9\x0a"$
$
Test 433 (p_ftfc_literal_2w_prec9_undefbehav) : FAILED.$
    First line of code: {return test("%2.9p$
", 1234);}$
      expected return value : 13$
      your return value     : 1$
      expected output : "0x0000004d2$
"$
      your output     : "$
width: 2$
"$
      expected (nonprintable as hex) : "0x0000004d2\x0a"$
      actual   (nonprintable as hex) : "\x0awidth: 2\x0a"$
$
Test 434 (p_ftfc_zero_prec5_undefbehav) : FAILED.$
    First line of code: {return test("%.5p", 0);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "0x00000"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0x00000"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 435 (p_ftfc_zero_prec0_undefbehav) : FAILED.$
    First line of code: {return test("%.0p", 0);}$
      expected return value : 2$
      your return value     : 0$
      expected output : "0x"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0x"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 436 (p_ftfc_5w_throwswarning) : FAILED.$
    First line of code: {return test("%5p", 0);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "  0x0"$
      your output     : "width: 5$
"$
      expected (nonprintable as hex) : "  0x0"$
      actual   (nonprintable as hex) : "width: 5\x0a"$
$
Test 437 (p_basic) : FAILED.$
    First line of code: {return test("%p%p%p%p%p%p%p%p%p%p%p%p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected return value : 156$
      your return value     : 0$
      expected output : "0x10f9b14e80x10f9b14e90x10f9b14ea0x10f9b14ec0x10f9b14f00x10f9b14f40x10f9b14f80x10f9b15000x10f9b15080x10f9b15100x10f9b15180x10f9b1520"$
      your output     : "width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "0x10f9b14e80x10f9b14e90x10f9b14ea0x10f9b14ec0x10f9b14f00x10f9b14f40x10f9b14f80x10f9b15000x10f9b15080x10f9b15100x10f9b15180x10f9b1520"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 438 (p_width_fit) : FAILED.$
    First line of code: {return test("%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected return value : 1012$
      your return value     : 0$
      expected output : "                                                           0x10f9b14e8                                                           0x10f9b14e9          "$
      your output     : "width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
"$
      expected (nonprintable as hex) : "                                                           0x10f9b14e8                                                           0x10f9b14e9          "$
      actual   (nonprintable as hex) : "width: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0a"$
$
Test 439 (p_width_nofit) : FAILED.$
    First line of code: {return test("%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected return value : 156$
      your return value     : 0$
      expected output : "0x10f9b14e80x10f9b14e90x10f9b14ea0x10f9b14ec0x10f9b14f00x10f9b14f40x10f9b14f80x10f9b15000x10f9b15080x10f9b15100x10f9b15180x10f9b1520"$
      your output     : "width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
"$
      expected (nonprintable as hex) : "0x10f9b14e80x10f9b14e90x10f9b14ea0x10f9b14ec0x10f9b14f00x10f9b14f40x10f9b14f80x10f9b15000x10f9b15080x10f9b15100x10f9b15180x10f9b1520"$
      actual   (nonprintable as hex) : "width: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0a"$
$
Test 440 (p_width_16) : FAILED.$
    First line of code: {return test("%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected return value : 222$
      your return value     : 0$
      expected output : "     0x10f9b14e8     0x10f9b14e9     0x10f9b14ea     0x10f9b14ec     0x10f9b14f0     0x10f9b14f4     0x10f9b14f8     0x10f9b1500     0x10f9b1508     0"$
      your output     : "width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
"$
      expected (nonprintable as hex) : "     0x10f9b14e8     0x10f9b14e9     0x10f9b14ea     0x10f9b14ec     0x10f9b14f0     0x10f9b14f4     0x10f9b14f8     0x10f9b1500     0x10f9b1508     0"$
      actual   (nonprintable as hex) : "width: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0a"$
$
Test 441 (p_width_8) : FAILED.$
    First line of code: {return test("%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected return value : 156$
      your return value     : 0$
      expected output : "0x10f9b14e80x10f9b14e90x10f9b14ea0x10f9b14ec0x10f9b14f00x10f9b14f40x10f9b14f80x10f9b15000x10f9b15080x10f9b15100x10f9b15180x10f9b1520"$
      your output     : "width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
"$
      expected (nonprintable as hex) : "0x10f9b14e80x10f9b14e90x10f9b14ea0x10f9b14ec0x10f9b14f00x10f9b14f40x10f9b14f80x10f9b15000x10f9b15080x10f9b15100x10f9b15180x10f9b1520"$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0a"$
$
Test 442 (p_width_32) : FAILED.$
    First line of code: {return test("%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected return value : 455$
      your return value     : 0$
      expected output : "                     0x10f9b14e8                     0x10f9b14e9                     0x10f9b14ea                     0x10f9b14ec                     0"$
      your output     : "width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
"$
      expected (nonprintable as hex) : "                     0x10f9b14e8                     0x10f9b14e9                     0x10f9b14ea                     0x10f9b14ec                     0"$
      actual   (nonprintable as hex) : "width: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0a"$
$
Test 443 (p_width_fit_lj) : FAILED.$
    First line of code: {return test("%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected return value : 1012$
      your return value     : 0$
      expected output : "0x10f9b14e8                                                           0x10f9b14e9                                                           0x10f9b14e"$
      your output     : "width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
width: 70$
"$
      expected (nonprintable as hex) : "0x10f9b14e8                                                           0x10f9b14e9                                                           0x10f9b14e"$
      actual   (nonprintable as hex) : "width: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0awidth: 70\x0a"$
$
Test 444 (p_width_nofit_lj) : FAILED.$
    First line of code: {return test("%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected return value : 156$
      your return value     : 0$
      expected output : "0x10f9b14e80x10f9b14e90x10f9b14ea0x10f9b14ec0x10f9b14f00x10f9b14f40x10f9b14f80x10f9b15000x10f9b15080x10f9b15100x10f9b15180x10f9b1520"$
      your output     : "width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
width: 5$
"$
      expected (nonprintable as hex) : "0x10f9b14e80x10f9b14e90x10f9b14ea0x10f9b14ec0x10f9b14f00x10f9b14f40x10f9b14f80x10f9b15000x10f9b15080x10f9b15100x10f9b15180x10f9b1520"$
      actual   (nonprintable as hex) : "width: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0awidth: 5\x0a"$
$
Test 445 (p_width_16_lj) : FAILED.$
    First line of code: {return test("%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected return value : 222$
      your return value     : 0$
      expected output : "0x10f9b14e8     0x10f9b14e9     0x10f9b14ea     0x10f9b14ec     0x10f9b14f0     0x10f9b14f4     0x10f9b14f8     0x10f9b1500     0x10f9b1508     0x10f9"$
      your output     : "width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
width: 16$
"$
      expected (nonprintable as hex) : "0x10f9b14e8     0x10f9b14e9     0x10f9b14ea     0x10f9b14ec     0x10f9b14f0     0x10f9b14f4     0x10f9b14f8     0x10f9b1500     0x10f9b1508     0x10f9"$
      actual   (nonprintable as hex) : "width: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0awidth: 16\x0a"$
$
Test 446 (p_width_8_lj) : FAILED.$
    First line of code: {return test("%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected return value : 156$
      your return value     : 0$
      expected output : "0x10f9b14e80x10f9b14e90x10f9b14ea0x10f9b14ec0x10f9b14f00x10f9b14f40x10f9b14f80x10f9b15000x10f9b15080x10f9b15100x10f9b15180x10f9b1520"$
      your output     : "width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
width: 8$
"$
      expected (nonprintable as hex) : "0x10f9b14e80x10f9b14e90x10f9b14ea0x10f9b14ec0x10f9b14f00x10f9b14f40x10f9b14f80x10f9b15000x10f9b15080x10f9b15100x10f9b15180x10f9b1520"$
      actual   (nonprintable as hex) : "width: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0awidth: 8\x0a"$
$
Test 447 (p_width_32_lj) : FAILED.$
    First line of code: {return test("%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected return value : 455$
      your return value     : 0$
      expected output : "0x10f9b14e8                     0x10f9b14e9                     0x10f9b14ea                     0x10f9b14ec                     0x10f9b14f0           "$
      your output     : "width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
width: 32$
"$
      expected (nonprintable as hex) : "0x10f9b14e8                     0x10f9b14e9                     0x10f9b14ea                     0x10f9b14ec                     0x10f9b14f0           "$
      actual   (nonprintable as hex) : "width: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0awidth: 32\x0a"$
$
Test 448 (c_allprintable_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%      expected return value : 105$
      your return value     : 0$
      expected output : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~^?"$
      your output     : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~^?width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f"$
      actual   (nonprintable as hex) : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fwidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 449 (c_1_31_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",(char)1,(char)2,(char)3,(char)4,(char)5,(char)6      expected return value : 34$
      your return value     : 0$
      expected output : "^A^B^C^D^E^F^G^H	$
^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_"$
      your output     : "^A^B^C^D^E^F^G^H	$
^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
width: 0$
wi"$
      expected (nonprintable as hex) : "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"$
      actual   (nonprintable as hex) : "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1fwidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awi"$
$
Test 450 (c_128_255_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%      expected return value : 151$
      your return value     : 0$
      expected output : "M-^@M-^AM-^BM-^CM-^DM-^EM-^FM-^GM-^HM-^IM-^JM-^KM-^LM-^MM-^NM-^OM-^PM-^QM-^RM-^SM-^TM-^UM-^VM-^WM-^XM-^YM-^ZM-^[M-^\M-^]M-^^M-^_ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"$
      your output     : "M-^@M-^AM-^BM-^CM-^DM-^EM-^FM-^GM-^HM-^IM-^JM-^KM-^LM-^MM-^NM-^OM-^PM-^QM-^RM-^SM-^TM-^UM-^VM-^WM-^XM-^YM-^ZM-^[M-^\M-^]M-^^M-^_ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿwidth: 0$
width: 0$
widt"$
      expected (nonprintable as hex) : "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"$
      actual   (nonprintable as hex) : "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xffwidth: 0\x0awidth: 0\x0awidt"$
$
Test 451 (c_allprintable_width) : FAILED.$
    First line of code: {return test("%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c      expected return value : 286$
      your return value     : 0$
      expected output : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      your output     : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~^?width: 1$
width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
"$
      expected (nonprintable as hex) : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      actual   (nonprintable as hex) : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fwidth: 1\x0awidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0a"$
$
Test 452 (c_1_31_width) : FAILED.$
    First line of code: {return test("%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c",(char)1,(char)2,      expected return value : 86$
      your return value     : 0$
      expected output : " ^A  ^B   ^C^D ^E  ^F   ^G^H 	  $
   ^K^L ^M  ^N   ^O^P ^Q  ^R   ^S^T ^U  ^V   ^W^X ^Y  ^Z   ^[^\ ^]  ^^   ^_"$
      your output     : "^A^B^C^D^E^F^G^H	$
^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
wi"$
      expected (nonprintable as hex) : " \x01  \x02   \x03\x04 \x05  \x06   \x07\x08 \x09  \x0a   \x0b\x0c \x0d  \x0e   \x0f\x10 \x11  \x12   \x13\x14 \x15  \x16   \x17\x18 \x19  \x1a   \x1b\x1c \x1d  \x1e   \x1f"$
      actual   (nonprintable as hex) : "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1fwidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awi"$
$
Test 453 (c_128_255_width) : FAILED.$
    First line of code: {return test("%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c      expected return value : 385$
      your return value     : 0$
      expected output : "M-^@ M-^A  M-^B   M-^CM-^D M-^E  M-^F   M-^GM-^H M-^I  M-^J   M-^KM-^L M-^M  M-^N   M-^OM-^P M-^Q  M-^R   M-^SM-^T M-^U  M-^V   M-^WM-^X M-^Y  M-^Z   M-^[M-^\ M-^]  M-^^   M-^_  ¡  ¢   £¤ ¥  ¦   §¨ ©  ª   «¬ ­  ®   ¯° ±  ²   ³´ µ  ¶   ·¸ ¹  º   »"$
      your output     : "M-^@M-^AM-^BM-^CM-^DM-^EM-^FM-^GM-^HM-^IM-^JM-^KM-^LM-^MM-^NM-^OM-^PM-^QM-^RM-^SM-^TM-^UM-^VM-^WM-^XM-^YM-^ZM-^[M-^\M-^]M-^^M-^_ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿwidth: 1$
width: 2$
widt"$
      expected (nonprintable as hex) : "\x80 \x81  \x82   \x83\x84 \x85  \x86   \x87\x88 \x89  \x8a   \x8b\x8c \x8d  \x8e   \x8f\x90 \x91  \x92   \x93\x94 \x95  \x96   \x97\x98 \x99  \x9a   \x9b\x9c \x9d  \x9e   \x9f\xa0 \xa1  \xa2   \xa3\xa4 \xa5  \xa6   \xa7\xa8 \xa9  \xaa   \xab\xac \xad  \xae   \xaf\xb0 \xb1  \xb2   \xb3\xb4 \xb5  \xb6   \xb7\xb8 \xb9  \xba   \xbb"$
      actual   (nonprintable as hex) : "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xffwidth: 1\x0awidth: 2\x0awidt"$
$
Test 454 (c_allprintable_width_lj) : FAILED.$
    First line of code: {return test("%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1      expected return value : 286$
      your return value     : 0$
      expected output : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      your output     : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~^?width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
width: 3$
"$
      expected (nonprintable as hex) : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      actual   (nonprintable as hex) : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fwidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awidth: 3\x0a"$
$
Test 455 (c_1_31_width_lj) : FAILED.$
    First line of code: {return test("%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1      expected return value : 86$
      your return value     : 0$
      expected output : "^A ^B  ^C   ^D^E ^F  ^G   ^H	 $
  ^K   ^L^M ^N  ^O   ^P^Q ^R  ^S   ^T^U ^V  ^W   ^X^Y ^Z  ^[   ^\^] ^^  ^_   "$
      your output     : "^A^B^C^D^E^F^G^H	$
^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
width: 3$
width: 4$
width: 1$
width: 2$
wi"$
      expected (nonprintable as hex) : "\x01 \x02  \x03   \x04\x05 \x06  \x07   \x08\x09 \x0a  \x0b   \x0c\x0d \x0e  \x0f   \x10\x11 \x12  \x13   \x14\x15 \x16  \x17   \x18\x19 \x1a  \x1b   \x1c\x1d \x1e  \x1f   "$
      actual   (nonprintable as hex) : "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1fwidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awidth: 3\x0awidth: 4\x0awidth: 1\x0awidth: 2\x0awi"$
$
Test 456 (c_128_255_width_lj) : FAILED.$
    First line of code: {return test("%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4      expected return value : 385$
      your return value     : 0$
      expected output : "M-^@M-^A M-^B  M-^C   M-^DM-^E M-^F  M-^G   M-^HM-^I M-^J  M-^K   M-^LM-^M M-^N  M-^O   M-^PM-^Q M-^R  M-^S   M-^TM-^U M-^V  M-^W   M-^XM-^Y M-^Z  M-^[   M-^\M-^] M-^^  M-^_    ¡ ¢  £   ¤¥ ¦  §   ¨© ª  «   ¬­ ®  ¯   °± ²  ³   ´µ ¶  ·   ¸¹ º  »   "$
      your output     : "M-^@M-^AM-^BM-^CM-^DM-^EM-^FM-^GM-^HM-^IM-^JM-^KM-^LM-^MM-^NM-^OM-^PM-^QM-^RM-^SM-^TM-^UM-^VM-^WM-^XM-^YM-^ZM-^[M-^\M-^]M-^^M-^_ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿwidth: 1$
width: 2$
widt"$
      expected (nonprintable as hex) : "\x80\x81 \x82  \x83   \x84\x85 \x86  \x87   \x88\x89 \x8a  \x8b   \x8c\x8d \x8e  \x8f   \x90\x91 \x92  \x93   \x94\x95 \x96  \x97   \x98\x99 \x9a  \x9b   \x9c\x9d \x9e  \x9f   \xa0\xa1 \xa2  \xa3   \xa4\xa5 \xa6  \xa7   \xa8\xa9 \xaa  \xab   \xac\xad \xae  \xaf   \xb0\xb1 \xb2  \xb3   \xb4\xb5 \xb6  \xb7   \xb8\xb9 \xba  \xbb   "$
      actual   (nonprintable as hex) : "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xffwidth: 1\x0awidth: 2\x0awidt"$
$
Test 457 (c_nullterm_basic) : FAILED.$
    First line of code: {return test("%c", '$
      expected return value : 1$
      your return value     : 0$
      expected output : "^@"$
      your output     : "^@width: 0$
"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00width: 0\x0a"$
$
Test 458 (c_nullterm_5w) : FAILED.$
    First line of code: {return test("%5c", '$
      expected return value : 5$
      your return value     : 0$
      expected output : "    ^@"$
      your output     : "^@width: 5$
"$
      expected (nonprintable as hex) : "    \x00"$
      actual   (nonprintable as hex) : "\x00width: 5\x0a"$
$
Test 459 (c_nullterm_5wlj) : FAILED.$
    First line of code: {return test("%-5c", '$
      expected return value : 5$
      your return value     : 0$
      expected output : "^@    "$
      your output     : "^@width: 5$
"$
      expected (nonprintable as hex) : "\x00    "$
      actual   (nonprintable as hex) : "\x00width: 5\x0a"$
$
Test 460 (mix_successive_0) : FAILED.$
    First line of code: {return ( test("%c", mx_c) + test("%u", mx_u));}$
      expected return value : 4$
      your return value     : 0$
      expected output : "G235"$
      your output     : "Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "G235"$
      actual   (nonprintable as hex) : "Gwidth: 0\x0awidth: 0\x0a"$
$
Test 461 (mix_successive_4) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%i", mx_i));}$
      expected return value : 4$
      your return value     : 0$
      expected output : "eb42"$
      your output     : "width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "eb42"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0a"$
$
Test 462 (mix_successive_6) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected return value : 15$
      your return value     : 14$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!Gwidth: 0\x0awidth: 0\x0a"$
$
Test 463 (mix_successive_10) : FAILED.$
    First line of code: {return ( test("%u", mx_u) + test("%s", mx_s));}$
      expected return value : 17$
      your return value     : 14$
      expected output : "235Hello, World!"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "235Hello, World!"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 464 (mix_successive_16) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%x", mx_u));}$
      expected return value : 16$
      your return value     : 14$
      expected output : "Hello, World!eb"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Hello, World!eb"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 465 (mix_successive_20) : FAILED.$
    First line of code: {return ( test("%p", &mx_i) + test("%s", mx_s));}$
      expected return value : 26$
      your return value     : 14$
      expected output : "0x10f9ae314Hello, World!"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "0x10f9ae314Hello, World!"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 466 (mix_successive_21) : FAILED.$
    First line of code: {return ( test("%X", mx_u) + test("%x", mx_u));}$
      expected return value : 4$
      your return value     : 0$
      expected output : "EBeb"$
      your output     : "width: 0$
width: 7$
width: 3$
width: 5$
width: 2$
width: 7$
width: 3$
width: 5$
width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width:"$
      expected (nonprintable as hex) : "EBeb"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 2\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth:"$
$
Test 467 (mix_successive_28) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%u", mx_u));}$
      expected return value : 5$
      your return value     : 0$
      expected output : "42235"$
      your output     : "width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "42235"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0a"$
$
Test 468 (mix_successive_30) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%u", mx_u));}$
      expected return value : 17$
      your return value     : 14$
      expected output : "Hello, World!235"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Hello, World!235"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 469 (mix_successive_31) : FAILED.$
    First line of code: {return ( test("%X", mx_u) + test("%c", mx_c));}$
      expected return value : 3$
      your return value     : 0$
      expected output : "EBG"$
      your output     : "Gwidth: 0$
width: 7$
width: 3$
width: 5$
width: 2$
width: 7$
width: 3$
width: 5$
width: 4$
width: 0$
width: 0$
width: 0$
width: 5$
width: 3$
width: 8$
width: 8$
width"$
      expected (nonprintable as hex) : "EBG"$
      actual   (nonprintable as hex) : "Gwidth: 0\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 2\x0awidth: 7\x0awidth: 3\x0awidth: 5\x0awidth: 4\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0awidth: 5\x0awidth: 3\x0awidth: 8\x0awidth: 8\x0awidth"$
$
Test 470 (mix_successive_32) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%u", mx_u));}$
      expected return value : 5$
      your return value     : 0$
      expected output : "eb235"$
      your output     : "width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "eb235"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0a"$
$
Test 471 (mix_successive_39) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%c", mx_c));}$
      expected return value : 3$
      your return value     : 0$
      expected output : "42G"$
      your output     : "Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "42G"$
      actual   (nonprintable as hex) : "Gwidth: 0\x0awidth: 0\x0a"$
$
Test 472 (mix_successive_40) : FAILED.$
    First line of code: {return ( test("%c", mx_c) + test("%x", mx_u));}$
      expected return value : 3$
      your return value     : 0$
      expected output : "Geb"$
      your output     : "Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Geb"$
      actual   (nonprintable as hex) : "Gwidth: 0\x0awidth: 0\x0a"$
$
Test 473 (mix_successive_42) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%s", mx_s));}$
      expected return value : 16$
      your return value     : 14$
      expected output : "ebHello, World!"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "ebHello, World!"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 474 (mix_successive_43) : FAILED.$
    First line of code: {return ( test("%u", mx_u) + test("%x", mx_u));}$
      expected return value : 5$
      your return value     : 0$
      expected output : "235eb"$
      your output     : "width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "235eb"$
      actual   (nonprintable as hex) : "width: 0\x0awidth: 0\x0a"$
$
Test 475 (mix_successive_45) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected return value : 15$
      your return value     : 14$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!Gwidth: 0\x0awidth: 0\x0a"$
$
Test 476 (mix_successive_46) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%s", mx_s));}$
      expected return value : 16$
      your return value     : 14$
      expected output : "42Hello, World!"$
      your output     : "Hello, World!width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "42Hello, World!"$
      actual   (nonprintable as hex) : "Hello, World!width: 0\x0awidth: 0\x0a"$
$
Test 477 (mix_successive_61) : FAILED.$
    First line of code: {return ( test("%p", &mx_i) + test("%c", mx_c));}$
      expected return value : 13$
      your return value     : 0$
      expected output : "0x10f9ae314G"$
      your output     : "Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "0x10f9ae314G"$
      actual   (nonprintable as hex) : "Gwidth: 0\x0awidth: 0\x0a"$
$
Test 478 (mix_successive_64) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected return value : 15$
      your return value     : 14$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!Gwidth: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!Gwidth: 0\x0awidth: 0\x0a"$
$
Test 501 (nocrash_nullarg_2) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%0s", NULL); }$
    SEGFAULT$
$
Test 504 (nocrash_nullarg_5) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%-s", NULL); }$
    SEGFAULT$
$
Test 506 (nocrash_nullarg_9) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%23s", NULL); }$
    SEGFAULT$
$
Test 507 (nocrash_nullarg_10) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%.s", NULL); }$
    SEGFAULT$
$
Test 515 (nocrash_nullarg_18) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%b", NULL); }$
    SEGFAULT$
$
Test 520 (nocrash_nullarg_23) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%s", NULL); }$
    SEGFAULT$
$
Test 526 (nocrash_mandatory_wformat_undefbehav_04) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%021s", NULL);}$
    SEGFAULT$
$
Test 527 (nocrash_mandatory_wformat_undefbehav_05) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%02s", NULL);}$
    SEGFAULT$
$
Test 528 (nocrash_mandatory_wformat_undefbehav_06) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%-021s", NULL);}$
    SEGFAULT$
$
Test 529 (nocrash_mandatory_wformat_undefbehav_07) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%-03s", NULL);}$
    SEGFAULT$
$
Test 616 (nocrash_mandatory_f_size_h) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%hf", 42.5);}$
    SEGFAULT$
$
Test 617 (nocrash_mandatory_f_size_ll) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%llf", 42.5);}$
    SEGFAULT$
$
Test 618 (nocrash_mandatory_f_size_lll) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%lllf", 42.5);}$
    SEGFAULT$
$
Test 619 (nocrash_mandatory_f_size_llll) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%llllf", 42.5);}$
    SEGFAULT$
$
Test 620 (nocrash_mandatory_f_size_LL) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%LLf", 42.5);}$
    SEGFAULT$
$
Test 621 (nocrash_mandatory_f_size_Ll) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%Llf", 42.5);}$
    SEGFAULT$
$
Test 622 (nocrash_mandatory_f_size_lL) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%lLf", 42.5);}$
    SEGFAULT$
$
Test 623 (nocrash_mandatory_f_lj_nowidth) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%-f", 42.5);}$
    SEGFAULT$
$
Test 624 (moul_s_1) : FAILED.$
    First line of code: {return test(" pouet %s !!", "camembert");}$
      expected return value : 20$
      your return value     : 20$
      expected output : " pouet camembert !!"$
      your output     : " pouet camembert !!width: 0$
"$
      expected (nonprintable as hex) : " pouet camembert !!"$
      actual   (nonprintable as hex) : " pouet camembert !!width: 0\x0a"$
$
Test 625 (moul_s_2) : FAILED.$
    First line of code: {return test("%s !", "Ceci n'est pas un $
      expected return value : 22$
      your return value     : 22$
      expected output : "Ceci n'est pas un  !"$
      your output     : "Ceci n'est pas un  !width: 0$
"$
      expected (nonprintable as hex) : "Ceci n'est pas un  !"$
      actual   (nonprintable as hex) : "Ceci n'est pas un  !width: 0\x0a"$
$
Test 626 (moul_s_3) : FAILED.$
    First line of code: {return test("%s!", "Ceci n'est toujours pas un exercice !");}$
      expected return value : 41$
      your return value     : 41$
      expected output : "Ceci n'est toujours pas un exercice !!"$
      your output     : "Ceci n'est toujours pas un exercice !!width: 0$
"$
      expected (nonprintable as hex) : "Ceci n'est toujours pas un exercice !!"$
      actual   (nonprintable as hex) : "Ceci n'est toujours pas un exercice !!width: 0\x0a"$
$
Test 627 (moul_s_4) : FAILED.$
    First line of code: {char *str = NULL; return test("%s!", str);}$
    SEGFAULT$
$
Test 628 (moul_s_5_this_ones_a_doozy) : FAILED.$
    First line of code: {return test("%s",$
      expected return value : 11328$
      your return value     : 11328$
      expected output : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdecÅM-^Surc'Ã©taitunsoir"$
      your output     : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdecÅM-^Surc'Ã©taitunsoir"$
      expected (nonprintable as hex) : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdec\xc5\x93urc'\xc3\xa9taitunsoir"$
      actual   (nonprintable as hex) : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdec\xc5\x93urc'\xc3\xa9taitunsoir"$
$
Test 629 (moul_d_1) : FAILED.$
    First line of code: {return test("%d", 42);}$
      expected return value : 2$
      your return value     : 2$
      expected output : "42"$
      your output     : "42width: 0$
"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "42width: 0\x0a"$
$
Test 630 (moul_d_2) : FAILED.$
    First line of code: {return test("Kashim a %d histoires Ã  raconter", 1001);}$
      expected return value : 38$
      your return value     : 38$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a 1001 histoires Ã  raconterwidth: 0$
"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconterwidth: 0\x0a"$
$
Test 631 (moul_d_3) : FAILED.$
    First line of code: {return test("Il fait au moins %d$
", -8000);}$
      expected return value : 25$
      your return value     : 25$
      expected output : "Il fait au moins -8000$
"$
      your output     : "Il fait au moins -8000$
width: 0$
"$
      expected (nonprintable as hex) : "Il fait au moins -8000\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins -8000\x0awidth: 0\x0a"$
$
Test 632 (moul_d_4) : FAILED.$
    First line of code: {return test("%d", -0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "0"$
      your output     : "0width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0width: 0\x0a"$
$
Test 633 (moul_d_5) : FAILED.$
    First line of code: {return test("%d", 0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "0"$
      your output     : "0width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0width: 0\x0a"$
$
Test 634 (moul_d_6) : FAILED.$
    First line of code: {return test("%d", INT_MAX);}$
      expected return value : 11$
      your return value     : 11$
      expected output : "2147483647"$
      your output     : "2147483647width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647width: 0\x0a"$
$
Test 635 (moul_d_7) : FAILED.$
    First line of code: {return test("%d", INT_MIN);}$
      expected return value : 12$
      your return value     : 12$
      expected output : "-2147483648"$
      your output     : "-2147483648width: 0$
"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648width: 0\x0a"$
$
Test 636 (moul_d_8) : FAILED.$
    First line of code: {return test("%d", INT_MIN - 1);}$
      expected return value : 11$
      your return value     : 11$
      expected output : "2147483647"$
      your output     : "2147483647width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647width: 0\x0a"$
$
Test 637 (moul_d_9) : FAILED.$
    First line of code: {return test("%d", INT_MAX + 1);}$
      expected return value : 12$
      your return value     : 12$
      expected output : "-2147483648"$
      your output     : "-2147483648width: 0$
"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648width: 0\x0a"$
$
Test 638 (moul_d_10) : FAILED.$
    First line of code: {return test("%%d 0000042 == |%d|$
", 0000042);}$
      expected return value : 20$
      your return value     : 19$
      expected output : "%d 0000042 == |34|$
"$
      your output     : "d 0000042 == |34|$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "d 0000042 == |34|\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 639 (moul_d_11) : FAILED.$
    First line of code: {return test("%%d 	 == |%d|$
", '	');}$
      expected return value : 13$
      your return value     : 12$
      expected output : "%d 	 == |9|$
"$
      your output     : "d 	 == |9|$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%d \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "d \x09 == |9|\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 640 (moul_d_12) : FAILED.$
    First line of code: {return test("%%d Lydie == |%d|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 18$
      expected output : "%d Lydie == |503|$
"$
      your output     : "d Lydie == |503|$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%d Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "d Lydie == |503|\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 641 (moul_mix_1) : FAILED.$
    First line of code: {int r00 = 0; return test("Lalalala, %d%% des gens qui parlent Ã  Ly adorent %s. Ou Presque. %p", 100, "Ly", &r00);}$
      expected return value : 88$
      your return value     : 71$
      expected output : "Lalalala, 100% des gens qui parlent Ã  Ly adorent Ly. Ou Presque. 0x7ffee02894ec"$
      your output     : "Lalalala, 100 des gens qui parlent Ã  Ly adorent Ly. Ou Presque. width: 0$
width: 0$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "Lalalala, 100% des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. 0x7ffee02894ec"$
      actual   (nonprintable as hex) : "Lalalala, 100 des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. width: 0\x0awidth: 0\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 642 (moul_c_1) : FAILED.$
    First line of code: {return test("%c", 42);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "*"$
      your output     : "*width: 0$
"$
      expected (nonprintable as hex) : "*"$
      actual   (nonprintable as hex) : "*width: 0\x0a"$
$
Test 643 (moul_c_2) : FAILED.$
    First line of code: {return test("Kashim a %c histoires Ã  raconter", 1001);}$
      expected return value : 35$
      your return value     : 34$
      expected output : "Kashim a é histoires Ã  raconter"$
      your output     : "Kashim a é histoires Ã  raconterwidth: 0$
"$
      expected (nonprintable as hex) : "Kashim a \xe9 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a \xe9 histoires \xc3\xa0 raconterwidth: 0\x0a"$
$
Test 644 (moul_c_3) : FAILED.$
    First line of code: {return test("Il fait au moins %c$
", -8000);}$
      expected return value : 20$
      your return value     : 19$
      expected output : "Il fait au moins À$
"$
      your output     : "Il fait au moins À$
width: 0$
"$
      expected (nonprintable as hex) : "Il fait au moins \xc0\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins \xc0\x0awidth: 0\x0a"$
$
Test 645 (moul_c_4) : FAILED.$
    First line of code: {return test("%c", -0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "^@"$
      your output     : "^@width: 0$
"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00width: 0\x0a"$
$
Test 646 (moul_c_5) : FAILED.$
    First line of code: {return test("%c", 0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "^@"$
      your output     : "^@width: 0$
"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00width: 0\x0a"$
$
Test 647 (moul_c_5b) : FAILED.$
    First line of code: {return test("%c$
", INT_MAX);}$
      expected return value : 2$
      your return value     : 1$
      expected output : "ÿ$
"$
      your output     : "ÿ$
width: 0$
"$
      expected (nonprintable as hex) : "\xff\x0a"$
      actual   (nonprintable as hex) : "\xff\x0awidth: 0\x0a"$
$
Test 648 (moul_c_6) : FAILED.$
    First line of code: {return test("%c$
", 'c');}$
      expected return value : 2$
      your return value     : 1$
      expected output : "c$
"$
      your output     : "c$
width: 0$
"$
      expected (nonprintable as hex) : "c\x0a"$
      actual   (nonprintable as hex) : "c\x0awidth: 0\x0a"$
$
Test 649 (moul_c_7) : FAILED.$
    First line of code: {return test("%c$
", '$
');}$
      expected return value : 2$
      your return value     : 1$
      expected output : "$
$
"$
      your output     : "$
$
width: 0$
"$
      expected (nonprintable as hex) : "\x0a\x0a"$
      actual   (nonprintable as hex) : "\x0a\x0awidth: 0\x0a"$
$
Test 650 (moul_c_8) : FAILED.$
    First line of code: {return test("%c", 'l');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "l"$
      your output     : "lwidth: 0$
"$
      expected (nonprintable as hex) : "l"$
      actual   (nonprintable as hex) : "lwidth: 0\x0a"$
$
Test 651 (moul_c_9) : FAILED.$
    First line of code: {return test("%c", 'y');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "y"$
      your output     : "ywidth: 0$
"$
      expected (nonprintable as hex) : "y"$
      actual   (nonprintable as hex) : "ywidth: 0\x0a"$
$
Test 652 (moul_c_10) : FAILED.$
    First line of code: {return test("%c", ' ');}$
      expected return value : 1$
      your return value     : 0$
      expected output : " "$
      your output     : " width: 0$
"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " width: 0\x0a"$
$
Test 653 (moul_c_11) : FAILED.$
    First line of code: {return test("%c", 'e');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "e"$
      your output     : "ewidth: 0$
"$
      expected (nonprintable as hex) : "e"$
      actual   (nonprintable as hex) : "ewidth: 0\x0a"$
$
Test 654 (moul_c_12) : FAILED.$
    First line of code: {return test("%c", 's');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "s"$
      your output     : "swidth: 0$
"$
      expected (nonprintable as hex) : "s"$
      actual   (nonprintable as hex) : "swidth: 0\x0a"$
$
Test 655 (moul_c_13) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "t"$
      your output     : "twidth: 0$
"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "twidth: 0\x0a"$
$
Test 656 (moul_c_14) : FAILED.$
    First line of code: {return test("%c", ' ');}$
      expected return value : 1$
      your return value     : 0$
      expected output : " "$
      your output     : " width: 0$
"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " width: 0\x0a"$
$
Test 657 (moul_c_15) : FAILED.$
    First line of code: {return test("%c", 'f');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "f"$
      your output     : "fwidth: 0$
"$
      expected (nonprintable as hex) : "f"$
      actual   (nonprintable as hex) : "fwidth: 0\x0a"$
$
Test 658 (moul_c_16) : FAILED.$
    First line of code: {return test("%c", 'a');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "a"$
      your output     : "awidth: 0$
"$
      expected (nonprintable as hex) : "a"$
      actual   (nonprintable as hex) : "awidth: 0\x0a"$
$
Test 659 (moul_c_17) : FAILED.$
    First line of code: {return test("%c", 'n');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "n"$
      your output     : "nwidth: 0$
"$
      expected (nonprintable as hex) : "n"$
      actual   (nonprintable as hex) : "nwidth: 0\x0a"$
$
Test 660 (moul_c_18) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "t"$
      your output     : "twidth: 0$
"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "twidth: 0\x0a"$
$
Test 661 (moul_c_19) : FAILED.$
    First line of code: {return test("%c", 'a');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "a"$
      your output     : "awidth: 0$
"$
      expected (nonprintable as hex) : "a"$
      actual   (nonprintable as hex) : "awidth: 0\x0a"$
$
Test 662 (moul_c_20) : FAILED.$
    First line of code: {return test("%c", 's');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "s"$
      your output     : "swidth: 0$
"$
      expected (nonprintable as hex) : "s"$
      actual   (nonprintable as hex) : "swidth: 0\x0a"$
$
Test 663 (moul_c_21) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "t"$
      your output     : "twidth: 0$
"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "twidth: 0\x0a"$
$
Test 664 (moul_c_22) : FAILED.$
    First line of code: {return test("%c", 'i');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "i"$
      your output     : "iwidth: 0$
"$
      expected (nonprintable as hex) : "i"$
      actual   (nonprintable as hex) : "iwidth: 0\x0a"$
$
Test 665 (moul_c_23) : FAILED.$
    First line of code: {return test("%c", 'q');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "q"$
      your output     : "qwidth: 0$
"$
      expected (nonprintable as hex) : "q"$
      actual   (nonprintable as hex) : "qwidth: 0\x0a"$
$
Test 666 (moul_c_24) : FAILED.$
    First line of code: {return test("%c", 'u');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "u"$
      your output     : "uwidth: 0$
"$
      expected (nonprintable as hex) : "u"$
      actual   (nonprintable as hex) : "uwidth: 0\x0a"$
$
Test 667 (moul_c_25) : FAILED.$
    First line of code: {return test("%c", 'e');}$
      expected return value : 1$
      your return value     : 0$
      expected output : "e"$
      your output     : "ewidth: 0$
"$
      expected (nonprintable as hex) : "e"$
      actual   (nonprintable as hex) : "ewidth: 0\x0a"$
$
Test 668 (moul_c_26) : FAILED.$
    First line of code: {return test("%c$
", '!');}$
      expected return value : 2$
      your return value     : 1$
      expected output : "!$
"$
      your output     : "!$
width: 0$
"$
      expected (nonprintable as hex) : "!\x0a"$
      actual   (nonprintable as hex) : "!\x0awidth: 0\x0a"$
$
Test 669 (moul_c_27) : FAILED.$
    First line of code: {return test("%c$
", '^M');}$
      expected return value : 2$
      your return value     : 1$
      expected output : "^M$
"$
      your output     : "^M$
width: 0$
"$
      expected (nonprintable as hex) : "\x0d\x0a"$
      actual   (nonprintable as hex) : "\x0d\x0awidth: 0\x0a"$
$
Test 670 (moul_c_28) : FAILED.$
    First line of code: {return test("%c$
", '	');}$
      expected return value : 2$
      your return value     : 1$
      expected output : "	$
"$
      your output     : "	$
width: 0$
"$
      expected (nonprintable as hex) : "\x09\x0a"$
      actual   (nonprintable as hex) : "\x09\x0awidth: 0\x0a"$
$
Test 671 (moul_i_1) : FAILED.$
    First line of code: {return test("%i", 42);}$
      expected return value : 2$
      your return value     : 0$
      expected output : "42"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 672 (moul_i_2) : FAILED.$
    First line of code: {return test("Kashim a %i histoires Ã  raconter", 1001);}$
      expected return value : 38$
      your return value     : 34$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a  histoires Ã  raconterwidth: 0$
"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a  histoires \xc3\xa0 raconterwidth: 0\x0a"$
$
Test 673 (moul_i_3) : FAILED.$
    First line of code: {return test("Il fait au moins %i$
", -8000);}$
      expected return value : 25$
      your return value     : 19$
      expected output : "Il fait au moins -8000$
"$
      your output     : "Il fait au moins $
width: 0$
"$
      expected (nonprintable as hex) : "Il fait au moins -8000\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins \x0awidth: 0\x0a"$
$
Test 674 (moul_i_4) : FAILED.$
    First line of code: {return test("%i", -0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 675 (moul_i_5) : FAILED.$
    First line of code: {return test("%i", 0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 676 (moul_i_6) : FAILED.$
    First line of code: {return test("%i", INT_MAX);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "2147483647"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 677 (moul_i_7) : FAILED.$
    First line of code: {return test("%i", INT_MIN);}$
      expected return value : 12$
      your return value     : 0$
      expected output : "-2147483648"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 678 (moul_i_8) : FAILED.$
    First line of code: {return test("%i", INT_MIN - 1);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "2147483647"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 679 (moul_i_9) : FAILED.$
    First line of code: {return test("%i", INT_MAX + 1);}$
      expected return value : 12$
      your return value     : 0$
      expected output : "-2147483648"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 680 (moul_i_10) : FAILED.$
    First line of code: {return test("%%i 0000042 == |%i|$
", 0000042);}$
      expected return value : 20$
      your return value     : 17$
      expected output : "%i 0000042 == |34|$
"$
      your output     : "i 0000042 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%i 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "i 0000042 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 681 (moul_i_11) : FAILED.$
    First line of code: {return test("%%i 	 == |%i|$
", '	');}$
      expected return value : 13$
      your return value     : 11$
      expected output : "%i 	 == |9|$
"$
      your output     : "i 	 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%i \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "i \x09 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 682 (moul_i_12) : FAILED.$
    First line of code: {return test("%%i Lydie == |%i|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 15$
      expected output : "%i Lydie == |503|$
"$
      your output     : "i Lydie == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%i Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "i Lydie == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 683 (moul_u_1) : FAILED.$
    First line of code: {return test("%u", 42);}$
      expected return value : 2$
      your return value     : 0$
      expected output : "42"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 684 (moul_u_2) : FAILED.$
    First line of code: {return test("Kashim a %u histoires Ã  raconter", 1001);}$
      expected return value : 38$
      your return value     : 34$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a  histoires Ã  raconterwidth: 0$
"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a  histoires \xc3\xa0 raconterwidth: 0\x0a"$
$
Test 685 (moul_u_3) : FAILED.$
    First line of code: {return test("Il fait au moins %u$
", -8000);}$
      expected return value : 30$
      your return value     : 19$
      expected output : "Il fait au moins 4294959296$
"$
      your output     : "Il fait au moins $
width: 0$
"$
      expected (nonprintable as hex) : "Il fait au moins 4294959296\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins \x0awidth: 0\x0a"$
$
Test 686 (moul_u_4) : FAILED.$
    First line of code: {return test("%u", -0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 687 (moul_u_5) : FAILED.$
    First line of code: {return test("%u", 0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 688 (moul_u_6) : FAILED.$
    First line of code: {return test("%u", INT_MAX);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "2147483647"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 689 (moul_u_7) : FAILED.$
    First line of code: {return test("%u", INT_MIN);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "2147483648"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483648"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 690 (moul_u_8) : FAILED.$
    First line of code: {return test("%u", INT_MIN - 1);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "2147483647"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 691 (moul_u_9) : FAILED.$
    First line of code: {return test("%u", INT_MAX + 1);}$
      expected return value : 11$
      your return value     : 0$
      expected output : "2147483648"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2147483648"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 692 (moul_u_10) : FAILED.$
    First line of code: {return test("%%u 0000042 == |%u|$
", 0000042);}$
      expected return value : 20$
      your return value     : 17$
      expected output : "%u 0000042 == |34|$
"$
      your output     : "u 0000042 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%u 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "u 0000042 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 693 (moul_u_11) : FAILED.$
    First line of code: {return test("%%u 	 == |%u|$
", '	');}$
      expected return value : 13$
      your return value     : 11$
      expected output : "%u 	 == |9|$
"$
      your output     : "u 	 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%u \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "u \x09 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 694 (moul_u_12) : FAILED.$
    First line of code: {return test("%%u Lydie == |%u|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 15$
      expected output : "%u Lydie == |503|$
"$
      your output     : "u Lydie == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%u Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "u Lydie == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 695 (moul_x_1) : FAILED.$
    First line of code: {return test("%x", 42);}$
      expected return value : 2$
      your return value     : 0$
      expected output : "2a"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "2a"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 696 (moul_x_2) : FAILED.$
    First line of code: {return test("Kashim a %x histoires Ã  raconter", 1001);}$
      expected return value : 37$
      your return value     : 34$
      expected output : "Kashim a 3e9 histoires Ã  raconter"$
      your output     : "Kashim a  histoires Ã  raconterwidth: 0$
"$
      expected (nonprintable as hex) : "Kashim a 3e9 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a  histoires \xc3\xa0 raconterwidth: 0\x0a"$
$
Test 697 (moul_x_3) : FAILED.$
    First line of code: {return test("Il fait au moins %x$
", -8000);}$
      expected return value : 28$
      your return value     : 19$
      expected output : "Il fait au moins ffffe0c0$
"$
      your output     : "Il fait au moins $
width: 0$
"$
      expected (nonprintable as hex) : "Il fait au moins ffffe0c0\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins \x0awidth: 0\x0a"$
$
Test 698 (moul_x_4) : FAILED.$
    First line of code: {return test("%x", -0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 699 (moul_x_5) : FAILED.$
    First line of code: {return test("%x", 0);}$
      expected return value : 1$
      your return value     : 0$
      expected output : "0"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 700 (moul_x_6) : FAILED.$
    First line of code: {return test("%x", INT_MAX);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "7fffffff"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "7fffffff"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 701 (moul_x_7) : FAILED.$
    First line of code: {return test("%x", INT_MIN);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "80000000"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "80000000"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 702 (moul_x_8) : FAILED.$
    First line of code: {return test("%x", INT_MIN - 1);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "7fffffff"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "7fffffff"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 703 (moul_x_9) : FAILED.$
    First line of code: {return test("%x", INT_MAX + 1);}$
      expected return value : 8$
      your return value     : 0$
      expected output : "80000000"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "80000000"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 704 (moul_x_10) : FAILED.$
    First line of code: {return test("%%x 0000042 == |%x|$
", 0000042);}$
      expected return value : 20$
      your return value     : 17$
      expected output : "%x 0000042 == |22|$
"$
      your output     : "x 0000042 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%x 0000042 == |22|\x0a"$
      actual   (nonprintable as hex) : "x 0000042 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 705 (moul_x_11) : FAILED.$
    First line of code: {return test("%%x 	 == |%x|$
", '	');}$
      expected return value : 13$
      your return value     : 11$
      expected output : "%x 	 == |9|$
"$
      your output     : "x 	 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%x \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "x \x09 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 706 (moul_x_12) : FAILED.$
    First line of code: {return test("%%x Lydie == |%x|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 15$
      expected output : "%x Lydie == |1f7|$
"$
      your output     : "x Lydie == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%x Lydie == |1f7|\x0a"$
      actual   (nonprintable as hex) : "x Lydie == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 707 (moul_prec_1) : FAILED.$
    First line of code: {return test("%%-5.3s LYDI == |%-5.3s|$
", "LYDI");}$
      expected return value : 25$
      your return value     : 24$
      expected output : "%-5.3s LYDI == |LYD  |$
"$
      your output     : "-5.3s LYDI == |LYD^@ |$
width: 0$
width: 5$
"$
      expected (nonprintable as hex) : "%-5.3s LYDI == |LYD  |\x0a"$
      actual   (nonprintable as hex) : "-5.3s LYDI == |LYD\x00 |\x0awidth: 0\x0awidth: 5\x0a"$
$
Test 708 (moul_prec_3) : FAILED.$
    First line of code: {return test("%%04.5i 42 == |%04.5i|$
", 42);}$
      expected return value : 23$
      your return value     : 16$
      expected output : "%04.5i 42 == |00042|$
"$
      your output     : "04.5i 42 == ||$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%04.5i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "04.5i 42 == ||\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 709 (moul_prec_4) : FAILED.$
    First line of code: {return test("%%04.3i 42 == |%04.3i|$
", 42);}$
      expected return value : 22$
      your return value     : 16$
      expected output : "%04.3i 42 == | 042|$
"$
      your output     : "04.3i 42 == ||$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%04.3i 42 == | 042|\x0a"$
      actual   (nonprintable as hex) : "04.3i 42 == ||\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 710 (moul_prec_5) : FAILED.$
    First line of code: {return test("%%04.2i 42 == |%04.2i|$
", 42);}$
      expected return value : 22$
      your return value     : 16$
      expected output : "%04.2i 42 == |  42|$
"$
      your output     : "04.2i 42 == ||$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%04.2i 42 == |  42|\x0a"$
      actual   (nonprintable as hex) : "04.2i 42 == ||\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 711 (moul_zeropad_1) : FAILED.$
    First line of code: {return test("%%04i 42 == |%04i|$
", 42);}$
      expected return value : 19$
      your return value     : 14$
      expected output : "%04i 42 == |0042|$
"$
      your output     : "04i 42 == ||$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%04i 42 == |0042|\x0a"$
      actual   (nonprintable as hex) : "04i 42 == ||\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 712 (moul_zeropad_2) : FAILED.$
    First line of code: {return test("%%05i 42 == |%05i|$
", 42);}$
      expected return value : 20$
      your return value     : 14$
      expected output : "%05i 42 == |00042|$
"$
      your output     : "05i 42 == ||$
width: 0$
width: 5$
"$
      expected (nonprintable as hex) : "%05i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "05i 42 == ||\x0awidth: 0\x0awidth: 5\x0a"$
$
Test 713 (moul_zeropad_3) : FAILED.$
    First line of code: {return test("%%0i 42 == |%0i|$
", 42);}$
      expected return value : 16$
      your return value     : 13$
      expected output : "%0i 42 == |42|$
"$
      your output     : "0i 42 == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%0i 42 == |42|\x0a"$
      actual   (nonprintable as hex) : "0i 42 == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 714 (moul_zeropad_4) : FAILED.$
    First line of code: {return test("%%0d 0000042 == |%0d|$
", 0000042);}$
      expected return value : 22$
      your return value     : 20$
      expected output : "%0d 0000042 == |34|$
"$
      your output     : "0d 0000042 == |34|$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%0d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "0d 0000042 == |34|\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 715 (moul_leftjusty_1) : FAILED.$
    First line of code: {return test("%%-i 42 == %-i$
", 42);}$
      expected return value : 14$
      your return value     : 11$
      expected output : "%-i 42 == 42$
"$
      your output     : "-i 42 == $
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%-i 42 == 42\x0a"$
      actual   (nonprintable as hex) : "-i 42 == \x0awidth: 0\x0awidth: 0\x0a"$
$
Test 716 (moul_leftjusty_2) : FAILED.$
    First line of code: {return test("%%-d 42 == %-d$
", INT_MIN);}$
      expected return value : 24$
      your return value     : 23$
      expected output : "%-d 42 == -2147483648$
"$
      your output     : "-d 42 == -2147483648$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%-d 42 == -2147483648\x0a"$
      actual   (nonprintable as hex) : "-d 42 == -2147483648\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 717 (moul_leftjusty_3) : FAILED.$
    First line of code: {return test("%%-i -42 == %-i$
", -42);}$
      expected return value : 16$
      your return value     : 12$
      expected output : "%-i -42 == -42$
"$
      your output     : "-i -42 == $
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%-i -42 == -42\x0a"$
      actual   (nonprintable as hex) : "-i -42 == \x0awidth: 0\x0awidth: 0\x0a"$
$
Test 718 (moul_leftjusty_4) : FAILED.$
    First line of code: {return test("%%-4d 42 == |%-4d|$
", 42);}$
      expected return value : 19$
      your return value     : 18$
      expected output : "%-4d 42 == |42  |$
"$
      your output     : "-4d 42 == |42  |$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%-4d 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "-4d 42 == |42  |\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 719 (moul_leftjusty_5) : FAILED.$
    First line of code: {return test("%%-5d -42 == |%-5d|$
", -42);}$
      expected return value : 22$
      your return value     : 20$
      expected output : "%-5d -42 == |-42  |$
"$
      your output     : "-5d -42 == |-42  |$
width: 0$
width: 5$
"$
      expected (nonprintable as hex) : "%-5d -42 == |-42  |\x0a"$
      actual   (nonprintable as hex) : "-5d -42 == |-42  |\x0awidth: 0\x0awidth: 5\x0a"$
$
Test 720 (moul_leftjusty_6) : FAILED.$
    First line of code: {return test("|%3i|%-3i|$
", 42, 42);}$
      expected return value : 11$
      your return value     : 4$
      expected output : "| 42|42 |$
"$
      your output     : "|||$
width: 3$
width: 3$
"$
      expected (nonprintable as hex) : "| 42|42 |\x0a"$
      actual   (nonprintable as hex) : "|||\x0awidth: 3\x0awidth: 3\x0a"$
$
Test 721 (moul_leftjusty_7) : FAILED.$
    First line of code: {return test("%%-4i 42 == |%-4i|$
", 42);}$
      expected return value : 19$
      your return value     : 14$
      expected output : "%-4i 42 == |42  |$
"$
      your output     : "-4i 42 == ||$
width: 0$
width: 4$
"$
      expected (nonprintable as hex) : "%-4i 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "-4i 42 == ||\x0awidth: 0\x0awidth: 4\x0a"$
$
Test 722 (moul_notmandatory_star_1) : FAILED.$
    First line of code: {return test("%%-*.3s LYDI == |%-*.3s|$
", 5, "LYDI");}$
      expected return value : 25$
      your return value     : 18$
      expected output : "%-*.3s LYDI == |LYD  |$
"$
      your output     : "-*.3s LYDI == ||$
width: 0$
width: 0$
"$
      expected (nonprintable as hex) : "%-*.3s LYDI == |LYD  |\x0a"$
      actual   (nonprintable as hex) : "-*.3s LYDI == ||\x0awidth: 0\x0awidth: 0\x0a"$
$
Test 723 (moul_notmandatory_star_3) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 5, 42);}$
      expected return value : 19$
      your return value     : 13$
      expected output : "%*i 42 == |   42|$
"$
      your output     : "*i 42 == ||$
width: 0$
width: 5$
"$
      expected (nonprintable as hex) : "%*i 42 == |   42|\x0a"$
      actual   (nonprintable as hex) : "*i 42 == ||\x0awidth: 0\x0awidth: 5\x0a"$
$
Test 724 (moul_notmandatory_star_4) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 3, 42);}$
      expected return value : 17$
      your return value     : 13$
      expected output : "%*i 42 == | 42|$
"$
      your output     : "*i 42 == ||$
width: 0$
width: 3$
"$
      expected (nonprintable as hex) : "%*i 42 == | 42|\x0a"$
      actual   (nonprintable as hex) : "*i 42 == ||\x0awidth: 0\x0awidth: 3\x0a"$
$
Test 725 (moul_notmandatory_star_5) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 2, 42);}$
      expected return value : 16$
      your return value     : 13$
      expected output : "%*i 42 == |42|$
"$
      your output     : "*i 42 == ||$
width: 0$
width: 2$
"$
      expected (nonprintable as hex) : "%*i 42 == |42|\x0a"$
      actual   (nonprintable as hex) : "*i 42 == ||\x0awidth: 0\x0awidth: 2\x0a"$
$
Test 726 (new2019_star_1) : FAILED.$
    First line of code: {return test("%*s", 32, "abc");}$
      expected return value : 35$
      your return value     : 35$
      expected output : "                             abc"$
      your output     : "                             abcwidth: 32$
"$
      expected (nonprintable as hex) : "                             abc"$
      actual   (nonprintable as hex) : "                             abcwidth: 32\x0a"$
$
Test 727 (new2019_star_2) : FAILED.$
    First line of code: {return test("%-*s", 32, "abc");}$
      expected return value : 35$
      your return value     : 0$
      expected output : "abc                             "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 728 (new2019_star_3) : FAILED.$
    First line of code: {return test("%*s", 3, "hello");}$
      expected return value : 5$
      your return value     : 5$
      expected output : "hello"$
      your output     : "hellowidth: 3$
"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hellowidth: 3\x0a"$
$
Test 729 (new2019_star_4) : FAILED.$
    First line of code: {return test("%.*s", 3, "hello");}$
      expected return value : 3$
      your return value     : 5$
      expected output : "hel"$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : "hel"$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test 730 (new2019_star_5) : FAILED.$
    First line of code: {return test("%.*s", 0, "hello");}$
      expected return value : 0$
      your return value     : 5$
      expected output : ""$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test 731 (new2019_star_6) : FAILED.$
    First line of code: {return test("%-*.*s", 7, 3, "yolo");}$
      expected return value : 7$
      your return value     : 0$
      expected output : "yol    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "yol    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 732 (new2019_star_7) : FAILED.$
    First line of code: {return test("%*i", 4, 94827);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "94827"$
      your output     : "width: 4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: 4\x0a"$
$
Test 733 (new2019_star_8) : FAILED.$
    First line of code: {return test("%*i", 14, 94827);}$
      expected return value : 15$
      your return value     : 0$
      expected output : "         94827"$
      your output     : "width: 14$
"$
      expected (nonprintable as hex) : "         94827"$
      actual   (nonprintable as hex) : "width: 14\x0a"$
$
Test 734 (new2019_star_9) : FAILED.$
    First line of code: {return test("%.*i", 6, -3);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "-000003"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 735 (new2019_star_10) : FAILED.$
    First line of code: {return test("%0*i", 7, -54);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "-000054"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 736 (new2019_negstar_1) : FAILED.$
    First line of code: {return test("%*s", -32, "abc");}$
      expected return value : 35$
      your return value     : 35$
      expected output : "abc                             "$
      your output     : "abc                             width: -32$
"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             width: -32\x0a"$
$
Test 737 (new2019_negstar_2) : FAILED.$
    First line of code: {return test("%-*s", -32, "abc");}$
      expected return value : 35$
      your return value     : 0$
      expected output : "abc                             "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 738 (new2019_negstar_3) : FAILED.$
    First line of code: {return test("%*s", -3, "hello");}$
      expected return value : 5$
      your return value     : 5$
      expected output : "hello"$
      your output     : "hellowidth: -3$
"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hellowidth: -3\x0a"$
$
Test 739 (new2019_negstar_4) : FAILED.$
    First line of code: {return test("%.*s", -3, "hello");}$
      expected return value : 5$
      your return value     : 5$
      expected output : "hello"$
      your output     : "hellowidth: 0$
"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hellowidth: 0\x0a"$
$
Test 740 (new2019_negstar_5) : FAILED.$
    First line of code: {return test("%-*.*s", -7, -3, "yolo");}$
      expected return value : 7$
      your return value     : 0$
      expected output : "yolo   "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "yolo   "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 741 (new2019_negstar_6) : FAILED.$
    First line of code: {return test("%*i", -4, 94827);}$
      expected return value : 5$
      your return value     : 0$
      expected output : "94827"$
      your output     : "width: -4$
"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "width: -4\x0a"$
$
Test 742 (new2019_negstar_7) : FAILED.$
    First line of code: {return test("%*i", -14, 94827);}$
      expected return value : 15$
      your return value     : 0$
      expected output : "94827         "$
      your output     : "width: -14$
"$
      expected (nonprintable as hex) : "94827         "$
      actual   (nonprintable as hex) : "width: -14\x0a"$
$
Test 743 (new2019_negstar_8) : FAILED.$
    First line of code: {return test("%.*i", -6, -3);}$
      expected return value : 2$
      your return value     : 0$
      expected output : "-3"$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-3"$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
Test 744 (new2019_negstar_9) : FAILED.$
    First line of code: {return test("%0*i", -7, -54);}$
      expected return value : 7$
      your return value     : 0$
      expected output : "-54    "$
      your output     : "width: 0$
"$
      expected (nonprintable as hex) : "-54    "$
      actual   (nonprintable as hex) : "width: 0\x0a"$
$
######### printf_lover_v2 ##########
