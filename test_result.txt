
------------------------------
|        string.c            |
|                            |
------------------------------

make: `libftprintf.a' is up to date.
********************     start %s tests     ***************** |	********************     start %Ú\âþs tests     *************
-------------------- start while loop with var: [aloa] ------ |	-------------------- start while loop with var: [aloas] -----
1 [aloa]8						      |	1 [aloas]9d
2 ( [aloa] okkk )17					      |	2 ( [aloas] okkk )18d
3 [ aloa]9						      |	3 [ aloa5s]11d
4 []4							      |	4 [.s]6d
5 [          ]14					      |	5 [          10.s]18d
6 [aloa]8						      |	6 [aloa.10s]12d
7 [      aloa]14					      |	7 [      aloa10.6s]19d
8 [aload]9						      |	8 [aloasd]10d
9 [     ]9						      |	9 [     5.0s]13d
10 [     ]10						      |	10 [     5.0s]14d
11 [      aloa]15					      |	11 [      aloa10.5s]20d
12 [       aloa]16					      |	12 [       aloa11.10s]22d
13 [     ]10						      |	13 [     5.s]13d
14 [aloa]9						      |	14 [aloa.5s]12d
15 [aloa]9						      |	15 [aloa.5s]12d
16 [aloa]9						      |	16 [aloa-.5s]13d
20 (-444) [aloa                                               |	20 (-444d) [aloa                                             
21[ aloa]9						      |	21[ aloa5.*s]13d
22[ aloa]9						      |	22[ aloa5.*s]13d
23[ aloa]9						      |	23[ aloa5.*s]13d
24[                                                           |	24[                                                          
25[ aloa]9						      |	25[ aloa5.*s]13d
26[aloa                                                       |	26[aloa                                                      
20 (-5) [aloa ]15					      |	20 (-5d) [aloa *s]18d
21[ aloa]9						      |	21[ aloa5.*s]13d
22[ aloa]9						      |	22[ aloa5.*s]13d
23[ aloa]9						      |	23[ aloa5.*s]13d
24[     ]9						      |	24[     *.s]12d
25[ aloa]9						      |	25[ aloa5.*s]13d
26[aloa                                                       |	26[aloa                                                      
20 (0) [aloa]13						      |	20 (0d) [aloa*s]16d
21[     ]9						      |	21[     5.*s]13d
22[     ]9						      |	22[     5.*s]13d
23[     ]9						      |	23[     5.*s]13d
24[]4							      |	24[*.s]7d
25[     ]9						      |	25[     5.*s]13d
26[aloa                                                       |	26[aloa                                                      
20 (0) [aloa]13						      |	20 (0d) [aloa*s]16d
21[     ]9						      |	21[     5.*s]13d
22[     ]9						      |	22[     5.*s]13d
23[     ]9						      |	23[     5.*s]13d
24[]4							      |	24[*.s]7d
25[     ]9						      |	25[     5.*s]13d
26[aloa                                                       |	26[aloa                                                      
20 (7) [   aloa]16					      |	20 (7d) [   aloa*s]19d
21[ aloa]9						      |	21[ aloa5.*s]13d
22[ aloa]9						      |	22[ aloa5.*s]13d
23[ aloa]9						      |	23[ aloa5.*s]13d
24[       ]11						      |	24[       *.s]14d
25[ aloa]9						      |	25[ aloa5.*s]13d
26[aloa                                                       |	26[aloa                                                      
20 (222) [                                                    |	20 (222d) [                                                  
21[ aloa]9						      |	21[ aloa5.*s]13d
22[ aloa]9						      |	22[ aloa5.*s]13d
23[ aloa]9						      |	23[ aloa5.*s]13d
24[                                                           |	24[                                                          
25[ aloa]9						      |	25[ aloa5.*s]13d
26[aloa                                                       |	26[aloa                                                      
20 (555) [                                                    |	20 (555d) [                                                  
21[ aloa]9						      |	21[ aloa5.*s]13d
22[ aloa]9						      |	22[ aloa5.*s]13d
23[ aloa]9						      |	23[ aloa5.*s]13d
24[                                                           |	24[                                                          
25[ aloa]9						      |	25[ aloa5.*s]13d
26[aloa                                                       |	26[aloa                                                      
-------------------- start while loop with var: [okkkkkkkkkkk |	-------------------- start while loop with var: [okkkkkkkkkkk
1 [okkkkkkkkkkkkkkkkk]22				      |	1 [okkkkkkkkkkkkkkkkks]23d
2 ( [okkkkkkkkkkkkkkkkk] okkk )31			      |	2 ( [okkkkkkkkkkkkkkkkks] okkk )32d
3 [okkkkkkkkkkkkkkkkk]22				      |	3 [okkkkkkkkkkkkkkkkk5s]24d
4 []4							      |	4 [.s]6d
5 [          ]14					      |	5 [          10.s]18d
6 [okkkkkkkkk]14					      |	6 [okkkkkkkkk.10s]18d
7 [    okkkkk]14					      |	7 [    okkkkk10.6s]19d
8 [okkkkkkkkkkkkkkkkkd]23				      |	8 [okkkkkkkkkkkkkkkkksd]24d
9 [     ]9						      |	9 [     5.0s]13d
10 [     ]10						      |	10 [     5.0s]14d
11 [     okkkk]15					      |	11 [     okkkk10.5s]20d
12 [ okkkkkkkkk]16					      |	12 [ okkkkkkkkk11.10s]22d
13 [     ]10						      |	13 [     5.s]13d
14 [okkkk]10						      |	14 [okkkk.5s]13d
15 [okkkk]10						      |	15 [okkkk.5s]13d
16 [okkkk]10						      |	16 [okkkk-.5s]14d
20 (-444) [okkkkkkkkkkkkkkkkk                                 |	20 (-444d) [okkkkkkkkkkkkkkkkk                               
21[okkkkkkkkkkkkkkkkk]22				      |	21[okkkkkkkkkkkkkkkkk5.*s]26d
22[okkkkkkkkkkkkkkkkk]22				      |	22[okkkkkkkkkkkkkkkkk5.*s]26d
23[okkkkkkkkkkkkkkkkk]22				      |	23[okkkkkkkkkkkkkkkkk5.*s]26d
24[                                                           |	24[                                                          
25[okkkkkkkkkkkkkkkkk]22				      |	25[okkkkkkkkkkkkkkkkk5.*s]26d
26[okkkkkkkkkkkkkkkkk]22				      |	26[okkkkkkkkkkkkkkkkk*.*s]26d
20 (-5) [okkkkkkkkkkkkkkkkk]28				      |	20 (-5d) [okkkkkkkkkkkkkkkkk*s]31d
21[okkkkkkkkkkkkkkkkk]22				      |	21[okkkkkkkkkkkkkkkkk5.*s]26d
22[okkkkkkkkkkkkkkkkk]22				      |	22[okkkkkkkkkkkkkkkkk5.*s]26d
23[okkkkkkkkkkkkkkkkk]22				      |	23[okkkkkkkkkkkkkkkkk5.*s]26d
24[     ]9						      |	24[     *.s]12d
25[okkkkkkkkkkkkkkkkk]22				      |	25[okkkkkkkkkkkkkkkkk5.*s]26d
26[okkkkkkkkkkkkkkkkk]22				      |	26[okkkkkkkkkkkkkkkkk*.*s]26d
20 (0) [okkkkkkkkkkkkkkkkk]27				      |	20 (0d) [okkkkkkkkkkkkkkkkk*s]30d
21[     ]9						      |	21[     5.*s]13d
22[     ]9						      |	22[     5.*s]13d
23[     ]9						      |	23[     5.*s]13d
24[]4							      |	24[*.s]7d
25[     ]9						      |	25[     5.*s]13d
26[okkkkkkkkkkkkkkkkk]22				      |	26[okkkkkkkkkkkkkkkkk*.*s]26d
20 (0) [okkkkkkkkkkkkkkkkk]27				      |	20 (0d) [okkkkkkkkkkkkkkkkk*s]30d
21[     ]9						      |	21[     5.*s]13d
22[     ]9						      |	22[     5.*s]13d
23[     ]9						      |	23[     5.*s]13d
24[]4							      |	24[*.s]7d
25[     ]9						      |	25[     5.*s]13d
26[okkkkkkkkkkkkkkkkk]22				      |	26[okkkkkkkkkkkkkkkkk*.*s]26d
20 (7) [okkkkkkkkkkkkkkkkk]27				      |	20 (7d) [okkkkkkkkkkkkkkkkk*s]30d
21[okkkkkk]11						      |	21[okkkkkk5.*s]15d
22[okkkkkk]11						      |	22[okkkkkk5.*s]15d
23[okkkkkk]11						      |	23[okkkkkk5.*s]15d
24[       ]11						      |	24[       *.s]14d
25[okkkkkk]11						      |	25[okkkkkk5.*s]15d
26[okkkkkkkkkkkkkkkkk]22				      |	26[okkkkkkkkkkkkkkkkk*.*s]26d
20 (222) [                                                    |	20 (222d) [                                                  
21[okkkkkkkkkkkkkkkkk]22				      |	21[okkkkkkkkkkkkkkkkk5.*s]26d
22[okkkkkkkkkkkkkkkkk]22				      |	22[okkkkkkkkkkkkkkkkk5.*s]26d
23[okkkkkkkkkkkkkkkkk]22				      |	23[okkkkkkkkkkkkkkkkk5.*s]26d
24[                                                           |	24[                                                          
25[okkkkkkkkkkkkkkkkk]22				      |	25[okkkkkkkkkkkkkkkkk5.*s]26d
26[okkkkkkkkkkkkkkkkk]22				      |	26[okkkkkkkkkkkkkkkkk*.*s]26d
20 (555) [                                                    |	20 (555d) [                                                  
21[okkkkkkkkkkkkkkkkk]22				      |	21[okkkkkkkkkkkkkkkkk5.*s]26d
22[okkkkkkkkkkkkkkkkk]22				      |	22[okkkkkkkkkkkkkkkkk5.*s]26d
23[okkkkkkkkkkkkkkkkk]22				      |	23[okkkkkkkkkkkkkkkkk5.*s]26d
24[                                                           |	24[                                                          
25[okkkkkkkkkkkkkkkkk]22				      |	25[okkkkkkkkkkkkkkkkk5.*s]26d
26[okkkkkkkkkkkkkkkkk]22				      |	26[okkkkkkkkkkkkkkkkk*.*s]26d
-------------------- start while loop with var: [] ---------- |	-------------------- start while loop with var: [s] ---------
1 []4							      |	1 [s]5d
2 ( [] okkk )13						      |	2 ( [s] okkk )14d
3 [     ]9						      |	3 [     5s]11d
4 []4							      |	4 [.s]6d
5 [          ]14					      |	5 [          10.s]18d
6 []4							      |	6 [.10s]8d
7 [          ]14					      |	7 [          10.6s]19d
8 [d]5							      |	8 [sd]6d
9 [     ]9						      |	9 [     5.0s]13d
10 [     ]10						      |	10 [     5.0s]14d
11 [          ]15					      |	11 [          10.5s]20d
12 [           ]16					      |	12 [           11.10s]22d
13 [     ]10						      |	13 [     5.s]13d
14 []5							      |	14 [.5s]8d
15 []5							      |	15 [.5s]8d
16 []5							      |	16 [-.5s]9d
20 (-444) [                                                   |	20 (-444d) [                                                 
21[     ]9						      |	21[     5.*s]13d
22[     ]9						      |	22[     5.*s]13d
23[     ]9						      |	23[     5.*s]13d
24[                                                           |	24[                                                          
25[     ]9						      |	25[     5.*s]13d
26[]4							      |	26[*.*s]8d
20 (-5) [     ]15					      |	20 (-5d) [     *s]18d
21[     ]9						      |	21[     5.*s]13d
22[     ]9						      |	22[     5.*s]13d
23[     ]9						      |	23[     5.*s]13d
24[     ]9						      |	24[     *.s]12d
25[     ]9						      |	25[     5.*s]13d
26[]4							      |	26[*.*s]8d
20 (0) []9						      |	20 (0d) [*s]12d
21[     ]9						      |	21[     5.*s]13d
22[     ]9						      |	22[     5.*s]13d
23[     ]9						      |	23[     5.*s]13d
24[]4							      |	24[*.s]7d
25[     ]9						      |	25[     5.*s]13d
26[]4							      |	26[*.*s]8d
20 (0) []9						      |	20 (0d) [*s]12d
21[     ]9						      |	21[     5.*s]13d
22[     ]9						      |	22[     5.*s]13d
23[     ]9						      |	23[     5.*s]13d
24[]4							      |	24[*.s]7d
25[     ]9						      |	25[     5.*s]13d
26[]4							      |	26[*.*s]8d
20 (7) [       ]16					      |	20 (7d) [       *s]19d
21[     ]9						      |	21[     5.*s]13d
22[     ]9						      |	22[     5.*s]13d
23[     ]9						      |	23[     5.*s]13d
24[       ]11						      |	24[       *.s]14d
25[     ]9						      |	25[     5.*s]13d
26[]4							      |	26[*.*s]8d
20 (222) [                                                    |	20 (222d) [                                                  
21[     ]9						      |	21[     5.*s]13d
22[     ]9						      |	22[     5.*s]13d
23[     ]9						      |	23[     5.*s]13d
24[                                                           |	24[                                                          
25[     ]9						      |	25[     5.*s]13d
26[]4							      |	26[*.*s]8d
20 (555) [                                                    |	20 (555d) [                                                  
21[     ]9						      |	21[     5.*s]13d
22[     ]9						      |	22[     5.*s]13d
23[     ]9						      |	23[     5.*s]13d
24[                                                           |	24[                                                          
25[     ]9						      |	25[     5.*s]13d
26[]4							      |	26[*.*s]8d
452[sd   ]10						      |	452[sd   *.*s]14d
453[   sd]10						      |	453[   sd*.*s]14d
454[sd   ]10						      |	454[sd   -*.*s]15d
455 [cba                                                      |	455 [cba                                                     
456      def12						      |	456      5.sdef15d
457 klm7						      |	457 klm.5s10d
458      9						      |	458      *.s12d
459    st9						      |	459    st*.*s13d
460    st9						      |	460    st*.*s13d
461 vwx7						      |	461 vwx.*s10d
462 4							      |	462 .s6d
463 [     ]11						      |	463 [     5.0s]15d
464 [  abc.]12						      |	464 [  abc5s.]14d
465 [  abc.*0]14					      |	465 [  abc5s.*0]16d
466 [  abc-]12						      |	466 [  abc5s-]14d
 							      |
 							      |
 							      |
 							      |
 PRINTF							      |	 FT_PRINTF
------------------------------------------------------------------------------------------------------------------------------

[0;31m[ KO ]       209 errors
[0m
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o libftprintf.a
------------------------------
|        number.c            |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
gcc -Wall -Wextra -Werror -c mypf.c -o mypf.o
gcc -Wall -Wextra -Werror -c condition.c -o condition.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o
Simple input test --- Return : 17			      |	Simple input test --- Return : 17d
8, -12, 123456789, 0, -9999999, abcdefghijklmnop, a, 97, 4294 |	8i, -12d, 123456789d, 0d, -9999999d, abcdefghijklmnops, ac, 9
-9999999, abcdefghijklmnop, a, 97, 4294967284, fffffff4, FFFF |	-9999999d, abcdefghijklmnops, ac, 97d, 4294967284u, fffffff4x
1 [-2147483648]15					      |	1 [-2147483648d]16d
[-2147483648]13						      |	[-21474836485d]15d
[-2147483648]13						      |	[-214748364805d]16d
[-2147483648]13						      |	[-2147483648.d]15d
[-2147483648]13						      |	[-214748364810.d]17d
[-2147483648]13						      |	[-2147483648.10d]17d
5 [-2147483648]15					      |	5 [-214748364810.6d]20d
[-2147483648]13						      |	[-21474836480d]15d
[-2147483648]13						      |	[-2147483648.0d]16d
10 [-2147483648]16					      |	10 [-21474836485d]18d
[-2147483648]13						      |	[-2147483648d]14d
[-2147483648]13						      |	[-21474836485.0d]17d
[-2147483648]13						      |	[-21474836485.0d]17d
[-2147483648]13						      |	[-21474836480.5d]17d
[-2147483648]13    |    the 0 flag is ignored because of the  |	[-2147483648010.5d]19d    |    the 0 flag is ignored because 
[-2147483648]13						      |	[-2147483648010.*d]19d
15 [-2147483648]16					      |	15 [-21474836480.5d]20d
[-2147483648]13						      |	[-214748364810.5d]18d
[-2147483648]13						      |	[-214748364811.10d]19d
[-2147483648]13						      |	[-21474836485.d]16d
[-2147483648]13						      |	[-214748364805d]16d
[-2147483648]13						      |	[-2147483648.5d]16d
[-2147483648]13						      |	[-2147483648.5d]16d
[-2147483648]13						      |	[-214748364805d]16d
[-2147483648]13						      |	[-2147483648-.5d]17d
446 (-444) [-2147483648                                       |	446 (-444d) [-2147483648                                     
447[-2147483648]16					      |	447[-21474836485.*d]20d
448[-2147483648]16					      |	448[-21474836485.*d]20d
449[-2147483648]16					      |	449[-21474836485.*d]20d
450[-2147483648                                               |	450[-2147483648                                              
441[-2147483648]16					      |	441[-21474836485.*d]20d
446 (-5) [-2147483648]22				      |	446 (-5d) [-2147483648*d]25d
447[-2147483648]16					      |	447[-21474836485.*d]20d
448[-2147483648]16					      |	448[-21474836485.*d]20d
449[-2147483648]16					      |	449[-21474836485.*d]20d
450[-2147483648]16					      |	450[-2147483648*.d]19d
441[-2147483648]16					      |	441[-21474836485.*d]20d
446 (0) [-2147483648]21					      |	446 (0d) [-2147483648*d]24d
447[-2147483648]16					      |	447[-21474836485.*d]20d
448[-2147483648]16					      |	448[-21474836485.*d]20d
449[-2147483648]16					      |	449[-21474836485.*d]20d
450[-2147483648]16					      |	450[-2147483648*.d]19d
441[-2147483648]16					      |	441[-21474836485.*d]20d
446 (0) [-2147483648]21					      |	446 (0d) [-2147483648*d]24d
447[-2147483648]16					      |	447[-21474836485.*d]20d
448[-2147483648]16					      |	448[-21474836485.*d]20d
449[-2147483648]16					      |	449[-21474836485.*d]20d
450[-2147483648]16					      |	450[-2147483648*.d]19d
441[-2147483648]16					      |	441[-21474836485.*d]20d
446 (7) [-2147483648]21					      |	446 (7d) [-2147483648*d]24d
447[-2147483648]16					      |	447[-21474836485.*d]20d
448[-2147483648]16					      |	448[-21474836485.*d]20d
449[-2147483648]16					      |	449[-21474836485.*d]20d
450[-2147483648]16					      |	450[-2147483648*.d]19d
441[-2147483648]16					      |	441[-21474836485.*d]20d
446 (222) [                                                   |	446 (222d) [                                                 
447[-00000000000000000000000000000000000000000000000000000000 |	447[-00000000000000000000000000000000000000000000000000000000
448[-00000000000000000000000000000000000000000000000000000000 |	448[-00000000000000000000000000000000000000000000000000000000
449[-00000000000000000000000000000000000000000000000000000000 |	449[-00000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[-00000000000000000000000000000000000000000000000000000000 |	441[-00000000000000000000000000000000000000000000000000000000
446 (555) [                                                   |	446 (555d) [                                                 
447[-00000000000000000000000000000000000000000000000000000000 |	447[-00000000000000000000000000000000000000000000000000000000
448[-00000000000000000000000000000000000000000000000000000000 |	448[-00000000000000000000000000000000000000000000000000000000
449[-00000000000000000000000000000000000000000000000000000000 |	449[-00000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[-00000000000000000000000000000000000000000000000000000000 |	441[-00000000000000000000000000000000000000000000000000000000
1 [1000000]11						      |	1 [1000000d]12d
[1000000]9						      |	[10000005d]11d
[1000000]9						      |	[100000005d]12d
[1000000]9						      |	[1000000.d]11d
[   1000000]12						      |	[   100000010.d]16d
[0001000000]12						      |	[0001000000.10d]16d
5 [   1000000]14					      |	5 [   100000010.6d]19d
[1000000]9						      |	[10000000d]11d
[1000000]9						      |	[1000000.0d]12d
10 [1000000]12						      |	10 [10000005d]14d
[1000000]9						      |	[1000000d]10d
[1000000]9						      |	[10000005.0d]13d
[1000000]9						      |	[10000005.0d]13d
[1000000]9						      |	[10000000.5d]13d
[   1000000]12    |    the 0 flag is ignored because of the p |	[   1000000010.5d]18d    |    the 0 flag is ignored because o
[0001000000]12						      |	[0001000000010.*d]18d
15 [1000000]12						      |	15 [10000000.5d]16d
[   1000000]12						      |	[   100000010.5d]17d
[ 0001000000]13						      |	[ 000100000011.10d]19d
[1000000]9						      |	[10000005.d]12d
[1000000]9						      |	[100000005d]12d
[1000000]9						      |	[1000000.5d]12d
[1000000]9						      |	[1000000.5d]12d
[1000000]9						      |	[100000005d]12d
[1000000]9						      |	[1000000-.5d]13d
446 (-444) [1000000                                           |	446 (-444d) [1000000                                         
447[1000000]12						      |	447[10000005.*d]16d
448[1000000]12						      |	448[10000005.*d]16d
449[1000000]12						      |	449[10000005.*d]16d
450[1000000                                                   |	450[1000000                                                  
441[1000000]12						      |	441[10000005.*d]16d
446 (-5) [1000000]18					      |	446 (-5d) [1000000*d]21d
447[1000000]12						      |	447[10000005.*d]16d
448[1000000]12						      |	448[10000005.*d]16d
449[1000000]12						      |	449[10000005.*d]16d
450[1000000]12						      |	450[1000000*.d]15d
441[1000000]12						      |	441[10000005.*d]16d
446 (0) [1000000]17					      |	446 (0d) [1000000*d]20d
447[1000000]12						      |	447[10000005.*d]16d
448[1000000]12						      |	448[10000005.*d]16d
449[1000000]12						      |	449[10000005.*d]16d
450[1000000]12						      |	450[1000000*.d]15d
441[1000000]12						      |	441[10000005.*d]16d
446 (0) [1000000]17					      |	446 (0d) [1000000*d]20d
447[1000000]12						      |	447[10000005.*d]16d
448[1000000]12						      |	448[10000005.*d]16d
449[1000000]12						      |	449[10000005.*d]16d
450[1000000]12						      |	450[1000000*.d]15d
441[1000000]12						      |	441[10000005.*d]16d
446 (7) [1000000]17					      |	446 (7d) [1000000*d]20d
447[1000000]12						      |	447[10000005.*d]16d
448[1000000]12						      |	448[10000005.*d]16d
449[1000000]12						      |	449[10000005.*d]16d
450[1000000]12						      |	450[1000000*.d]15d
441[1000000]12						      |	441[10000005.*d]16d
446 (222) [                                                   |	446 (222d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
446 (555) [                                                   |	446 (555d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
1 [-451]8						      |	1 [-451d]9d
[ -451]7						      |	[ -4515d]9d
[-0451]7						      |	[-045105d]10d
[-451]6							      |	[-451.d]8d
[      -451]12						      |	[      -45110.d]16d
[-0000000451]13						      |	[-0000000451.10d]17d
5 [   -000451]14					      |	5 [   -00045110.6d]19d
[-451]6							      |	[-4510d]8d
[-451]6							      |	[-451.0d]9d
10 [ -451]10						      |	10 [ -4515d]12d
[-451]6							      |	[-451d]7d
[ -451]7						      |	[ -4515.0d]11d
[ -451]7						      |	[ -4515.0d]11d
[-00451]8						      |	[-004510.5d]12d
[    -00451]12    |    the 0 flag is ignored because of the p |	[    -00451010.5d]18d    |    the 0 flag is ignored because o
[-000000451]12						      |	[-000000451010.*d]18d
15 [-00451]11						      |	15 [-004510.5d]15d
[    -00451]12						      |	[    -0045110.5d]17d
[-0000000451]13						      |	[-000000045111.10d]19d
[ -451]7						      |	[ -4515.d]10d
[-0451]7						      |	[-045105d]10d
[-00451]8						      |	[-00451.5d]11d
[-00451]8						      |	[-00451.5d]11d
[-0451]7						      |	[-045105d]10d
[-00451]8						      |	[-00451-.5d]12d
446 (-444) [-451                                              |	446 (-444d) [-451                                            
447[ -451]10						      |	447[ -4515.*d]14d
448[ -451]10						      |	448[ -4515.*d]14d
449[ -451]10						      |	449[ -4515.*d]14d
450[-451                                                      |	450[-451                                                     
441[ -451]10						      |	441[ -4515.*d]14d
446 (-5) [-451 ]16					      |	446 (-5d) [-451 *d]19d
447[ -451]10						      |	447[ -4515.*d]14d
448[ -451]10						      |	448[ -4515.*d]14d
449[ -451]10						      |	449[ -4515.*d]14d
450[-451 ]10						      |	450[-451 *.d]13d
441[ -451]10						      |	441[ -4515.*d]14d
446 (0) [-451]14					      |	446 (0d) [-451*d]17d
447[ -451]10						      |	447[ -4515.*d]14d
448[ -451]10						      |	448[ -4515.*d]14d
449[ -451]10						      |	449[ -4515.*d]14d
450[-451]9						      |	450[-451*.d]12d
441[ -451]10						      |	441[ -4515.*d]14d
446 (0) [-451]14					      |	446 (0d) [-451*d]17d
447[ -451]10						      |	447[ -4515.*d]14d
448[ -451]10						      |	448[ -4515.*d]14d
449[ -451]10						      |	449[ -4515.*d]14d
450[-451]9						      |	450[-451*.d]12d
441[ -451]10						      |	441[ -4515.*d]14d
446 (7) [   -451]17					      |	446 (7d) [   -451*d]20d
447[-0000451]13						      |	447[-00004515.*d]17d
448[-0000451]13						      |	448[-00004515.*d]17d
449[-0000451]13						      |	449[-00004515.*d]17d
450[   -451]12						      |	450[   -451*.d]15d
441[-0000451]13						      |	441[-00004515.*d]17d
446 (222) [                                                   |	446 (222d) [                                                 
447[-00000000000000000000000000000000000000000000000000000000 |	447[-00000000000000000000000000000000000000000000000000000000
448[-00000000000000000000000000000000000000000000000000000000 |	448[-00000000000000000000000000000000000000000000000000000000
449[-00000000000000000000000000000000000000000000000000000000 |	449[-00000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[-00000000000000000000000000000000000000000000000000000000 |	441[-00000000000000000000000000000000000000000000000000000000
446 (555) [                                                   |	446 (555d) [                                                 
447[-00000000000000000000000000000000000000000000000000000000 |	447[-00000000000000000000000000000000000000000000000000000000
448[-00000000000000000000000000000000000000000000000000000000 |	448[-00000000000000000000000000000000000000000000000000000000
449[-00000000000000000000000000000000000000000000000000000000 |	449[-00000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[-00000000000000000000000000000000000000000000000000000000 |	441[-00000000000000000000000000000000000000000000000000000000
1 [-5]6							      |	1 [-5d]7d
[   -5]7						      |	[   -55d]9d
[-0005]7						      |	[-000505d]10d
[-5]4							      |	[-5.d]6d
[        -5]12						      |	[        -510.d]16d
[-0000000005]13						      |	[-0000000005.10d]17d
5 [   -000005]14					      |	5 [   -00000510.6d]19d
[-5]4							      |	[-50d]6d
[-5]4							      |	[-5.0d]7d
10 [   -5]10						      |	10 [   -55d]12d
[-5]4							      |	[-5d]5d
[   -5]7						      |	[   -55.0d]11d
[   -5]7						      |	[   -55.0d]11d
[-00005]8						      |	[-000050.5d]12d
[    -00005]12    |    the 0 flag is ignored because of the p |	[    -00005010.5d]18d    |    the 0 flag is ignored because o
[-000000005]12						      |	[-000000005010.*d]18d
15 [-00005]11						      |	15 [-000050.5d]15d
[    -00005]12						      |	[    -0000510.5d]17d
[-0000000005]13						      |	[-000000000511.10d]19d
[   -5]7						      |	[   -55.d]10d
[-0005]7						      |	[-000505d]10d
[-00005]8						      |	[-00005.5d]11d
[-00005]8						      |	[-00005.5d]11d
[-0005]7						      |	[-000505d]10d
[-00005]8						      |	[-00005-.5d]12d
446 (-444) [-5                                                |	446 (-444d) [-5                                              
447[   -5]10						      |	447[   -55.*d]14d
448[   -5]10						      |	448[   -55.*d]14d
449[   -5]10						      |	449[   -55.*d]14d
450[-5                                                        |	450[-5                                                       
441[   -5]10						      |	441[   -55.*d]14d
446 (-5) [-5   ]16					      |	446 (-5d) [-5   *d]19d
447[   -5]10						      |	447[   -55.*d]14d
448[   -5]10						      |	448[   -55.*d]14d
449[   -5]10						      |	449[   -55.*d]14d
450[-5   ]10						      |	450[-5   *.d]13d
441[   -5]10						      |	441[   -55.*d]14d
446 (0) [-5]12						      |	446 (0d) [-5*d]15d
447[   -5]10						      |	447[   -55.*d]14d
448[   -5]10						      |	448[   -55.*d]14d
449[   -5]10						      |	449[   -55.*d]14d
450[-5]7						      |	450[-5*.d]10d
441[   -5]10						      |	441[   -55.*d]14d
446 (0) [-5]12						      |	446 (0d) [-5*d]15d
447[   -5]10						      |	447[   -55.*d]14d
448[   -5]10						      |	448[   -55.*d]14d
449[   -5]10						      |	449[   -55.*d]14d
450[-5]7						      |	450[-5*.d]10d
441[   -5]10						      |	441[   -55.*d]14d
446 (7) [     -5]17					      |	446 (7d) [     -5*d]20d
447[-0000005]13						      |	447[-00000055.*d]17d
448[-0000005]13						      |	448[-00000055.*d]17d
449[-0000005]13						      |	449[-00000055.*d]17d
450[     -5]12						      |	450[     -5*.d]15d
441[-0000005]13						      |	441[-00000055.*d]17d
446 (222) [                                                   |	446 (222d) [                                                 
447[-00000000000000000000000000000000000000000000000000000000 |	447[-00000000000000000000000000000000000000000000000000000000
448[-00000000000000000000000000000000000000000000000000000000 |	448[-00000000000000000000000000000000000000000000000000000000
449[-00000000000000000000000000000000000000000000000000000000 |	449[-00000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[-00000000000000000000000000000000000000000000000000000000 |	441[-00000000000000000000000000000000000000000000000000000000
446 (555) [                                                   |	446 (555d) [                                                 
447[-00000000000000000000000000000000000000000000000000000000 |	447[-00000000000000000000000000000000000000000000000000000000
448[-00000000000000000000000000000000000000000000000000000000 |	448[-00000000000000000000000000000000000000000000000000000000
449[-00000000000000000000000000000000000000000000000000000000 |	449[-00000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[-00000000000000000000000000000000000000000000000000000000 |	441[-00000000000000000000000000000000000000000000000000000000
1 [0]5							      |	1 [0d]6d
[    0]7						      |	[    05d]9d
[00000]7						      |	[0000005d]10d
[]2							      |	[.d]4d
[          ]12						      |	[          10.d]16d
[0000000000]12						      |	[0000000000.10d]16d
5 [    000000]14					      |	5 [    00000010.6d]19d
[0]3							      |	[00d]5d
[]2							      |	[.0d]5d
10 [    0]10						      |	10 [    05d]12d
[0]3							      |	[0d]4d
[     ]7						      |	[     5.0d]11d
[     ]7						      |	[     5.0d]11d
[00000]7						      |	[000000.5d]11d
[     00000]12    |    the 0 flag is ignored because of the p |	[     00000010.5d]18d    |    the 0 flag is ignored because o
[0000000000]12						      |	[0000000000010.*d]18d
15 [00000]10						      |	15 [000000.5d]14d
[     00000]12						      |	[     0000010.5d]17d
[ 0000000000]13						      |	[ 000000000011.10d]19d
[     ]7						      |	[     5.d]10d
[00000]7						      |	[0000005d]10d
[00000]7						      |	[00000.5d]10d
[00000]7						      |	[00000.5d]10d
[00000]7						      |	[0000005d]10d
[00000]7						      |	[00000-.5d]11d
446 (-444) [0                                                 |	446 (-444d) [0                                               
447[    0]10						      |	447[    05.*d]14d
448[    0]10						      |	448[    05.*d]14d
449[    0]10						      |	449[    05.*d]14d
450[                                                          |	450[                                                         
441[    0]10						      |	441[    05.*d]14d
446 (-5) [0    ]16					      |	446 (-5d) [0    *d]19d
447[    0]10						      |	447[    05.*d]14d
448[    0]10						      |	448[    05.*d]14d
449[    0]10						      |	449[    05.*d]14d
450[     ]10						      |	450[     *.d]13d
441[    0]10						      |	441[    05.*d]14d
446 (0) [0]11						      |	446 (0d) [0*d]14d
447[     ]10						      |	447[     5.*d]14d
448[     ]10						      |	448[     5.*d]14d
449[     ]10						      |	449[     5.*d]14d
450[]5							      |	450[*.d]8d
441[     ]10						      |	441[     5.*d]14d
446 (0) [0]11						      |	446 (0d) [0*d]14d
447[     ]10						      |	447[     5.*d]14d
448[     ]10						      |	448[     5.*d]14d
449[     ]10						      |	449[     5.*d]14d
450[]5							      |	450[*.d]8d
441[     ]10						      |	441[     5.*d]14d
446 (7) [      0]17					      |	446 (7d) [      0*d]20d
447[0000000]12						      |	447[00000005.*d]16d
448[0000000]12						      |	448[00000005.*d]16d
449[0000000]12						      |	449[00000005.*d]16d
450[       ]12						      |	450[       *.d]15d
441[0000000]12						      |	441[00000005.*d]16d
446 (222) [                                                   |	446 (222d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
446 (555) [                                                   |	446 (555d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
1 [0]5							      |	1 [0d]6d
[    0]7						      |	[    05d]9d
[00000]7						      |	[0000005d]10d
[]2							      |	[.d]4d
[          ]12						      |	[          10.d]16d
[0000000000]12						      |	[0000000000.10d]16d
5 [    000000]14					      |	5 [    00000010.6d]19d
[0]3							      |	[00d]5d
[]2							      |	[.0d]5d
10 [    0]10						      |	10 [    05d]12d
[0]3							      |	[0d]4d
[     ]7						      |	[     5.0d]11d
[     ]7						      |	[     5.0d]11d
[00000]7						      |	[000000.5d]11d
[     00000]12    |    the 0 flag is ignored because of the p |	[     00000010.5d]18d    |    the 0 flag is ignored because o
[0000000000]12						      |	[0000000000010.*d]18d
15 [00000]10						      |	15 [000000.5d]14d
[     00000]12						      |	[     0000010.5d]17d
[ 0000000000]13						      |	[ 000000000011.10d]19d
[     ]7						      |	[     5.d]10d
[00000]7						      |	[0000005d]10d
[00000]7						      |	[00000.5d]10d
[00000]7						      |	[00000.5d]10d
[00000]7						      |	[0000005d]10d
[00000]7						      |	[00000-.5d]11d
446 (-444) [0                                                 |	446 (-444d) [0                                               
447[    0]10						      |	447[    05.*d]14d
448[    0]10						      |	448[    05.*d]14d
449[    0]10						      |	449[    05.*d]14d
450[                                                          |	450[                                                         
441[    0]10						      |	441[    05.*d]14d
446 (-5) [0    ]16					      |	446 (-5d) [0    *d]19d
447[    0]10						      |	447[    05.*d]14d
448[    0]10						      |	448[    05.*d]14d
449[    0]10						      |	449[    05.*d]14d
450[     ]10						      |	450[     *.d]13d
441[    0]10						      |	441[    05.*d]14d
446 (0) [0]11						      |	446 (0d) [0*d]14d
447[     ]10						      |	447[     5.*d]14d
448[     ]10						      |	448[     5.*d]14d
449[     ]10						      |	449[     5.*d]14d
450[]5							      |	450[*.d]8d
441[     ]10						      |	441[     5.*d]14d
446 (0) [0]11						      |	446 (0d) [0*d]14d
447[     ]10						      |	447[     5.*d]14d
448[     ]10						      |	448[     5.*d]14d
449[     ]10						      |	449[     5.*d]14d
450[]5							      |	450[*.d]8d
441[     ]10						      |	441[     5.*d]14d
446 (7) [      0]17					      |	446 (7d) [      0*d]20d
447[0000000]12						      |	447[00000005.*d]16d
448[0000000]12						      |	448[00000005.*d]16d
449[0000000]12						      |	449[00000005.*d]16d
450[       ]12						      |	450[       *.d]15d
441[0000000]12						      |	441[00000005.*d]16d
446 (222) [                                                   |	446 (222d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
446 (555) [                                                   |	446 (555d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
1 [6]5							      |	1 [6d]6d
[    6]7						      |	[    65d]9d
[00006]7						      |	[0000605d]10d
[6]3							      |	[6.d]5d
[         6]12						      |	[         610.d]16d
[0000000006]12						      |	[0000000006.10d]16d
5 [    000006]14					      |	5 [    00000610.6d]19d
[6]3							      |	[60d]5d
[6]3							      |	[6.0d]6d
10 [    6]10						      |	10 [    65d]12d
[6]3							      |	[6d]4d
[    6]7						      |	[    65.0d]11d
[    6]7						      |	[    65.0d]11d
[00006]7						      |	[000060.5d]11d
[     00006]12    |    the 0 flag is ignored because of the p |	[     00006010.5d]18d    |    the 0 flag is ignored because o
[0000000006]12						      |	[0000000006010.*d]18d
15 [00006]10						      |	15 [000060.5d]14d
[     00006]12						      |	[     0000610.5d]17d
[ 0000000006]13						      |	[ 000000000611.10d]19d
[    6]7						      |	[    65.d]10d
[00006]7						      |	[0000605d]10d
[00006]7						      |	[00006.5d]10d
[00006]7						      |	[00006.5d]10d
[00006]7						      |	[0000605d]10d
[00006]7						      |	[00006-.5d]11d
446 (-444) [6                                                 |	446 (-444d) [6                                               
447[    6]10						      |	447[    65.*d]14d
448[    6]10						      |	448[    65.*d]14d
449[    6]10						      |	449[    65.*d]14d
450[6                                                         |	450[6                                                        
441[    6]10						      |	441[    65.*d]14d
446 (-5) [6    ]16					      |	446 (-5d) [6    *d]19d
447[    6]10						      |	447[    65.*d]14d
448[    6]10						      |	448[    65.*d]14d
449[    6]10						      |	449[    65.*d]14d
450[6    ]10						      |	450[6    *.d]13d
441[    6]10						      |	441[    65.*d]14d
446 (0) [6]11						      |	446 (0d) [6*d]14d
447[    6]10						      |	447[    65.*d]14d
448[    6]10						      |	448[    65.*d]14d
449[    6]10						      |	449[    65.*d]14d
450[6]6							      |	450[6*.d]9d
441[    6]10						      |	441[    65.*d]14d
446 (0) [6]11						      |	446 (0d) [6*d]14d
447[    6]10						      |	447[    65.*d]14d
448[    6]10						      |	448[    65.*d]14d
449[    6]10						      |	449[    65.*d]14d
450[6]6							      |	450[6*.d]9d
441[    6]10						      |	441[    65.*d]14d
446 (7) [      6]17					      |	446 (7d) [      6*d]20d
447[0000006]12						      |	447[00000065.*d]16d
448[0000006]12						      |	448[00000065.*d]16d
449[0000006]12						      |	449[00000065.*d]16d
450[      6]12						      |	450[      6*.d]15d
441[0000006]12						      |	441[00000065.*d]16d
446 (222) [                                                   |	446 (222d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
446 (555) [                                                   |	446 (555d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
1 [451]7						      |	1 [451d]8d
[  451]7						      |	[  4515d]9d
[00451]7						      |	[0045105d]10d
[451]5							      |	[451.d]7d
[       451]12						      |	[       45110.d]16d
[0000000451]12						      |	[0000000451.10d]16d
5 [    000451]14					      |	5 [    00045110.6d]19d
[451]5							      |	[4510d]7d
[451]5							      |	[451.0d]8d
10 [  451]10						      |	10 [  4515d]12d
[451]5							      |	[451d]6d
[  451]7						      |	[  4515.0d]11d
[  451]7						      |	[  4515.0d]11d
[00451]7						      |	[004510.5d]11d
[     00451]12    |    the 0 flag is ignored because of the p |	[     00451010.5d]18d    |    the 0 flag is ignored because o
[0000000451]12						      |	[0000000451010.*d]18d
15 [00451]10						      |	15 [004510.5d]14d
[     00451]12						      |	[     0045110.5d]17d
[ 0000000451]13						      |	[ 000000045111.10d]19d
[  451]7						      |	[  4515.d]10d
[00451]7						      |	[0045105d]10d
[00451]7						      |	[00451.5d]10d
[00451]7						      |	[00451.5d]10d
[00451]7						      |	[0045105d]10d
[00451]7						      |	[00451-.5d]11d
446 (-444) [451                                               |	446 (-444d) [451                                             
447[  451]10						      |	447[  4515.*d]14d
448[  451]10						      |	448[  4515.*d]14d
449[  451]10						      |	449[  4515.*d]14d
450[451                                                       |	450[451                                                      
441[  451]10						      |	441[  4515.*d]14d
446 (-5) [451  ]16					      |	446 (-5d) [451  *d]19d
447[  451]10						      |	447[  4515.*d]14d
448[  451]10						      |	448[  4515.*d]14d
449[  451]10						      |	449[  4515.*d]14d
450[451  ]10						      |	450[451  *.d]13d
441[  451]10						      |	441[  4515.*d]14d
446 (0) [451]13						      |	446 (0d) [451*d]16d
447[  451]10						      |	447[  4515.*d]14d
448[  451]10						      |	448[  4515.*d]14d
449[  451]10						      |	449[  4515.*d]14d
450[451]8						      |	450[451*.d]11d
441[  451]10						      |	441[  4515.*d]14d
446 (0) [451]13						      |	446 (0d) [451*d]16d
447[  451]10						      |	447[  4515.*d]14d
448[  451]10						      |	448[  4515.*d]14d
449[  451]10						      |	449[  4515.*d]14d
450[451]8						      |	450[451*.d]11d
441[  451]10						      |	441[  4515.*d]14d
446 (7) [    451]17					      |	446 (7d) [    451*d]20d
447[0000451]12						      |	447[00004515.*d]16d
448[0000451]12						      |	448[00004515.*d]16d
449[0000451]12						      |	449[00004515.*d]16d
450[    451]12						      |	450[    451*.d]15d
441[0000451]12						      |	441[00004515.*d]16d
446 (222) [                                                   |	446 (222d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
446 (555) [                                                   |	446 (555d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
1 [2000000]11						      |	1 [2000000d]12d
[2000000]9						      |	[20000005d]11d
[2000000]9						      |	[200000005d]12d
[2000000]9						      |	[2000000.d]11d
[   2000000]12						      |	[   200000010.d]16d
[0002000000]12						      |	[0002000000.10d]16d
5 [   2000000]14					      |	5 [   200000010.6d]19d
[2000000]9						      |	[20000000d]11d
[2000000]9						      |	[2000000.0d]12d
10 [2000000]12						      |	10 [20000005d]14d
[2000000]9						      |	[2000000d]10d
[2000000]9						      |	[20000005.0d]13d
[2000000]9						      |	[20000005.0d]13d
[2000000]9						      |	[20000000.5d]13d
[   2000000]12    |    the 0 flag is ignored because of the p |	[   2000000010.5d]18d    |    the 0 flag is ignored because o
[0002000000]12						      |	[0002000000010.*d]18d
15 [2000000]12						      |	15 [20000000.5d]16d
[   2000000]12						      |	[   200000010.5d]17d
[ 0002000000]13						      |	[ 000200000011.10d]19d
[2000000]9						      |	[20000005.d]12d
[2000000]9						      |	[200000005d]12d
[2000000]9						      |	[2000000.5d]12d
[2000000]9						      |	[2000000.5d]12d
[2000000]9						      |	[200000005d]12d
[2000000]9						      |	[2000000-.5d]13d
446 (-444) [2000000                                           |	446 (-444d) [2000000                                         
447[2000000]12						      |	447[20000005.*d]16d
448[2000000]12						      |	448[20000005.*d]16d
449[2000000]12						      |	449[20000005.*d]16d
450[2000000                                                   |	450[2000000                                                  
441[2000000]12						      |	441[20000005.*d]16d
446 (-5) [2000000]18					      |	446 (-5d) [2000000*d]21d
447[2000000]12						      |	447[20000005.*d]16d
448[2000000]12						      |	448[20000005.*d]16d
449[2000000]12						      |	449[20000005.*d]16d
450[2000000]12						      |	450[2000000*.d]15d
441[2000000]12						      |	441[20000005.*d]16d
446 (0) [2000000]17					      |	446 (0d) [2000000*d]20d
447[2000000]12						      |	447[20000005.*d]16d
448[2000000]12						      |	448[20000005.*d]16d
449[2000000]12						      |	449[20000005.*d]16d
450[2000000]12						      |	450[2000000*.d]15d
441[2000000]12						      |	441[20000005.*d]16d
446 (0) [2000000]17					      |	446 (0d) [2000000*d]20d
447[2000000]12						      |	447[20000005.*d]16d
448[2000000]12						      |	448[20000005.*d]16d
449[2000000]12						      |	449[20000005.*d]16d
450[2000000]12						      |	450[2000000*.d]15d
441[2000000]12						      |	441[20000005.*d]16d
446 (7) [2000000]17					      |	446 (7d) [2000000*d]20d
447[2000000]12						      |	447[20000005.*d]16d
448[2000000]12						      |	448[20000005.*d]16d
449[2000000]12						      |	449[20000005.*d]16d
450[2000000]12						      |	450[2000000*.d]15d
441[2000000]12						      |	441[20000005.*d]16d
446 (222) [                                                   |	446 (222d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
446 (555) [                                                   |	446 (555d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
1 [2147483647]14					      |	1 [2147483647d]15d
[2147483647]12						      |	[21474836475d]14d
[2147483647]12						      |	[214748364705d]15d
[2147483647]12						      |	[2147483647.d]14d
[2147483647]12						      |	[214748364710.d]16d
[2147483647]12						      |	[2147483647.10d]16d
5 [2147483647]14					      |	5 [214748364710.6d]19d
[2147483647]12						      |	[21474836470d]14d
[2147483647]12						      |	[2147483647.0d]15d
10 [2147483647]15					      |	10 [21474836475d]17d
[2147483647]12						      |	[2147483647d]13d
[2147483647]12						      |	[21474836475.0d]16d
[2147483647]12						      |	[21474836475.0d]16d
[2147483647]12						      |	[21474836470.5d]16d
[2147483647]12    |    the 0 flag is ignored because of the p |	[2147483647010.5d]18d    |    the 0 flag is ignored because o
[2147483647]12						      |	[2147483647010.*d]18d
15 [2147483647]15					      |	15 [21474836470.5d]19d
[2147483647]12						      |	[214748364710.5d]17d
[ 2147483647]13						      |	[ 214748364711.10d]19d
[2147483647]12						      |	[21474836475.d]15d
[2147483647]12						      |	[214748364705d]15d
[2147483647]12						      |	[2147483647.5d]15d
[2147483647]12						      |	[2147483647.5d]15d
[2147483647]12						      |	[214748364705d]15d
[2147483647]12						      |	[2147483647-.5d]16d
446 (-444) [2147483647                                        |	446 (-444d) [2147483647                                      
447[2147483647]15					      |	447[21474836475.*d]19d
448[2147483647]15					      |	448[21474836475.*d]19d
449[2147483647]15					      |	449[21474836475.*d]19d
450[2147483647                                                |	450[2147483647                                               
441[2147483647]15					      |	441[21474836475.*d]19d
446 (-5) [2147483647]21					      |	446 (-5d) [2147483647*d]24d
447[2147483647]15					      |	447[21474836475.*d]19d
448[2147483647]15					      |	448[21474836475.*d]19d
449[2147483647]15					      |	449[21474836475.*d]19d
450[2147483647]15					      |	450[2147483647*.d]18d
441[2147483647]15					      |	441[21474836475.*d]19d
446 (0) [2147483647]20					      |	446 (0d) [2147483647*d]23d
447[2147483647]15					      |	447[21474836475.*d]19d
448[2147483647]15					      |	448[21474836475.*d]19d
449[2147483647]15					      |	449[21474836475.*d]19d
450[2147483647]15					      |	450[2147483647*.d]18d
441[2147483647]15					      |	441[21474836475.*d]19d
446 (0) [2147483647]20					      |	446 (0d) [2147483647*d]23d
447[2147483647]15					      |	447[21474836475.*d]19d
448[2147483647]15					      |	448[21474836475.*d]19d
449[2147483647]15					      |	449[21474836475.*d]19d
450[2147483647]15					      |	450[2147483647*.d]18d
441[2147483647]15					      |	441[21474836475.*d]19d
446 (7) [2147483647]20					      |	446 (7d) [2147483647*d]23d
447[2147483647]15					      |	447[21474836475.*d]19d
448[2147483647]15					      |	448[21474836475.*d]19d
449[2147483647]15					      |	449[21474836475.*d]19d
450[2147483647]15					      |	450[2147483647*.d]18d
441[2147483647]15					      |	441[21474836475.*d]19d
446 (222) [                                                   |	446 (222d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
446 (555) [                                                   |	446 (555d) [                                                 
447[000000000000000000000000000000000000000000000000000000000 |	447[000000000000000000000000000000000000000000000000000000000
448[000000000000000000000000000000000000000000000000000000000 |	448[000000000000000000000000000000000000000000000000000000000
449[000000000000000000000000000000000000000000000000000000000 |	449[000000000000000000000000000000000000000000000000000000000
450[                                                          |	450[                                                         
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[7         ]17					      |	452bb[7         0*d]20d
453b[0000000007]16					      |	453b[00000000070*.*d]21d
453c[-7   ]11						      |	453c[-7   0*.*d]16d
453d[-0000000007]17					      |	453d[-00000000070*.*d]22d
453e[-0007]11						      |	453e[-00070*.*d]16d
452b[-7   ]11						      |	452b[-7   *.*d]15d
452c[0000000007]16					      |	452c[0000000007*.*d]20d
454[0000000007]15					      |	454[0000000007-*.*d]20d
455 [9                                                        |	455 [9                                                       
 							      |
 							      |
 							      |
 							      |
 PRINTF							      |	 FT_PRINTF
------------------------------------------------------------------------------------------------------------------------------

[0;31m[ KO ]       672 errors
[0m
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o libftprintf.a
------------------------------
|        char.c              |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
gcc -Wall -Wextra -Werror -c mypf.c -o mypf.o
gcc -Wall -Wextra -Werror -c condition.c -o condition.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o
********************     %c     *******************	      |	********************     %Àc     *******************
1 [C]5							      |	1 [Cc]6d
2 [C]5							      |	2 [C1c]7d
3 [              C]19					      |	3 [              C15c]22d
4 [C    ]9						      |	4 [C    -5c]12d
5 [C]5							      |	5 [C.c]7d
6 [         C]14					      |	6 [         C10.c]18d
7 [    C]9						      |	7 [    C5.c]12d
446 (-444) [C                                                 |	446 (-444d) [C                                               
446 (-5) [C    ]16					      |	446 (-5d) [C    *c]19d
446 (0) [C]11						      |	446 (0d) [C*c]14d
446 (0) [C]11						      |	446 (0d) [C*c]14d
446 (7) [      C]17					      |	446 (7d) [      C*c]20d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
1 [D]5							      |	1 [Dc]6d
2 [D]5							      |	2 [D1c]7d
3 [              D]19					      |	3 [              D15c]22d
4 [D    ]9						      |	4 [D    -5c]12d
5 [D]5							      |	5 [D.c]7d
6 [         D]14					      |	6 [         D10.c]18d
7 [    D]9						      |	7 [    D5.c]12d
446 (-444) [D                                                 |	446 (-444d) [D                                               
446 (-5) [D    ]16					      |	446 (-5d) [D    *c]19d
446 (0) [D]11						      |	446 (0d) [D*c]14d
446 (0) [D]11						      |	446 (0d) [D*c]14d
446 (7) [      D]17					      |	446 (7d) [      D*c]20d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
1 [E]5							      |	1 [Ec]6d
2 [E]5							      |	2 [E1c]7d
3 [              E]19					      |	3 [              E15c]22d
4 [E    ]9						      |	4 [E    -5c]12d
5 [E]5							      |	5 [E.c]7d
6 [         E]14					      |	6 [         E10.c]18d
7 [    E]9						      |	7 [    E5.c]12d
446 (-444) [E                                                 |	446 (-444d) [E                                               
446 (-5) [E    ]16					      |	446 (-5d) [E    *c]19d
446 (0) [E]11						      |	446 (0d) [E*c]14d
446 (0) [E]11						      |	446 (0d) [E*c]14d
446 (7) [      E]17					      |	446 (7d) [      E*c]20d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
1 [F]5							      |	1 [Fc]6d
2 [F]5							      |	2 [F1c]7d
3 [              F]19					      |	3 [              F15c]22d
4 [F    ]9						      |	4 [F    -5c]12d
5 [F]5							      |	5 [F.c]7d
6 [         F]14					      |	6 [         F10.c]18d
7 [    F]9						      |	7 [    F5.c]12d
446 (-444) [F                                                 |	446 (-444d) [F                                               
446 (-5) [F    ]16					      |	446 (-5d) [F    *c]19d
446 (0) [F]11						      |	446 (0d) [F*c]14d
446 (0) [F]11						      |	446 (0d) [F*c]14d
446 (7) [      F]17					      |	446 (7d) [      F*c]20d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
1 [G]5							      |	1 [Gc]6d
2 [G]5							      |	2 [G1c]7d
3 [              G]19					      |	3 [              G15c]22d
4 [G    ]9						      |	4 [G    -5c]12d
5 [G]5							      |	5 [G.c]7d
6 [         G]14					      |	6 [         G10.c]18d
7 [    G]9						      |	7 [    G5.c]12d
446 (-444) [G                                                 |	446 (-444d) [G                                               
446 (-5) [G    ]16					      |	446 (-5d) [G    *c]19d
446 (0) [G]11						      |	446 (0d) [G*c]14d
446 (0) [G]11						      |	446 (0d) [G*c]14d
446 (7) [      G]17					      |	446 (7d) [      G*c]20d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
1 [H]5							      |	1 [Hc]6d
2 [H]5							      |	2 [H1c]7d
3 [              H]19					      |	3 [              H15c]22d
4 [H    ]9						      |	4 [H    -5c]12d
5 [H]5							      |	5 [H.c]7d
6 [         H]14					      |	6 [         H10.c]18d
7 [    H]9						      |	7 [    H5.c]12d
446 (-444) [H                                                 |	446 (-444d) [H                                               
446 (-5) [H    ]16					      |	446 (-5d) [H    *c]19d
446 (0) [H]11						      |	446 (0d) [H*c]14d
446 (0) [H]11						      |	446 (0d) [H*c]14d
446 (7) [      H]17					      |	446 (7d) [      H*c]20d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
 							      |
 							      |
 							      |
 							      |
 PRINTF							      |	 FT_PRINTF
------------------------------------------------------------------------------------------------------------------------------

[0;31m[ KO ]        85 errors
[0m
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o libftprintf.a
------------------------------
|        unsigned_int.c      |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
gcc -Wall -Wextra -Werror -c mypf.c -o mypf.o
gcc -Wall -Wextra -Werror -c condition.c -o condition.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o
/********************     %u     *******************/	      |	/********************     %3952818368u     ******************
-------------------- start while loop with nb[0] ------------ |	-------------------- start while loop with nb[0u] -----------
1 [0]5							      |	1 [0u]6d
1.1 [    0]11						      |	1.1 [    05u]13d
2 [00000]9						      |	2 [0000005u]12d
2.2 [0]7						      |	2.2 [00u]9d
3 ! []6							      |	3 ! [.u]8d
3.1 ! []8						      |	3.1 ! [.0u]11d
3.2 ! [00000]13						      |	3.2 ! [00000.5u]16d
3.3 ! [00000]13						      |	3.3 ! [000000.5u]17d
3.4 ![          ]17					      |	3.4 ![          10.u]21d
3.5 ! [     ]13						      |	3.5 ! [     5.0u]17d
3.6 ! [0000000000]18					      |	3.6 ! [0000000000.10u]22d
3.7 ! [    000000]18					      |	3.7 ! [    00000010.6u]23d
4 [     00000]14					      |	4 [     00000010.5u]20d
5 [0    ]9						      |	5 [0    -5d]12d
5.1 ![00000]12						      |	5.1 ![00000-.5d]16d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [0                                                         |	10 [0                                                        
11 [                                                          |	11 [                                                         
12 [                                                          |	12 [                                                         
13 [0                                                         |	13 [0                                                        
453[0                                                         |	453[0                                                        
453a [0000000000]17					      |	453a [0000000000010.*u]23d
441[    0]10						      |	441[    05.*u]14d
452bb[7                                                       |	452bb[7                                                      
453b !! [7                                                    |	453b !! [7                                                   
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [0    ]10						      |	10 [0    *u]12d
11 [     ]10						      |	11 [     *.u]13d
12 [     ]10						      |	12 [     *.0u]14d
13 [0    ]10						      |	13 [0    *.*u]14d
453[0                                                         |	453[0                                                        
453a [0000000000]17					      |	453a [0000000000010.*u]23d
441[    0]10						      |	441[    05.*u]14d
452bb[7    ]12						      |	452bb[7    0*u]15d
453b !! [7    ]15					      |	453b !! [7    0*.*u]20d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0]6							      |	10 [0*u]8d
11 []5							      |	11 [*.u]8d
12 []5							      |	12 [*.0u]9d
13 [0]6							      |	13 [0*.*u]10d
453[0                                                         |	453[0                                                        
453a [          ]17					      |	453a [          010.*u]23d
441[     ]10						      |	441[     5.*u]14d
452bb[7]8						      |	452bb[70*u]11d
453b !! [7]11						      |	453b !! [70*.*u]16d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0]6							      |	10 [0*u]8d
11 []5							      |	11 [*.u]8d
12 []5							      |	12 [*.0u]9d
13 [0]6							      |	13 [0*.*u]10d
453[0                                                         |	453[0                                                        
453a [          ]17					      |	453a [          010.*u]23d
441[     ]10						      |	441[     5.*u]14d
452bb[7]8						      |	452bb[70*u]11d
453b !! [7]11						      |	453b !! [70*.*u]16d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [      0]12						      |	10 [      0*u]14d
11 [       ]12						      |	11 [       *.u]15d
12 [       ]12						      |	12 [       *.0u]16d
13 [      0]12						      |	13 [      0*.*u]16d
453[0                                                         |	453[0                                                        
453a [   0000000]17					      |	453a [   0000000010.*u]23d
441[0000000]12						      |	441[00000005.*u]16d
452bb[0000007]14					      |	452bb[00000070*u]17d
453b !! [0000007]17					      |	453b !! [00000070*.*u]22d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
11 [                                                          |	11 [                                                         
12 [                                                          |	12 [                                                         
13 [                                                          |	13 [                                                         
453[0                                                         |	453[0                                                        
453a [0000000000000000000000000000000000000000000000000000000 |	453a [0000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
11 [                                                          |	11 [                                                         
12 [                                                          |	12 [                                                         
13 [                                                          |	13 [                                                         
453[0                                                         |	453[0                                                        
453a [0000000000000000000000000000000000000000000000000000000 |	453a [0000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
-------------------- start while loop with nb[6] ------------ |	-------------------- start while loop with nb[6u] -----------
1 [6]5							      |	1 [6u]6d
1.1 [    6]11						      |	1.1 [    65u]13d
2 [00006]9						      |	2 [0000605u]12d
2.2 [6]7						      |	2.2 [60u]9d
3 ! [6]7						      |	3 ! [6.u]9d
3.1 ! [6]9						      |	3.1 ! [6.0u]12d
3.2 ! [00006]13						      |	3.2 ! [00006.5u]16d
3.3 ! [00006]13						      |	3.3 ! [000060.5u]17d
3.4 ![         6]17					      |	3.4 ![         610.u]21d
3.5 ! [    6]13						      |	3.5 ! [    65.0u]17d
3.6 ! [0000000006]18					      |	3.6 ! [0000000006.10u]22d
3.7 ! [    000006]18					      |	3.7 ! [    00000610.6u]23d
4 [     00006]14					      |	4 [     00006010.5u]20d
5 [6    ]9						      |	5 [6    -5d]12d
5.1 ![00006]12						      |	5.1 ![00006-.5d]16d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [6                                                         |	10 [6                                                        
11 [6                                                         |	11 [6                                                        
12 [6                                                         |	12 [6                                                        
13 [6                                                         |	13 [6                                                        
453[6    ]10						      |	453[6    0*.*u]15d
453a [0000000006]17					      |	453a [0000000006010.*u]23d
441[    6]10						      |	441[    65.*u]14d
452bb[7                                                       |	452bb[7                                                      
453b !! [7                                                    |	453b !! [7                                                   
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [6    ]10						      |	10 [6    *u]12d
11 [6    ]10						      |	11 [6    *.u]13d
12 [6    ]10						      |	12 [6    *.0u]14d
13 [6    ]10						      |	13 [6    *.*u]14d
453[6    ]10						      |	453[6    0*.*u]15d
453a [0000000006]17					      |	453a [0000000006010.*u]23d
441[    6]10						      |	441[    65.*u]14d
452bb[7    ]12						      |	452bb[7    0*u]15d
453b !! [7    ]15					      |	453b !! [7    0*.*u]20d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [6]6							      |	10 [6*u]8d
11 [6]6							      |	11 [6*.u]9d
12 [6]6							      |	12 [6*.0u]10d
13 [6]6							      |	13 [6*.*u]10d
453[6    ]10						      |	453[6    0*.*u]15d
453a [         6]17					      |	453a [         6010.*u]23d
441[    6]10						      |	441[    65.*u]14d
452bb[7]8						      |	452bb[70*u]11d
453b !! [7]11						      |	453b !! [70*.*u]16d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [6]6							      |	10 [6*u]8d
11 [6]6							      |	11 [6*.u]9d
12 [6]6							      |	12 [6*.0u]10d
13 [6]6							      |	13 [6*.*u]10d
453[6    ]10						      |	453[6    0*.*u]15d
453a [         6]17					      |	453a [         6010.*u]23d
441[    6]10						      |	441[    65.*u]14d
452bb[7]8						      |	452bb[70*u]11d
453b !! [7]11						      |	453b !! [70*.*u]16d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [      6]12						      |	10 [      6*u]14d
11 [      6]12						      |	11 [      6*.u]15d
12 [      6]12						      |	12 [      6*.0u]16d
13 [      6]12						      |	13 [      6*.*u]16d
453[6    ]10						      |	453[6    0*.*u]15d
453a [   0000006]17					      |	453a [   0000006010.*u]23d
441[0000006]12						      |	441[00000065.*u]16d
452bb[0000007]14					      |	452bb[00000070*u]17d
453b !! [0000007]17					      |	453b !! [00000070*.*u]22d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
11 [                                                          |	11 [                                                         
12 [                                                          |	12 [                                                         
13 [                                                          |	13 [                                                         
453[6    ]10						      |	453[6    0*.*u]15d
453a [0000000000000000000000000000000000000000000000000000000 |	453a [0000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
11 [                                                          |	11 [                                                         
12 [                                                          |	12 [                                                         
13 [                                                          |	13 [                                                         
453[6    ]10						      |	453[6    0*.*u]15d
453a [0000000000000000000000000000000000000000000000000000000 |	453a [0000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
-------------------- start while loop with nb[451] ---------- |	-------------------- start while loop with nb[451u] ---------
1 [451]7						      |	1 [451u]8d
1.1 [  451]11						      |	1.1 [  4515u]13d
2 [00451]9						      |	2 [0045105u]12d
2.2 [451]9						      |	2.2 [4510u]11d
3 ! [451]9						      |	3 ! [451.u]11d
3.1 ! [451]11						      |	3.1 ! [451.0u]14d
3.2 ! [00451]13						      |	3.2 ! [00451.5u]16d
3.3 ! [00451]13						      |	3.3 ! [004510.5u]17d
3.4 ![       451]17					      |	3.4 ![       45110.u]21d
3.5 ! [  451]13						      |	3.5 ! [  4515.0u]17d
3.6 ! [0000000451]18					      |	3.6 ! [0000000451.10u]22d
3.7 ! [    000451]18					      |	3.7 ! [    00045110.6u]23d
4 [     00451]14					      |	4 [     00451010.5u]20d
5 [451  ]9						      |	5 [451  -5d]12d
5.1 ![00451]12						      |	5.1 ![00451-.5d]16d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [451                                                       |	10 [451                                                      
11 [451                                                       |	11 [451                                                      
12 [451                                                       |	12 [451                                                      
13 [451                                                       |	13 [451                                                      
453[451]8						      |	453[4510*.*u]13d
453a [0000000451]17					      |	453a [0000000451010.*u]23d
441[  451]10						      |	441[  4515.*u]14d
452bb[7                                                       |	452bb[7                                                      
453b !! [7                                                    |	453b !! [7                                                   
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [451  ]10						      |	10 [451  *u]12d
11 [451  ]10						      |	11 [451  *.u]13d
12 [451  ]10						      |	12 [451  *.0u]14d
13 [451  ]10						      |	13 [451  *.*u]14d
453[451]8						      |	453[4510*.*u]13d
453a [0000000451]17					      |	453a [0000000451010.*u]23d
441[  451]10						      |	441[  4515.*u]14d
452bb[7    ]12						      |	452bb[7    0*u]15d
453b !! [7    ]15					      |	453b !! [7    0*.*u]20d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [451]8						      |	10 [451*u]10d
11 [451]8						      |	11 [451*.u]11d
12 [451]8						      |	12 [451*.0u]12d
13 [451]8						      |	13 [451*.*u]12d
453[451]8						      |	453[4510*.*u]13d
453a [       451]17					      |	453a [       451010.*u]23d
441[  451]10						      |	441[  4515.*u]14d
452bb[7]8						      |	452bb[70*u]11d
453b !! [7]11						      |	453b !! [70*.*u]16d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [451]8						      |	10 [451*u]10d
11 [451]8						      |	11 [451*.u]11d
12 [451]8						      |	12 [451*.0u]12d
13 [451]8						      |	13 [451*.*u]12d
453[451]8						      |	453[4510*.*u]13d
453a [       451]17					      |	453a [       451010.*u]23d
441[  451]10						      |	441[  4515.*u]14d
452bb[7]8						      |	452bb[70*u]11d
453b !! [7]11						      |	453b !! [70*.*u]16d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [    451]12						      |	10 [    451*u]14d
11 [    451]12						      |	11 [    451*.u]15d
12 [    451]12						      |	12 [    451*.0u]16d
13 [    451]12						      |	13 [    451*.*u]16d
453[451]8						      |	453[4510*.*u]13d
453a [   0000451]17					      |	453a [   0000451010.*u]23d
441[0000451]12						      |	441[00004515.*u]16d
452bb[0000007]14					      |	452bb[00000070*u]17d
453b !! [0000007]17					      |	453b !! [00000070*.*u]22d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
11 [                                                          |	11 [                                                         
12 [                                                          |	12 [                                                         
13 [                                                          |	13 [                                                         
453[451]8						      |	453[4510*.*u]13d
453a [0000000000000000000000000000000000000000000000000000000 |	453a [0000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
11 [                                                          |	11 [                                                         
12 [                                                          |	12 [                                                         
13 [                                                          |	13 [                                                         
453[451]8						      |	453[4510*.*u]13d
453a [0000000000000000000000000000000000000000000000000000000 |	453a [0000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
-------------------- start while loop with nb[2000000] ------ |	-------------------- start while loop with nb[2000000u] -----
1 [2000000]11						      |	1 [2000000u]12d
1.1 [2000000]13						      |	1.1 [20000005u]15d
2 [2000000]11						      |	2 [200000005u]14d
2.2 [2000000]13						      |	2.2 [20000000u]15d
3 ! [2000000]13						      |	3 ! [2000000.u]15d
3.1 ! [2000000]15					      |	3.1 ! [2000000.0u]18d
3.2 ! [2000000]15					      |	3.2 ! [2000000.5u]18d
3.3 ! [2000000]15					      |	3.3 ! [20000000.5u]19d
3.4 ![   2000000]17					      |	3.4 ![   200000010.u]21d
3.5 ! [2000000]15					      |	3.5 ! [20000005.0u]19d
3.6 ! [0002000000]18					      |	3.6 ! [0002000000.10u]22d
3.7 ! [   2000000]18					      |	3.7 ! [   200000010.6u]23d
4 [   2000000]14					      |	4 [   2000000010.5u]20d
5 [2000000]11						      |	5 [2000000-5d]14d
5.1 ![2000000]14					      |	5.1 ![2000000-.5d]18d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [2000000                                                   |	10 [2000000                                                  
11 [2000000                                                   |	11 [2000000                                                  
12 [2000000                                                   |	12 [2000000                                                  
13 [2000000                                                   |	13 [2000000                                                  
453[2000000]12						      |	453[20000000*.*u]17d
453a [0002000000]17					      |	453a [0002000000010.*u]23d
441[2000000]12						      |	441[20000005.*u]16d
452bb[7                                                       |	452bb[7                                                      
453b !! [7                                                    |	453b !! [7                                                   
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [2000000]12						      |	10 [2000000*u]14d
11 [2000000]12						      |	11 [2000000*.u]15d
12 [2000000]12						      |	12 [2000000*.0u]16d
13 [2000000]12						      |	13 [2000000*.*u]16d
453[2000000]12						      |	453[20000000*.*u]17d
453a [0002000000]17					      |	453a [0002000000010.*u]23d
441[2000000]12						      |	441[20000005.*u]16d
452bb[7    ]12						      |	452bb[7    0*u]15d
453b !! [7    ]15					      |	453b !! [7    0*.*u]20d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [2000000]12						      |	10 [2000000*u]14d
11 [2000000]12						      |	11 [2000000*.u]15d
12 [2000000]12						      |	12 [2000000*.0u]16d
13 [2000000]12						      |	13 [2000000*.*u]16d
453[2000000]12						      |	453[20000000*.*u]17d
453a [   2000000]17					      |	453a [   2000000010.*u]23d
441[2000000]12						      |	441[20000005.*u]16d
452bb[7]8						      |	452bb[70*u]11d
453b !! [7]11						      |	453b !! [70*.*u]16d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [2000000]12						      |	10 [2000000*u]14d
11 [2000000]12						      |	11 [2000000*.u]15d
12 [2000000]12						      |	12 [2000000*.0u]16d
13 [2000000]12						      |	13 [2000000*.*u]16d
453[2000000]12						      |	453[20000000*.*u]17d
453a [   2000000]17					      |	453a [   2000000010.*u]23d
441[2000000]12						      |	441[20000005.*u]16d
452bb[7]8						      |	452bb[70*u]11d
453b !! [7]11						      |	453b !! [70*.*u]16d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [2000000]12						      |	10 [2000000*u]14d
11 [2000000]12						      |	11 [2000000*.u]15d
12 [2000000]12						      |	12 [2000000*.0u]16d
13 [2000000]12						      |	13 [2000000*.*u]16d
453[2000000]12						      |	453[20000000*.*u]17d
453a [   2000000]17					      |	453a [   2000000010.*u]23d
441[2000000]12						      |	441[20000005.*u]16d
452bb[0000007]14					      |	452bb[00000070*u]17d
453b !! [0000007]17					      |	453b !! [00000070*.*u]22d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
11 [                                                          |	11 [                                                         
12 [                                                          |	12 [                                                         
13 [                                                          |	13 [                                                         
453[2000000]12						      |	453[20000000*.*u]17d
453a [0000000000000000000000000000000000000000000000000000000 |	453a [0000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
11 [                                                          |	11 [                                                         
12 [                                                          |	12 [                                                         
13 [                                                          |	13 [                                                         
453[2000000]12						      |	453[20000000*.*u]17d
453a [0000000000000000000000000000000000000000000000000000000 |	453a [0000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
-------------------- start while loop with nb[4294967295] --- |	-------------------- start while loop with nb[4294967295u] --
1 [4294967295]14					      |	1 [4294967295u]15d
1.1 [4294967295]16					      |	1.1 [42949672955u]18d
2 [4294967295]14					      |	2 [429496729505u]17d
2.2 [4294967295]16					      |	2.2 [42949672950u]18d
3 ! [4294967295]16					      |	3 ! [4294967295.u]18d
3.1 ! [4294967295]18					      |	3.1 ! [4294967295.0u]21d
3.2 ! [4294967295]18					      |	3.2 ! [4294967295.5u]21d
3.3 ! [4294967295]18					      |	3.3 ! [42949672950.5u]22d
3.4 ![4294967295]17					      |	3.4 ![429496729510.u]21d
3.5 ! [4294967295]18					      |	3.5 ! [42949672955.0u]22d
3.6 ! [4294967295]18					      |	3.6 ! [4294967295.10u]22d
3.7 ! [4294967295]18					      |	3.7 ! [429496729510.6u]23d
4 [4294967295]14					      |	4 [4294967295010.5u]20d
5 [-1   ]9						      |	5 [-1   -5d]12d
5.1 ![-00001]13						      |	5.1 ![-00001-.5d]17d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [4294967295                                                |	10 [4294967295                                               
11 [4294967295                                                |	11 [4294967295                                               
12 [4294967295                                                |	12 [4294967295                                               
13 [4294967295                                                |	13 [4294967295                                               
453[4294967295]15					      |	453[42949672950*.*u]20d
453a [4294967295]17					      |	453a [4294967295010.*u]23d
441[4294967295]15					      |	441[42949672955.*u]19d
452bb[7                                                       |	452bb[7                                                      
453b !! [7                                                    |	453b !! [7                                                   
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [4294967295]15					      |	10 [4294967295*u]17d
11 [4294967295]15					      |	11 [4294967295*.u]18d
12 [4294967295]15					      |	12 [4294967295*.0u]19d
13 [4294967295]15					      |	13 [4294967295*.*u]19d
453[4294967295]15					      |	453[42949672950*.*u]20d
453a [4294967295]17					      |	453a [4294967295010.*u]23d
441[4294967295]15					      |	441[42949672955.*u]19d
452bb[7    ]12						      |	452bb[7    0*u]15d
453b !! [7    ]15					      |	453b !! [7    0*.*u]20d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [4294967295]15					      |	10 [4294967295*u]17d
11 [4294967295]15					      |	11 [4294967295*.u]18d
12 [4294967295]15					      |	12 [4294967295*.0u]19d
13 [4294967295]15					      |	13 [4294967295*.*u]19d
453[4294967295]15					      |	453[42949672950*.*u]20d
453a [4294967295]17					      |	453a [4294967295010.*u]23d
441[4294967295]15					      |	441[42949672955.*u]19d
452bb[7]8						      |	452bb[70*u]11d
453b !! [7]11						      |	453b !! [70*.*u]16d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [4294967295]15					      |	10 [4294967295*u]17d
11 [4294967295]15					      |	11 [4294967295*.u]18d
12 [4294967295]15					      |	12 [4294967295*.0u]19d
13 [4294967295]15					      |	13 [4294967295*.*u]19d
453[4294967295]15					      |	453[42949672950*.*u]20d
453a [4294967295]17					      |	453a [4294967295010.*u]23d
441[4294967295]15					      |	441[42949672955.*u]19d
452bb[7]8						      |	452bb[70*u]11d
453b !! [7]11						      |	453b !! [70*.*u]16d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [4294967295]15					      |	10 [4294967295*u]17d
11 [4294967295]15					      |	11 [4294967295*.u]18d
12 [4294967295]15					      |	12 [4294967295*.0u]19d
13 [4294967295]15					      |	13 [4294967295*.*u]19d
453[4294967295]15					      |	453[42949672950*.*u]20d
453a [4294967295]17					      |	453a [4294967295010.*u]23d
441[4294967295]15					      |	441[42949672955.*u]19d
452bb[0000007]14					      |	452bb[00000070*u]17d
453b !! [0000007]17					      |	453b !! [00000070*.*u]22d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
11 [                                                          |	11 [                                                         
12 [                                                          |	12 [                                                         
13 [                                                          |	13 [                                                         
453[4294967295]15					      |	453[42949672950*.*u]20d
453a [0000000000000000000000000000000000000000000000000000000 |	453a [0000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
11 [                                                          |	11 [                                                         
12 [                                                          |	12 [                                                         
13 [                                                          |	13 [                                                         
453[4294967295]15					      |	453[42949672950*.*u]20d
453a [0000000000000000000000000000000000000000000000000000000 |	453a [0000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
453b !![0000000007]19					      |	453b !![00000000070*.*u]24d
453c[4294967289]16					      |	453c[42949672890*.*u]21d
453d[4294967289]16					      |	453d[42949672890*.*u]21d
453e[4294967289]16					      |	453e[42949672890*.*u]21d
453f[4294967289]16					      |	453f[4294967289*.*u]20d
453g[0000000007]16					      |	453g[0000000007*.*u]20d
453h[0000000007]16					      |	453h[0000000007-*.*u]21d
 							      |
 							      |
 							      |
 							      |
 PRINTF							      |	 FT_PRINTF
------------------------------------------------------------------------------------------------------------------------------

[0;31m[ KO ]       438 errors
[0m
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o libftprintf.a
------------------------------
|        hexa.c              |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
gcc -Wall -Wextra -Werror -c mypf.c -o mypf.o
gcc -Wall -Wextra -Werror -c condition.c -o condition.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o
-------------------- start[%x]] --------------------	      |	-------------------- start[%eb0f68c0x]] --------------------
-------------------- start while loop with nb[0] ------------ |	-------------------- start while loop with nb[0u] -----------
1 [0]5							      |	1 [0x]6d
1.1 [    0]11						      |	1.1 [    05x]13d
2 [00000]9						      |	2 [0000005x]12d
2.2 [0]7						      |	2.2 [00x]9d
3 ! []6							      |	3 ! [.x]8d
3.1 ! []8						      |	3.1 ! [.0x]11d
3.2 ! [00000]13						      |	3.2 ! [00000.5x]16d
3.3 ! [00000]13						      |	3.3 ! [000000.5x]17d
3.4 ![          ]17					      |	3.4 ![          10.x]21d
3.5 ! [     ]13						      |	3.5 ! [     5.0x]17d
3.6 ! [0000000000]18					      |	3.6 ! [0000000000.10x]22d
3.7 ! [    000000]18					      |	3.7 ! [    00000010.6x]23d
4 [     00000]14					      |	4 [     00000010.5x]20d
5 [0    ]9						      |	5 [0    -5x]12d
5.1 ![00000]12						      |	5.1 ![00000-.5x]16d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [0                                                         |	10 [0                                                        
[                                                             |	[                                                            
[                                                             |	[                                                            
[0                                                            |	[0                                                           
453[0                                                         |	453[0                                                        
10 [0000000000]15					      |	10 [0000000000010.*x]21d
441[    0]10						      |	441[    05.*x]14d
452bb[7                                                       |	452bb[7                                                      
453b !! [7                                                    |	453b !! [7                                                   
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [0    ]10						      |	10 [0    *x]12d
[     ]7						      |	[     *.x]10d
[     ]7						      |	[     *.0x]11d
[0    ]7						      |	[0    *.*x]11d
453[0                                                         |	453[0                                                        
10 [0000000000]15					      |	10 [0000000000010.*x]21d
441[    0]10						      |	441[    05.*x]14d
452bb[7    ]12						      |	452bb[7    0*x]15d
453b !! [7    ]15					      |	453b !! [7    0*.*x]20d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0]6							      |	10 [0*x]8d
[]2							      |	[*.x]5d
[]2							      |	[*.0x]6d
[0]3							      |	[0*.*x]7d
453[0                                                         |	453[0                                                        
10 [          ]15					      |	10 [          010.*x]21d
441[     ]10						      |	441[     5.*x]14d
452bb[7]8						      |	452bb[70*x]11d
453b !! [7]11						      |	453b !! [70*.*x]16d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0]6							      |	10 [0*x]8d
[]2							      |	[*.x]5d
[]2							      |	[*.0x]6d
[0]3							      |	[0*.*x]7d
453[0                                                         |	453[0                                                        
10 [          ]15					      |	10 [          010.*x]21d
441[     ]10						      |	441[     5.*x]14d
452bb[7]8						      |	452bb[70*x]11d
453b !! [7]11						      |	453b !! [70*.*x]16d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [      0]12						      |	10 [      0*x]14d
[       ]9						      |	[       *.x]12d
[       ]9						      |	[       *.0x]13d
[      0]9						      |	[      0*.*x]13d
453[0                                                         |	453[0                                                        
10 [   0000000]15					      |	10 [   0000000010.*x]21d
441[0000000]12						      |	441[00000005.*x]16d
452bb[0000007]14					      |	452bb[00000070*x]17d
453b !! [0000007]17					      |	453b !! [00000070*.*x]22d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
[                                                             |	[                                                            
[                                                             |	[                                                            
[                                                             |	[                                                            
453[0                                                         |	453[0                                                        
10 [000000000000000000000000000000000000000000000000000000000 |	10 [000000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
[                                                             |	[                                                            
[                                                             |	[                                                            
[                                                             |	[                                                            
453[0                                                         |	453[0                                                        
10 [000000000000000000000000000000000000000000000000000000000 |	10 [000000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
-------------------- start while loop with nb[6] ------------ |	-------------------- start while loop with nb[6u] -----------
1 [6]5							      |	1 [6x]6d
1.1 [    6]11						      |	1.1 [    65x]13d
2 [00006]9						      |	2 [0000605x]12d
2.2 [6]7						      |	2.2 [60x]9d
3 ! [6]7						      |	3 ! [6.x]9d
3.1 ! [6]9						      |	3.1 ! [6.0x]12d
3.2 ! [00006]13						      |	3.2 ! [00006.5x]16d
3.3 ! [00006]13						      |	3.3 ! [000060.5x]17d
3.4 ![         6]17					      |	3.4 ![         610.x]21d
3.5 ! [    6]13						      |	3.5 ! [    65.0x]17d
3.6 ! [0000000006]18					      |	3.6 ! [0000000006.10x]22d
3.7 ! [    000006]18					      |	3.7 ! [    00000610.6x]23d
4 [     00006]14					      |	4 [     00006010.5x]20d
5 [6    ]9						      |	5 [6    -5x]12d
5.1 ![00006]12						      |	5.1 ![00006-.5x]16d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [6                                                         |	10 [6                                                        
[6                                                            |	[6                                                           
[6                                                            |	[6                                                           
[6                                                            |	[6                                                           
453[6    ]10						      |	453[6    0*.*x]15d
10 [0000000006]15					      |	10 [0000000006010.*x]21d
441[    6]10						      |	441[    65.*x]14d
452bb[7                                                       |	452bb[7                                                      
453b !! [7                                                    |	453b !! [7                                                   
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [6    ]10						      |	10 [6    *x]12d
[6    ]7						      |	[6    *.x]10d
[6    ]7						      |	[6    *.0x]11d
[6    ]7						      |	[6    *.*x]11d
453[6    ]10						      |	453[6    0*.*x]15d
10 [0000000006]15					      |	10 [0000000006010.*x]21d
441[    6]10						      |	441[    65.*x]14d
452bb[7    ]12						      |	452bb[7    0*x]15d
453b !! [7    ]15					      |	453b !! [7    0*.*x]20d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [6]6							      |	10 [6*x]8d
[6]3							      |	[6*.x]6d
[6]3							      |	[6*.0x]7d
[6]3							      |	[6*.*x]7d
453[6    ]10						      |	453[6    0*.*x]15d
10 [         6]15					      |	10 [         6010.*x]21d
441[    6]10						      |	441[    65.*x]14d
452bb[7]8						      |	452bb[70*x]11d
453b !! [7]11						      |	453b !! [70*.*x]16d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [6]6							      |	10 [6*x]8d
[6]3							      |	[6*.x]6d
[6]3							      |	[6*.0x]7d
[6]3							      |	[6*.*x]7d
453[6    ]10						      |	453[6    0*.*x]15d
10 [         6]15					      |	10 [         6010.*x]21d
441[    6]10						      |	441[    65.*x]14d
452bb[7]8						      |	452bb[70*x]11d
453b !! [7]11						      |	453b !! [70*.*x]16d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [      6]12						      |	10 [      6*x]14d
[      6]9						      |	[      6*.x]12d
[      6]9						      |	[      6*.0x]13d
[      6]9						      |	[      6*.*x]13d
453[6    ]10						      |	453[6    0*.*x]15d
10 [   0000006]15					      |	10 [   0000006010.*x]21d
441[0000006]12						      |	441[00000065.*x]16d
452bb[0000007]14					      |	452bb[00000070*x]17d
453b !! [0000007]17					      |	453b !! [00000070*.*x]22d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
[                                                             |	[                                                            
[                                                             |	[                                                            
[                                                             |	[                                                            
453[6    ]10						      |	453[6    0*.*x]15d
10 [000000000000000000000000000000000000000000000000000000000 |	10 [000000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
[                                                             |	[                                                            
[                                                             |	[                                                            
[                                                             |	[                                                            
453[6    ]10						      |	453[6    0*.*x]15d
10 [000000000000000000000000000000000000000000000000000000000 |	10 [000000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
-------------------- start while loop with nb[451] ---------- |	-------------------- start while loop with nb[451u] ---------
1 [1c3]7						      |	1 [1c3x]8d
1.1 [  1c3]11						      |	1.1 [  1c35x]13d
2 [001c3]9						      |	2 [001c305x]12d
2.2 [1c3]9						      |	2.2 [1c30x]11d
3 ! [1c3]9						      |	3 ! [1c3.x]11d
3.1 ! [1c3]11						      |	3.1 ! [1c3.0x]14d
3.2 ! [001c3]13						      |	3.2 ! [001c3.5x]16d
3.3 ! [001c3]13						      |	3.3 ! [001c30.5x]17d
3.4 ![       1c3]17					      |	3.4 ![       1c310.x]21d
3.5 ! [  1c3]13						      |	3.5 ! [  1c35.0x]17d
3.6 ! [00000001c3]18					      |	3.6 ! [00000001c3.10x]22d
3.7 ! [    0001c3]18					      |	3.7 ! [    0001c310.6x]23d
4 [     001c3]14					      |	4 [     001c3010.5x]20d
5 [1c3  ]9						      |	5 [1c3  -5x]12d
5.1 ![001c3]12						      |	5.1 ![001c3-.5x]16d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [1c3                                                       |	10 [1c3                                                      
[1c3                                                          |	[1c3                                                         
[1c3                                                          |	[1c3                                                         
[1c3                                                          |	[1c3                                                         
453[1c3]8						      |	453[1c30*.*x]13d
10 [00000001c3]15					      |	10 [00000001c3010.*x]21d
441[  1c3]10						      |	441[  1c35.*x]14d
452bb[7                                                       |	452bb[7                                                      
453b !! [7                                                    |	453b !! [7                                                   
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [1c3  ]10						      |	10 [1c3  *x]12d
[1c3  ]7						      |	[1c3  *.x]10d
[1c3  ]7						      |	[1c3  *.0x]11d
[1c3  ]7						      |	[1c3  *.*x]11d
453[1c3]8						      |	453[1c30*.*x]13d
10 [00000001c3]15					      |	10 [00000001c3010.*x]21d
441[  1c3]10						      |	441[  1c35.*x]14d
452bb[7    ]12						      |	452bb[7    0*x]15d
453b !! [7    ]15					      |	453b !! [7    0*.*x]20d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [1c3]8						      |	10 [1c3*x]10d
[1c3]5							      |	[1c3*.x]8d
[1c3]5							      |	[1c3*.0x]9d
[1c3]5							      |	[1c3*.*x]9d
453[1c3]8						      |	453[1c30*.*x]13d
10 [       1c3]15					      |	10 [       1c3010.*x]21d
441[  1c3]10						      |	441[  1c35.*x]14d
452bb[7]8						      |	452bb[70*x]11d
453b !! [7]11						      |	453b !! [70*.*x]16d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [1c3]8						      |	10 [1c3*x]10d
[1c3]5							      |	[1c3*.x]8d
[1c3]5							      |	[1c3*.0x]9d
[1c3]5							      |	[1c3*.*x]9d
453[1c3]8						      |	453[1c30*.*x]13d
10 [       1c3]15					      |	10 [       1c3010.*x]21d
441[  1c3]10						      |	441[  1c35.*x]14d
452bb[7]8						      |	452bb[70*x]11d
453b !! [7]11						      |	453b !! [70*.*x]16d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [    1c3]12						      |	10 [    1c3*x]14d
[    1c3]9						      |	[    1c3*.x]12d
[    1c3]9						      |	[    1c3*.0x]13d
[    1c3]9						      |	[    1c3*.*x]13d
453[1c3]8						      |	453[1c30*.*x]13d
10 [   00001c3]15					      |	10 [   00001c3010.*x]21d
441[00001c3]12						      |	441[00001c35.*x]16d
452bb[0000007]14					      |	452bb[00000070*x]17d
453b !! [0000007]17					      |	453b !! [00000070*.*x]22d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
[                                                             |	[                                                            
[                                                             |	[                                                            
[                                                             |	[                                                            
453[1c3]8						      |	453[1c30*.*x]13d
10 [000000000000000000000000000000000000000000000000000000000 |	10 [000000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
[                                                             |	[                                                            
[                                                             |	[                                                            
[                                                             |	[                                                            
453[1c3]8						      |	453[1c30*.*x]13d
10 [000000000000000000000000000000000000000000000000000000000 |	10 [000000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
-------------------- start while loop with nb[2000000] ------ |	-------------------- start while loop with nb[2000000u] -----
1 [1e8480]10						      |	1 [1e8480x]11d
1.1 [1e8480]12						      |	1.1 [1e84805x]14d
2 [1e8480]10						      |	2 [1e848005x]13d
2.2 [1e8480]12						      |	2.2 [1e84800x]14d
3 ! [1e8480]12						      |	3 ! [1e8480.x]14d
3.1 ! [1e8480]14					      |	3.1 ! [1e8480.0x]17d
3.2 ! [1e8480]14					      |	3.2 ! [1e8480.5x]17d
3.3 ! [1e8480]14					      |	3.3 ! [1e84800.5x]18d
3.4 ![    1e8480]17					      |	3.4 ![    1e848010.x]21d
3.5 ! [1e8480]14					      |	3.5 ! [1e84805.0x]18d
3.6 ! [00001e8480]18					      |	3.6 ! [00001e8480.10x]22d
3.7 ! [    1e8480]18					      |	3.7 ! [    1e848010.6x]23d
4 [    1e8480]14					      |	4 [    1e8480010.5x]20d
5 [1e8480]10						      |	5 [1e8480-5x]13d
5.1 ![1e8480]13						      |	5.1 ![1e8480-.5x]17d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [1e8480                                                    |	10 [1e8480                                                   
[1e8480                                                       |	[1e8480                                                      
[1e8480                                                       |	[1e8480                                                      
[1e8480                                                       |	[1e8480                                                      
453[1e8480]11						      |	453[1e84800*.*x]16d
10 [00001e8480]15					      |	10 [00001e8480010.*x]21d
441[1e8480]11						      |	441[1e84805.*x]15d
452bb[7                                                       |	452bb[7                                                      
453b !! [7                                                    |	453b !! [7                                                   
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [1e8480]11						      |	10 [1e8480*x]13d
[1e8480]8						      |	[1e8480*.x]11d
[1e8480]8						      |	[1e8480*.0x]12d
[1e8480]8						      |	[1e8480*.*x]12d
453[1e8480]11						      |	453[1e84800*.*x]16d
10 [00001e8480]15					      |	10 [00001e8480010.*x]21d
441[1e8480]11						      |	441[1e84805.*x]15d
452bb[7    ]12						      |	452bb[7    0*x]15d
453b !! [7    ]15					      |	453b !! [7    0*.*x]20d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [1e8480]11						      |	10 [1e8480*x]13d
[1e8480]8						      |	[1e8480*.x]11d
[1e8480]8						      |	[1e8480*.0x]12d
[1e8480]8						      |	[1e8480*.*x]12d
453[1e8480]11						      |	453[1e84800*.*x]16d
10 [    1e8480]15					      |	10 [    1e8480010.*x]21d
441[1e8480]11						      |	441[1e84805.*x]15d
452bb[7]8						      |	452bb[70*x]11d
453b !! [7]11						      |	453b !! [70*.*x]16d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [1e8480]11						      |	10 [1e8480*x]13d
[1e8480]8						      |	[1e8480*.x]11d
[1e8480]8						      |	[1e8480*.0x]12d
[1e8480]8						      |	[1e8480*.*x]12d
453[1e8480]11						      |	453[1e84800*.*x]16d
10 [    1e8480]15					      |	10 [    1e8480010.*x]21d
441[1e8480]11						      |	441[1e84805.*x]15d
452bb[7]8						      |	452bb[70*x]11d
453b !! [7]11						      |	453b !! [70*.*x]16d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [ 1e8480]12						      |	10 [ 1e8480*x]14d
[ 1e8480]9						      |	[ 1e8480*.x]12d
[ 1e8480]9						      |	[ 1e8480*.0x]13d
[ 1e8480]9						      |	[ 1e8480*.*x]13d
453[1e8480]11						      |	453[1e84800*.*x]16d
10 [   01e8480]15					      |	10 [   01e8480010.*x]21d
441[01e8480]12						      |	441[01e84805.*x]16d
452bb[0000007]14					      |	452bb[00000070*x]17d
453b !! [0000007]17					      |	453b !! [00000070*.*x]22d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
[                                                             |	[                                                            
[                                                             |	[                                                            
[                                                             |	[                                                            
453[1e8480]11						      |	453[1e84800*.*x]16d
10 [000000000000000000000000000000000000000000000000000000000 |	10 [000000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
[                                                             |	[                                                            
[                                                             |	[                                                            
[                                                             |	[                                                            
453[1e8480]11						      |	453[1e84800*.*x]16d
10 [000000000000000000000000000000000000000000000000000000000 |	10 [000000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
-------------------- start while loop with nb[4294967295] --- |	-------------------- start while loop with nb[4294967295u] --
1 [ffffffff]12						      |	1 [ffffffffx]13d
1.1 [ffffffff]14					      |	1.1 [ffffffff5x]16d
2 [ffffffff]12						      |	2 [ffffffff05x]15d
2.2 [ffffffff]14					      |	2.2 [ffffffff0x]16d
3 ! [ffffffff]14					      |	3 ! [ffffffff.x]16d
3.1 ! [ffffffff]16					      |	3.1 ! [ffffffff.0x]19d
3.2 ! [ffffffff]16					      |	3.2 ! [ffffffff.5x]19d
3.3 ! [ffffffff]16					      |	3.3 ! [ffffffff0.5x]20d
3.4 ![  ffffffff]17					      |	3.4 ![  ffffffff10.x]21d
3.5 ! [ffffffff]16					      |	3.5 ! [ffffffff5.0x]20d
3.6 ! [00ffffffff]18					      |	3.6 ! [00ffffffff.10x]22d
3.7 ! [  ffffffff]18					      |	3.7 ! [  ffffffff10.6x]23d
4 [  ffffffff]14					      |	4 [  ffffffff010.5x]20d
5 [ffffffff]12						      |	5 [ffffffff-5x]15d
5.1 ![ffffffff]15					      |	5.1 ![ffffffff-.5x]19d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [ffffffff                                                  |	10 [ffffffff                                                 
[ffffffff                                                     |	[ffffffff                                                    
[ffffffff                                                     |	[ffffffff                                                    
[ffffffff                                                     |	[ffffffff                                                    
453[ffffffff]13						      |	453[ffffffff0*.*x]18d
10 [00ffffffff]15					      |	10 [00ffffffff010.*x]21d
441[ffffffff]13						      |	441[ffffffff5.*x]17d
452bb[7                                                       |	452bb[7                                                      
453b !! [7                                                    |	453b !! [7                                                   
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [ffffffff]13						      |	10 [ffffffff*x]15d
[ffffffff]10						      |	[ffffffff*.x]13d
[ffffffff]10						      |	[ffffffff*.0x]14d
[ffffffff]10						      |	[ffffffff*.*x]14d
453[ffffffff]13						      |	453[ffffffff0*.*x]18d
10 [00ffffffff]15					      |	10 [00ffffffff010.*x]21d
441[ffffffff]13						      |	441[ffffffff5.*x]17d
452bb[7    ]12						      |	452bb[7    0*x]15d
453b !! [7    ]15					      |	453b !! [7    0*.*x]20d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [ffffffff]13						      |	10 [ffffffff*x]15d
[ffffffff]10						      |	[ffffffff*.x]13d
[ffffffff]10						      |	[ffffffff*.0x]14d
[ffffffff]10						      |	[ffffffff*.*x]14d
453[ffffffff]13						      |	453[ffffffff0*.*x]18d
10 [  ffffffff]15					      |	10 [  ffffffff010.*x]21d
441[ffffffff]13						      |	441[ffffffff5.*x]17d
452bb[7]8						      |	452bb[70*x]11d
453b !! [7]11						      |	453b !! [70*.*x]16d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [ffffffff]13						      |	10 [ffffffff*x]15d
[ffffffff]10						      |	[ffffffff*.x]13d
[ffffffff]10						      |	[ffffffff*.0x]14d
[ffffffff]10						      |	[ffffffff*.*x]14d
453[ffffffff]13						      |	453[ffffffff0*.*x]18d
10 [  ffffffff]15					      |	10 [  ffffffff010.*x]21d
441[ffffffff]13						      |	441[ffffffff5.*x]17d
452bb[7]8						      |	452bb[70*x]11d
453b !! [7]11						      |	453b !! [70*.*x]16d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [ffffffff]13						      |	10 [ffffffff*x]15d
[ffffffff]10						      |	[ffffffff*.x]13d
[ffffffff]10						      |	[ffffffff*.0x]14d
[ffffffff]10						      |	[ffffffff*.*x]14d
453[ffffffff]13						      |	453[ffffffff0*.*x]18d
10 [  ffffffff]15					      |	10 [  ffffffff010.*x]21d
441[ffffffff]13						      |	441[ffffffff5.*x]17d
452bb[0000007]14					      |	452bb[00000070*x]17d
453b !! [0000007]17					      |	453b !! [00000070*.*x]22d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
[                                                             |	[                                                            
[                                                             |	[                                                            
[                                                             |	[                                                            
453[ffffffff]13						      |	453[ffffffff0*.*x]18d
10 [000000000000000000000000000000000000000000000000000000000 |	10 [000000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
[                                                             |	[                                                            
[                                                             |	[                                                            
[                                                             |	[                                                            
453[ffffffff]13						      |	453[ffffffff0*.*x]18d
10 [000000000000000000000000000000000000000000000000000000000 |	10 [000000000000000000000000000000000000000000000000000000000
441[000000000000000000000000000000000000000000000000000000000 |	441[000000000000000000000000000000000000000000000000000000000
452bb[0000000000000000000000000000000000000000000000000000000 |	452bb[0000000000000000000000000000000000000000000000000000000
453b !! [0000000000000000000000000000000000000000000000000000 |	453b !! [0000000000000000000000000000000000000000000000000000
453b !![0000000007]19					      |	453b !![00000000070*.*x]24d
453c[fffffff9]14					      |	453c[fffffff90*.*x]19d
453d[00fffffff9]16					      |	453d[00fffffff90*.*x]21d
453e[fffffff9]14					      |	453e[fffffff90*.*x]19d
453f[fffffff9]14					      |	453f[fffffff9*.*x]18d
453g[0000000007]16					      |	453g[0000000007*.*x]20d
453h[0000000007]16					      |	453h[0000000007-*.*x]21d
55 [5    ]10						      |	55 [5    -5X]13d
56 [5    ]10						      |	56 [5    -5i]13d
 							      |
 							      |
 							      |
 							      |
 PRINTF							      |	 FT_PRINTF
------------------------------------------------------------------------------------------------------------------------------

[0;31m[ KO ]       440 errors
[0m
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o libftprintf.a
------------------------------
|        percent.c           |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
gcc -Wall -Wextra -Werror -c mypf.c -o mypf.o
gcc -Wall -Wextra -Werror -c condition.c -o condition.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o
1 [%]5							      |	1 [%]5d
2 [%]5							      |	2 [%1]6d
3 [              %]19					      |	3 [              %15]21d
4 [              %]19					      |	4 [              %15]21d
5[%]4							      |	5[%0]5d
6[0000%]8						      |	6[0000%05]10d
7[%]4							      |	7[%.]5d
8[         %]13						      |	8[         %10.]16d
9[%]4							      |	9[%.10]7d
10[%]5							      |	10[%.1]7d
11[         %]14					      |	11[         %10.1]18d
12[         %]14					      |	12[         %10.5]18d
[    %]7						      |	[    %5.]9d
[%]3							      |	[%0.5]6d
[%]3							      |	[%.5]5d
446 (-444) [%                                                 |	446 (-444d) [%                                               
446 (-5) [%    ]16					      |	446 (-5d) [%    *]18d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (7) [      %]17					      |	446 (7d) [      %*]19d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
1 [%]5							      |	1 [%]5d
2 [%]5							      |	2 [%1]6d
3 [              %]19					      |	3 [              %15]21d
4 [              %]19					      |	4 [              %15]21d
5[%]4							      |	5[%0]5d
6[0000%]8						      |	6[0000%05]10d
7[%]4							      |	7[%.]5d
8[         %]13						      |	8[         %10.]16d
9[%]4							      |	9[%.10]7d
10[%]5							      |	10[%.1]7d
11[         %]14					      |	11[         %10.1]18d
12[         %]14					      |	12[         %10.5]18d
[    %]7						      |	[    %5.]9d
[%]3							      |	[%0.5]6d
[%]3							      |	[%.5]5d
446 (-444) [%                                                 |	446 (-444d) [%                                               
446 (-5) [%    ]16					      |	446 (-5d) [%    *]18d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (7) [      %]17					      |	446 (7d) [      %*]19d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
1 [%]5							      |	1 [%]5d
2 [%]5							      |	2 [%1]6d
3 [              %]19					      |	3 [              %15]21d
4 [              %]19					      |	4 [              %15]21d
5[%]4							      |	5[%0]5d
6[0000%]8						      |	6[0000%05]10d
7[%]4							      |	7[%.]5d
8[         %]13						      |	8[         %10.]16d
9[%]4							      |	9[%.10]7d
10[%]5							      |	10[%.1]7d
11[         %]14					      |	11[         %10.1]18d
12[         %]14					      |	12[         %10.5]18d
[    %]7						      |	[    %5.]9d
[%]3							      |	[%0.5]6d
[%]3							      |	[%.5]5d
446 (-444) [%                                                 |	446 (-444d) [%                                               
446 (-5) [%    ]16					      |	446 (-5d) [%    *]18d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (7) [      %]17					      |	446 (7d) [      %*]19d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
1 [%]5							      |	1 [%]5d
2 [%]5							      |	2 [%1]6d
3 [              %]19					      |	3 [              %15]21d
4 [              %]19					      |	4 [              %15]21d
5[%]4							      |	5[%0]5d
6[0000%]8						      |	6[0000%05]10d
7[%]4							      |	7[%.]5d
8[         %]13						      |	8[         %10.]16d
9[%]4							      |	9[%.10]7d
10[%]5							      |	10[%.1]7d
11[         %]14					      |	11[         %10.1]18d
12[         %]14					      |	12[         %10.5]18d
[    %]7						      |	[    %5.]9d
[%]3							      |	[%0.5]6d
[%]3							      |	[%.5]5d
446 (-444) [%                                                 |	446 (-444d) [%                                               
446 (-5) [%    ]16					      |	446 (-5d) [%    *]18d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (7) [      %]17					      |	446 (7d) [      %*]19d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
1 [%]5							      |	1 [%]5d
2 [%]5							      |	2 [%1]6d
3 [              %]19					      |	3 [              %15]21d
4 [              %]19					      |	4 [              %15]21d
5[%]4							      |	5[%0]5d
6[0000%]8						      |	6[0000%05]10d
7[%]4							      |	7[%.]5d
8[         %]13						      |	8[         %10.]16d
9[%]4							      |	9[%.10]7d
10[%]5							      |	10[%.1]7d
11[         %]14					      |	11[         %10.1]18d
12[         %]14					      |	12[         %10.5]18d
[    %]7						      |	[    %5.]9d
[%]3							      |	[%0.5]6d
[%]3							      |	[%.5]5d
446 (-444) [%                                                 |	446 (-444d) [%                                               
446 (-5) [%    ]16					      |	446 (-5d) [%    *]18d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (7) [      %]17					      |	446 (7d) [      %*]19d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
1 [%]5							      |	1 [%]5d
2 [%]5							      |	2 [%1]6d
3 [              %]19					      |	3 [              %15]21d
4 [              %]19					      |	4 [              %15]21d
5[%]4							      |	5[%0]5d
6[0000%]8						      |	6[0000%05]10d
7[%]4							      |	7[%.]5d
8[         %]13						      |	8[         %10.]16d
9[%]4							      |	9[%.10]7d
10[%]5							      |	10[%.1]7d
11[         %]14					      |	11[         %10.1]18d
12[         %]14					      |	12[         %10.5]18d
[    %]7						      |	[    %5.]9d
[%]3							      |	[%0.5]6d
[%]3							      |	[%.5]5d
446 (-444) [%                                                 |	446 (-444d) [%                                               
446 (-5) [%    ]16					      |	446 (-5d) [%    *]18d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (0) [%]11						      |	446 (0d) [%*]13d
446 (7) [      %]17					      |	446 (7d) [      %*]19d
446 (222) [                                                   |	446 (222d) [                                                 
446 (555) [                                                   |	446 (555d) [                                                 
452bb[%         ]17					      |	452bb[%         0*]19d
453c[%    ]11						      |	453c[%    0*.*]15d
453d[%    ]11						      |	453d[%    0*.*]15d
453e[0000%]11						      |	453e[0000%0*.*]15d
452b[%    ]11						      |	452b[%    *.*]14d
452c[    %]11						      |	452c[    %*.*]14d
454[%    ]10						      |	454[%    -*.*]14d
 							      |
 							      |
 							      |
 							      |
 PRINTF							      |	 FT_PRINTF
------------------------------------------------------------------------------------------------------------------------------

[0;31m[ KO ]       139 errors
[0m
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o libftprintf.a
------------------------------
|        pointer.c           |
|                            |
------------------------------

gcc -Wall -Wextra -Werror -c ft_printf_util1.c -o ft_printf_util1.o
gcc -Wall -Wextra -Werror -c ft_printf_util2.c -o ft_printf_util2.o
gcc -Wall -Wextra -Werror -c ft_printf_util3.c -o ft_printf_util3.o
gcc -Wall -Wextra -Werror -c ft_printf.c -o ft_printf.o
gcc -Wall -Wextra -Werror -c mypf.c -o mypf.o
gcc -Wall -Wextra -Werror -c condition.c -o condition.o
ar rc libftprintf.a ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o
/********************     %p     *******************/	      |	/********************     %0x7ffeea9848c0p     **************
-------------------- start while loop with nb[0] ------------ |	-------------------- start while loop with nb[0u] -----------
1 [0x7ffeebad4880]18					      |	1 [0x7ffeea984880p]19d
2 [NULL is undef] [0x0]23				      |	2 [NULL is undef] [0x0p]24d
1.1 [0x7ffeebad4880]20					      |	1.1 [0x7ffeea9848805p]22d
3 ! [0x7ffeebad4880]20					      |	3 ! [0x7ffeea984880.p]22d
3.4 ![0x7ffeebad4880]21					      |	3.4 ![0x7ffeea98488010.p]25d
5 [0x7ffeebad4880]18					      |	5 [0x7ffeea984880-5p]21d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [0x7ffeebad4880                                            |	10 [0x7ffeea984880                                           
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [0x7ffeebad4880]19					      |	10 [0x7ffeea984880*p]21d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0x7ffeebad4880]19					      |	10 [0x7ffeea984880*p]21d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0x7ffeebad4880]19					      |	10 [0x7ffeea984880*p]21d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [0x7ffeebad4880]19					      |	10 [0x7ffeea984880*p]21d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
-------------------- start while loop with nb[6] ------------ |	-------------------- start while loop with nb[6u] -----------
1 [0x7ffeebad4884]18					      |	1 [0x7ffeea984884p]19d
2 [NULL is undef] [0x0]23				      |	2 [NULL is undef] [0x0p]24d
1.1 [0x7ffeebad4884]20					      |	1.1 [0x7ffeea9848845p]22d
3 ! [0x7ffeebad4884]20					      |	3 ! [0x7ffeea984884.p]22d
3.4 ![0x7ffeebad4884]21					      |	3.4 ![0x7ffeea98488410.p]25d
5 [0x7ffeebad4884]18					      |	5 [0x7ffeea984884-5p]21d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [0x7ffeebad4884                                            |	10 [0x7ffeea984884                                           
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [0x7ffeebad4884]19					      |	10 [0x7ffeea984884*p]21d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0x7ffeebad4884]19					      |	10 [0x7ffeea984884*p]21d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0x7ffeebad4884]19					      |	10 [0x7ffeea984884*p]21d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [0x7ffeebad4884]19					      |	10 [0x7ffeea984884*p]21d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
-------------------- start while loop with nb[451] ---------- |	-------------------- start while loop with nb[451u] ---------
1 [0x7ffeebad4888]18					      |	1 [0x7ffeea984888p]19d
2 [NULL is undef] [0x0]23				      |	2 [NULL is undef] [0x0p]24d
1.1 [0x7ffeebad4888]20					      |	1.1 [0x7ffeea9848885p]22d
3 ! [0x7ffeebad4888]20					      |	3 ! [0x7ffeea984888.p]22d
3.4 ![0x7ffeebad4888]21					      |	3.4 ![0x7ffeea98488810.p]25d
5 [0x7ffeebad4888]18					      |	5 [0x7ffeea984888-5p]21d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [0x7ffeebad4888                                            |	10 [0x7ffeea984888                                           
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [0x7ffeebad4888]19					      |	10 [0x7ffeea984888*p]21d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0x7ffeebad4888]19					      |	10 [0x7ffeea984888*p]21d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0x7ffeebad4888]19					      |	10 [0x7ffeea984888*p]21d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [0x7ffeebad4888]19					      |	10 [0x7ffeea984888*p]21d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
-------------------- start while loop with nb[2000000] ------ |	-------------------- start while loop with nb[2000000u] -----
1 [0x7ffeebad488c]18					      |	1 [0x7ffeea98488cp]19d
2 [NULL is undef] [0x0]23				      |	2 [NULL is undef] [0x0p]24d
1.1 [0x7ffeebad488c]20					      |	1.1 [0x7ffeea98488c5p]22d
3 ! [0x7ffeebad488c]20					      |	3 ! [0x7ffeea98488c.p]22d
3.4 ![0x7ffeebad488c]21					      |	3.4 ![0x7ffeea98488c10.p]25d
5 [0x7ffeebad488c]18					      |	5 [0x7ffeea98488c-5p]21d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [0x7ffeebad488c                                            |	10 [0x7ffeea98488c                                           
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [0x7ffeebad488c]19					      |	10 [0x7ffeea98488c*p]21d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0x7ffeebad488c]19					      |	10 [0x7ffeea98488c*p]21d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0x7ffeebad488c]19					      |	10 [0x7ffeea98488c*p]21d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [0x7ffeebad488c]19					      |	10 [0x7ffeea98488c*p]21d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
-------------------- start while loop with nb[4294967295] --- |	-------------------- start while loop with nb[4294967295u] --
1 [0x7ffeebad4890]18					      |	1 [0x7ffeea984890p]19d
2 [NULL is undef] [0x0]23				      |	2 [NULL is undef] [0x0p]24d
1.1 [0x7ffeebad4890]20					      |	1.1 [0x7ffeea9848905p]22d
3 ! [0x7ffeebad4890]20					      |	3 ! [0x7ffeea984890.p]22d
3.4 ![0x7ffeebad4890]21					      |	3.4 ![0x7ffeea98489010.p]25d
5 [0x7ffeebad4890]18					      |	5 [0x7ffeea984890-5p]21d
**********  [  * loop with -444 ]  *********		      |	**********  [  * loop with -444d ]  *********
10 [0x7ffeebad4890                                            |	10 [0x7ffeea984890                                           
**********  [  * loop with -5 ]  *********		      |	**********  [  * loop with -5d ]  *********
10 [0x7ffeebad4890]19					      |	10 [0x7ffeea984890*p]21d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0x7ffeebad4890]19					      |	10 [0x7ffeea984890*p]21d
**********  [  * loop with 0 ]  *********		      |	**********  [  * loop with 0d ]  *********
10 [0x7ffeebad4890]19					      |	10 [0x7ffeea984890*p]21d
**********  [  * loop with 7 ]  *********		      |	**********  [  * loop with 7d ]  *********
10 [0x7ffeebad4890]19					      |	10 [0x7ffeea984890*p]21d
**********  [  * loop with 222 ]  *********		      |	**********  [  * loop with 222d ]  *********
10 [                                                          |	10 [                                                         
**********  [  * loop with 555 ]  *********		      |	**********  [  * loop with 555d ]  *********
10 [                                                          |	10 [                                                         
 							      |
 							      |
 							      |
 							      |
 PRINTF							      |	 FT_PRINTF
------------------------------------------------------------------------------------------------------------------------------
[1;32m
[ KO ] But it's ok, it is the pointer test, you have to compare the results by yourself
[0m
Please select: 1, 2, 3, or 4


[ next (1) ]  |  [ show diff (2) ]  |  [ show printf results ] (3)  |  [ show ft_printf results ] (4)  |

rm -f ft_printf_util1.o ft_printf_util2.o ft_printf_util3.o ft_printf.o mypf.o condition.o libftprintf.a
######### 42TESTERS-PRINTF ##########
#####42TESTS-PRINTF#####
----------Test 1 : ----------
"Simple input test" // 1st '*' = -4, 2nd '*' = 0

1c1
< Simple input test --- Return : 17d
---
> Simple input test --- Return : 17

----------Test 2 : ----------
"%i, %d, %d, %d, %d, %s, %c, %d, %u, %x, %X" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8i, -12d, 123456789d, 0d, -12345678d, abcdefghijklmnops, ac, 97d, 4294967284u, fffffff4x, FFFFFFF4X --- Return : 99d
---
> 8, -12, 123456789, 0, -12345678, abcdefghijklmnop, a, 97, 4294967284, fffffff4, FFFFFFF4 --- Return : 88

----------Test 3 : ----------
"%0i, %0d, %0d, %0d, %0d, %0d, %0d, %0d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 80i, -120d, 1234567890d, 00d, -123456780d, 970d, -21474836480d, 21474836470d --- Return : 76d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 4 : ----------
"%1i, %1d, %1d, %1d, %1d, %1d, %1d, %1d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 81i, -121d, 1234567891d, 01d, -123456781d, 971d, -21474836481d, 21474836471d --- Return : 76d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 5 : ----------
"%2i, %2d, %2d, %2d, %2d, %2d, %2d, %2d" // 1st '*' = -4, 2nd '*' = 0

1c1
<  82i, -122d, 1234567892d,  02d, -123456782d, 972d, -21474836482d, 21474836472d --- Return : 78d
---
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 6 : ----------
"%3i, %3d, %3d, %3d, %3d, %3d, %3d, %3d" // 1st '*' = -4, 2nd '*' = 0

1c1
<   83i, -123d, 1234567893d,   03d, -123456783d,  973d, -21474836483d, 21474836473d --- Return : 81d
---
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 7 : ----------
"%4i, %4d, %4d, %4d, %4d, %4d, %4d, %4d" // 1st '*' = -4, 2nd '*' = 0

1c1
<    84i,  -124d, 1234567894d,    04d, -123456784d,   974d, -21474836484d, 21474836474d --- Return : 85d
---
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 8 : ----------
"%5i, %5d, %5d, %5d, %5d, %5d, %5d, %5d" // 1st '*' = -4, 2nd '*' = 0

1c1
<     85i,   -125d, 1234567895d,     05d, -123456785d,    975d, -21474836485d, 21474836475d --- Return : 89d
---
>     8,   -12, 123456789,     0, -12345678,    97, -2147483648, 2147483647 --- Return : 73

----------Test 9 : ----------
"%6i, %6d, %6d, %6d, %6d, %6d, %6d, %6d" // 1st '*' = -4, 2nd '*' = 0

1c1
<      86i,    -126d, 1234567896d,      06d, -123456786d,     976d, -21474836486d, 21474836476d --- Return : 93d
---
>      8,    -12, 123456789,      0, -12345678,     97, -2147483648, 2147483647 --- Return : 77

----------Test 10 : ----------
"%7i, %7d, %7d, %7d, %7d, %7d, %7d, %7d" // 1st '*' = -4, 2nd '*' = 0

1c1
<       87i,     -127d, 1234567897d,       07d, -123456787d,      977d, -21474836487d, 21474836477d --- Return : 97d
---
>       8,     -12, 123456789,       0, -12345678,      97, -2147483648, 2147483647 --- Return : 81

----------Test 11 : ----------
"%8i, %8d, %8d, %8d, %8d, %8d, %8d, %8d" // 1st '*' = -4, 2nd '*' = 0

1c1
<        88i,      -128d, 1234567898d,        08d, -123456788d,       978d, -21474836488d, 21474836478d --- Return : 101d
---
>        8,      -12, 123456789,        0, -12345678,       97, -2147483648, 2147483647 --- Return : 85

----------Test 12 : ----------
"%0.i, %0.d, %0.d, %0.d, %0.d, %0.d, %0.d, %0.d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 80.i, -120.d, 1234567890.d, 0.d, -123456780.d, 970.d, -21474836480.d, 21474836470.d --- Return : 83d
---
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 13 : ----------
"%.0i, %.0d, %.0d, %.0d, %.0d, %.0d, %.0d, %.0d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8.0i, -12.0d, 123456789.0d, .0d, -12345678.0d, 97.0d, -2147483648.0d, 2147483647.0d --- Return : 83d
---
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 14 : ----------
"%0.0i, %0.0d, %0.0d, %0.0d, %0.0d, %0.0d, %0.0d, %0.0d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 80.0i, -120.0d, 1234567890.0d, 0.0d, -123456780.0d, 970.0d, -21474836480.0d, 21474836470.0d --- Return : 91d
---
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 15 : ----------
"%-0i, %-0d, %-0d, %-0d, %-0d, %-0d, %-0d, %-0d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-0i, -12-0d, 123456789-0d, 0-0d, -12345678-0d, 97-0d, -2147483648-0d, 2147483647-0d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 16 : ----------
"%0-i, %0-d, %0-d, %0-d, %0-d, %0-d, %0-d, %0-d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 80-i, -120-d, 1234567890-d, 00-d, -123456780-d, 970-d, -21474836480-d, 21474836470-d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 17 : ----------
"%-.i, %-.d, %-.d, %-.d, %-.d, %-.d, %-.d, %-.d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-.i, -12-.d, 123456789-.d, -.d, -12345678-.d, 97-.d, -2147483648-.d, 2147483647-.d --- Return : 83d
---
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 18 : ----------
"%-.0i, %-.0d, %-.0d, %-.0d, %-.0d, %-.0d, %-.0d, %-.0d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-.0i, -12-.0d, 123456789-.0d, -.0d, -12345678-.0d, 97-.0d, -2147483648-.0d, 2147483647-.0d --- Return : 91d
---
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 19 : ----------
"%-i, %-d, %-d, %-d, %-d, %-d, %-d, %-d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-i, -12-d, 123456789-d, 0-d, -12345678-d, 97-d, -2147483648-d, 2147483647-d --- Return : 76d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 20 : ----------
"%.i, %.d, %.d, %.d, %.d, %.d, %.d, %.d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8.i, -12.d, 123456789.d, .d, -12345678.d, 97.d, -2147483648.d, 2147483647.d --- Return : 75d
---
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 21 : ----------
"%-0.0i, %-0.0d, %-0.0d, %-0.0d, %-0.0d, %-0.0d, %-0.0d, %-0.0d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-0.0i, -12-0.0d, 123456789-0.0d, -0.0d, -12345678-0.0d, 97-0.0d, -2147483648-0.0d, 2147483647-0.0d --- Return : 99d
---
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 22 : ----------
"%00i, %00d, %00d, %00d, %00d, %00d, %00d, %00d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 800i, -1200d, 12345678900d, 000d, -1234567800d, 9700d, -214748364800d, 214748364700d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 23 : ----------
"%1.i, %1.d, %1.d, %1.d, %1.d, %1.d, %1.d, %1.d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 81.i, -121.d, 1234567891.d,  1.d, -123456781.d, 971.d, -21474836481.d, 21474836471.d --- Return : 84d
---
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 24 : ----------
"%.1i, %.1d, %.1d, %.1d, %.1d, %.1d, %.1d, %.1d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8.1i, -12.1d, 123456789.1d, 0.1d, -12345678.1d, 97.1d, -2147483648.1d, 2147483647.1d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 25 : ----------
"%1.1i, %1.1d, %1.1d, %1.1d, %1.1d, %1.1d, %1.1d, %1.1d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 81.1i, -121.1d, 1234567891.1d, 01.1d, -123456781.1d, 971.1d, -21474836481.1d, 21474836471.1d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 26 : ----------
"%-1i, %-1d, %-1d, %-1d, %-1d, %-1d, %-1d, %-1d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-1i, -12-1d, 123456789-1d, 0-1d, -12345678-1d, 97-1d, -2147483648-1d, 2147483647-1d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 27 : ----------
"%-01i, %-01d, %-01d, %-01d, %-01d, %-01d, %-01d, %-01d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-01i, -12-01d, 123456789-01d, 0-01d, -12345678-01d, 97-01d, -2147483648-01d, 2147483647-01d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 28 : ----------
"%-1.i, %-1.d, %-1.d, %-1.d, %-1.d, %-1.d, %-1d, %-1d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-1.i, -12-1.d, 123456789-1.d,  -1.d, -12345678-1.d, 97-1.d, -2147483648-1d, 2147483647-1d --- Return : 90d
---
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 29 : ----------
"%-.1i, %-.1d, %-.1d, %-.1d, %-.1d, %-.1d, %-.1d, %-.1d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-.1i, -12-.1d, 123456789-.1d, 0-.1d, -12345678-.1d, 97-.1d, -2147483648-.1d, 2147483647-.1d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 30 : ----------
"%-0.1i, %-0.1d, %-0.1d, %-0.1d, %-0.1d, %-0.1d, %-0.1d, %-0.1d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-0.1i, -12-0.1d, 123456789-0.1d, 0-0.1d, -12345678-0.1d, 97-0.1d, -2147483648-0.1d, 2147483647-0.1d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 31 : ----------
"%-1.0i, %-1.0d, %-1.0d, %-1.0d, %-1.0d, %-1.0d, %-1.0d, %-1.0d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-1.0i, -12-1.0d, 123456789-1.0d,  -1.0d, -12345678-1.0d, 97-1.0d, -2147483648-1.0d, 2147483647-1.0d --- Return : 100d
---
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 32 : ----------
"%-1.1i, %-1.1d, %-1.1d, %-1.1d, %-1.1d, %-1.1d, %-1.1d, %-1.1d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8-1.1i, -12-1.1d, 123456789-1.1d, 0-1.1d, -12345678-1.1d, 97-1.1d, -2147483648-1.1d, 2147483647-1.1d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 33 : ----------
"%1.0i, %1.0d, %1.0d, %1.0d, %1.0d, %1.0d, %1.0d, %1.0d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 81.0i, -121.0d, 1234567891.0d,  1.0d, -123456781.0d, 971.0d, -21474836481.0d, 21474836471.0d --- Return : 92d
---
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 34 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8   *i, -12 *d, 123456789*d, 0   *d, -12345678*d, 97  *d, -2147483648*d, 2147483647*d --- Return : 85d
---
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 35 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8   0*i, -12 0*d, 1234567890*d, 0   0*d, -123456780*d, 97  0*d, -21474836480*d, 21474836470*d --- Return : 93d
---
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 36 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8   -*i, -12 -*d, 123456789-*d, 0   -*d, -12345678-*d, 97  -*d, -2147483648-*d, 2147483647-*d --- Return : 93d
---
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 37 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = -4, 2nd '*' = 0

1c1
< 8.*i, -12.*d, 123456789.*d, 0.*d, -12345678.*d, 97.*d, -2147483648.*d, 2147483647.*d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 38 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = -3, 2nd '*' = 0

1c1
< 8  *i, -12*d, 123456789*d, 0  *d, -12345678*d, 97 *d, -2147483648*d, 2147483647*d --- Return : 81d
---
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 39 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = -3, 2nd '*' = 0

1c1
< 8  0*i, -120*d, 1234567890*d, 0  0*d, -123456780*d, 97 0*d, -21474836480*d, 21474836470*d --- Return : 89d
---
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 40 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = -3, 2nd '*' = 0

1c1
< 8  -*i, -12-*d, 123456789-*d, 0  -*d, -12345678-*d, 97 -*d, -2147483648-*d, 2147483647-*d --- Return : 89d
---
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 41 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = -3, 2nd '*' = 0

1c1
< 8.*i, -12.*d, 123456789.*d, 0.*d, -12345678.*d, 97.*d, -2147483648.*d, 2147483647.*d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 42 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = -2, 2nd '*' = 0

1c1
< 8 *i, -12*d, 123456789*d, 0 *d, -12345678*d, 97*d, -2147483648*d, 2147483647*d --- Return : 78d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 43 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = -2, 2nd '*' = 0

1c1
< 8 0*i, -120*d, 1234567890*d, 0 0*d, -123456780*d, 970*d, -21474836480*d, 21474836470*d --- Return : 86d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 44 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = -2, 2nd '*' = 0

1c1
< 8 -*i, -12-*d, 123456789-*d, 0 -*d, -12345678-*d, 97-*d, -2147483648-*d, 2147483647-*d --- Return : 86d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 45 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = -2, 2nd '*' = 0

1c1
< 8.*i, -12.*d, 123456789.*d, 0.*d, -12345678.*d, 97.*d, -2147483648.*d, 2147483647.*d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 46 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = -1, 2nd '*' = 0

1c1
< 8*i, -12*d, 123456789*d, 0*d, -12345678*d, 97*d, -2147483648*d, 2147483647*d --- Return : 76d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 47 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = -1, 2nd '*' = 0

1c1
< 80*i, -120*d, 1234567890*d, 00*d, -123456780*d, 970*d, -21474836480*d, 21474836470*d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 48 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = -1, 2nd '*' = 0

1c1
< 8-*i, -12-*d, 123456789-*d, 0-*d, -12345678-*d, 97-*d, -2147483648-*d, 2147483647-*d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 49 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = -1, 2nd '*' = 0

1c1
< 8.*i, -12.*d, 123456789.*d, 0.*d, -12345678.*d, 97.*d, -2147483648.*d, 2147483647.*d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 50 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = 0, 2nd '*' = 0

1c1
< 8*i, -12*d, 123456789*d, 0*d, -12345678*d, 97*d, -2147483648*d, 2147483647*d --- Return : 76d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 51 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = 0, 2nd '*' = 0

1c1
< 80*i, -120*d, 1234567890*d, 00*d, -123456780*d, 970*d, -21474836480*d, 21474836470*d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 52 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = 0, 2nd '*' = 0

1c1
< 8-*i, -12-*d, 123456789-*d, 0-*d, -12345678-*d, 97-*d, -2147483648-*d, 2147483647-*d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 53 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = 0, 2nd '*' = 0

1c1
< 8.*i, -12.*d, 123456789.*d, .*d, -12345678.*d, 97.*d, -2147483648.*d, 2147483647.*d --- Return : 83d
---
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 54 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = 1, 2nd '*' = 0

1c1
< 8*i, -12*d, 123456789*d, 0*d, -12345678*d, 97*d, -2147483648*d, 2147483647*d --- Return : 76d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 55 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = 1, 2nd '*' = 0

1c1
< 80*i, -120*d, 1234567890*d, 00*d, -123456780*d, 970*d, -21474836480*d, 21474836470*d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 56 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = 1, 2nd '*' = 0

1c1
< 8-*i, -12-*d, 123456789-*d, 0-*d, -12345678-*d, 97-*d, -2147483648-*d, 2147483647-*d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 57 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = 1, 2nd '*' = 0

1c1
< 8.*i, -12.*d, 123456789.*d, 0.*d, -12345678.*d, 97.*d, -2147483648.*d, 2147483647.*d --- Return : 84d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 58 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = 2, 2nd '*' = 0

1c1
<  8*i, -12*d, 123456789*d,  0*d, -12345678*d, 97*d, -2147483648*d, 2147483647*d --- Return : 78d
---
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 59 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = 2, 2nd '*' = 0

1c1
< 080*i, -120*d, 1234567890*d, 000*d, -123456780*d, 970*d, -21474836480*d, 21474836470*d --- Return : 86d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 60 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = 2, 2nd '*' = 0

1c1
< 8 -*i, -12-*d, 123456789-*d, 0 -*d, -12345678-*d, 97-*d, -2147483648-*d, 2147483647-*d --- Return : 86d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 61 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = 2, 2nd '*' = 0

1c1
< 08.*i, -12.*d, 123456789.*d, 00.*d, -12345678.*d, 97.*d, -2147483648.*d, 2147483647.*d --- Return : 86d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 62 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = 3, 2nd '*' = 0

1c1
<   8*i, -12*d, 123456789*d,   0*d, -12345678*d,  97*d, -2147483648*d, 2147483647*d --- Return : 81d
---
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 63 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = 3, 2nd '*' = 0

1c1
< 0080*i, -120*d, 1234567890*d, 0000*d, -123456780*d, 0970*d, -21474836480*d, 21474836470*d --- Return : 89d
---
> 008, -12, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 65

----------Test 64 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = 3, 2nd '*' = 0

1c1
< 8  -*i, -12-*d, 123456789-*d, 0  -*d, -12345678-*d, 97 -*d, -2147483648-*d, 2147483647-*d --- Return : 89d
---
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 65 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = 3, 2nd '*' = 0

1c1
< 008.*i, -012.*d, 123456789.*d, 000.*d, -12345678.*d, 097.*d, -2147483648.*d, 2147483647.*d --- Return : 90d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 66 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*d, %*d" // 1st '*' = 4, 2nd '*' = 0

1c1
<    8*i,  -12*d, 123456789*d,    0*d, -12345678*d,   97*d, -2147483648*d, 2147483647*d --- Return : 85d
---
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 67 : ----------
"%0*i, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d, %0*d" // 1st '*' = 4, 2nd '*' = 0

1c1
< 00080*i, -0120*d, 1234567890*d, 00000*d, -123456780*d, 00970*d, -21474836480*d, 21474836470*d --- Return : 93d
---
> 0008, -012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 69

----------Test 68 : ----------
"%-*i, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d, %-*d" // 1st '*' = 4, 2nd '*' = 0

1c1
< 8   -*i, -12 -*d, 123456789-*d, 0   -*d, -12345678-*d, 97  -*d, -2147483648-*d, 2147483647-*d --- Return : 93d
---
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 69 : ----------
"%.*i, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d, %.*d" // 1st '*' = 4, 2nd '*' = 0

1c1
< 0008.*i, -0012.*d, 123456789.*d, 0000.*d, -12345678.*d, 0097.*d, -2147483648.*d, 2147483647.*d --- Return : 94d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 70 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = -2

1c1
< 8 *.*i, -12*.*d, 123456789*.*d, 0 *.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 71 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = -2

1c1
< 8 -*.*i, -12-*.*d, 123456789-*.*d, 0 -*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 72 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = -2

1c1
< 8 0*.*i, -120*.*d, 1234567890*.*d, 0 0*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 73 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = -1

1c1
< 8 *.*i, -12*.*d, 123456789*.*d, 0 *.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 74 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = -1

1c1
< 8 -*.*i, -12-*.*d, 123456789-*.*d, 0 -*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 75 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = -1

1c1
< 8 0*.*i, -120*.*d, 1234567890*.*d, 0 0*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 76 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = 0

1c1
< 8 *.*i, -12*.*d, 123456789*.*d,   *.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
> 8 , -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 77 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = 0

1c1
< 8 -*.*i, -12-*.*d, 123456789-*.*d,   -*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 8 , -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 78 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = 0

1c1
< 8 0*.*i, -120*.*d, 1234567890*.*d,   0*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
> 8 , -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 79 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = 1

1c1
< 8 *.*i, -12*.*d, 123456789*.*d, 0 *.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 80 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = 1

1c1
< 8 -*.*i, -12-*.*d, 123456789-*.*d, 0 -*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 81 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = 1

1c1
< 8 0*.*i, -120*.*d, 1234567890*.*d, 0 0*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 82 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = 2

1c1
< 08*.*i, -12*.*d, 123456789*.*d, 00*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 83 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = 2

1c1
< 08-*.*i, -12-*.*d, 123456789-*.*d, 00-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 84 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = 2

1c1
< 080*.*i, -120*.*d, 1234567890*.*d, 000*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 85 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = 3

1c1
< 008*.*i, -012*.*d, 123456789*.*d, 000*.*d, -12345678*.*d, 097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 98d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 86 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = 3

1c1
< 008-*.*i, -012-*.*d, 123456789-*.*d, 000-*.*d, -12345678-*.*d, 097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 87 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = 3

1c1
< 0080*.*i, -0120*.*d, 1234567890*.*d, 0000*.*d, -123456780*.*d, 0970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 88 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -2, 2nd '*' = 4

1c1
< 0008*.*i, -0012*.*d, 123456789*.*d, 0000*.*d, -12345678*.*d, 0097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 102d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 89 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -2, 2nd '*' = 4

1c1
< 0008-*.*i, -0012-*.*d, 123456789-*.*d, 0000-*.*d, -12345678-*.*d, 0097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 90 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -2, 2nd '*' = 4

1c1
< 00080*.*i, -00120*.*d, 1234567890*.*d, 00000*.*d, -123456780*.*d, 00970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 91 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = -2

1c1
< 8*.*i, -12*.*d, 123456789*.*d, 0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 92 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = -2

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d, 0-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 93 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = -2

1c1
< 80*.*i, -120*.*d, 1234567890*.*d, 00*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 94 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = -1

1c1
< 8*.*i, -12*.*d, 123456789*.*d, 0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 95 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = -1

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d, 0-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 96 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = -1

1c1
< 80*.*i, -120*.*d, 1234567890*.*d, 00*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 97 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = 0

1c1
< 8*.*i, -12*.*d, 123456789*.*d,  *.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 92d
---
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 98 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = 0

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d,  -*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 100d
---
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 99 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = 0

1c1
< 80*.*i, -120*.*d, 1234567890*.*d,  0*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 100d
---
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 100 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = 1

1c1
< 8*.*i, -12*.*d, 123456789*.*d, 0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 101 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = 1

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d, 0-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 102 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = 1

1c1
< 80*.*i, -120*.*d, 1234567890*.*d, 00*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 103 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = 2

1c1
< 08*.*i, -12*.*d, 123456789*.*d, 00*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 104 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = 2

1c1
< 08-*.*i, -12-*.*d, 123456789-*.*d, 00-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 105 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = 2

1c1
< 080*.*i, -120*.*d, 1234567890*.*d, 000*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 106 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = 3

1c1
< 008*.*i, -012*.*d, 123456789*.*d, 000*.*d, -12345678*.*d, 097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 98d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 107 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = 3

1c1
< 008-*.*i, -012-*.*d, 123456789-*.*d, 000-*.*d, -12345678-*.*d, 097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 108 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = 3

1c1
< 0080*.*i, -0120*.*d, 1234567890*.*d, 0000*.*d, -123456780*.*d, 0970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 109 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = -1, 2nd '*' = 4

1c1
< 0008*.*i, -0012*.*d, 123456789*.*d, 0000*.*d, -12345678*.*d, 0097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 102d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 110 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = -1, 2nd '*' = 4

1c1
< 0008-*.*i, -0012-*.*d, 123456789-*.*d, 0000-*.*d, -12345678-*.*d, 0097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 111 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = -1, 2nd '*' = 4

1c1
< 00080*.*i, -00120*.*d, 1234567890*.*d, 00000*.*d, -123456780*.*d, 00970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 112 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = -2

1c1
< 8*.*i, -12*.*d, 123456789*.*d, 0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 113 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = -2

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d, 0-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 114 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = -2

1c1
< 80*.*i, -120*.*d, 1234567890*.*d, 00*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 115 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = -1

1c1
< 8*.*i, -12*.*d, 123456789*.*d, 0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 116 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = -1

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d, 0-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 117 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = -1

1c1
< 80*.*i, -120*.*d, 1234567890*.*d, 00*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 118 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = 0

1c1
< 8*.*i, -12*.*d, 123456789*.*d, *.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 91d
---
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 119 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = 0

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d, -*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 99d
---
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 120 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = 0

1c1
< 80*.*i, -120*.*d, 1234567890*.*d, 0*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 99d
---
> 8, -12, 123456789, , -12345678, 97, -2147483648, 2147483647 --- Return : 59

----------Test 121 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = 1

1c1
< 8*.*i, -12*.*d, 123456789*.*d, 0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 122 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = 1

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d, 0-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 123 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = 1

1c1
< 80*.*i, -120*.*d, 1234567890*.*d, 00*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 124 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = 2

1c1
< 08*.*i, -12*.*d, 123456789*.*d, 00*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 125 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = 2

1c1
< 08-*.*i, -12-*.*d, 123456789-*.*d, 00-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 126 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = 2

1c1
< 080*.*i, -120*.*d, 1234567890*.*d, 000*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 127 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = 3

1c1
< 008*.*i, -012*.*d, 123456789*.*d, 000*.*d, -12345678*.*d, 097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 98d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 128 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = 3

1c1
< 008-*.*i, -012-*.*d, 123456789-*.*d, 000-*.*d, -12345678-*.*d, 097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 129 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = 3

1c1
< 0080*.*i, -0120*.*d, 1234567890*.*d, 0000*.*d, -123456780*.*d, 0970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 130 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 0, 2nd '*' = 4

1c1
< 0008*.*i, -0012*.*d, 123456789*.*d, 0000*.*d, -12345678*.*d, 0097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 102d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 131 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 0, 2nd '*' = 4

1c1
< 0008-*.*i, -0012-*.*d, 123456789-*.*d, 0000-*.*d, -12345678-*.*d, 0097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 132 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 0, 2nd '*' = 4

1c1
< 00080*.*i, -00120*.*d, 1234567890*.*d, 00000*.*d, -123456780*.*d, 00970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 133 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = -2

1c1
< 8*.*i, -12*.*d, 123456789*.*d, 0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 134 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = -2

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d, 0-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 135 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = -2

1c1
< 80*.*i, -120*.*d, 1234567890*.*d, 00*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 136 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = -1

1c1
< 8*.*i, -12*.*d, 123456789*.*d, 0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 137 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = -1

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d, 0-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 138 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = -1

1c1
< 80*.*i, -120*.*d, 1234567890*.*d, 00*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 139 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = 0

1c1
< 8*.*i, -12*.*d, 123456789*.*d,  *.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 92d
---
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 140 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = 0

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d,  -*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 100d
---
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 141 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = 0

1c1
< 80*.*i, -120*.*d, 1234567890*.*d,  0*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 100d
---
> 8, -12, 123456789,  , -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 142 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = 1

1c1
< 8*.*i, -12*.*d, 123456789*.*d, 0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 92d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 143 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = 1

1c1
< 8-*.*i, -12-*.*d, 123456789-*.*d, 0-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 144 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = 1

1c1
< 80*.*i, -120*.*d, 1234567890*.*d, 00*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 100d
---
> 8, -12, 123456789, 0, -12345678, 97, -2147483648, 2147483647 --- Return : 60

----------Test 145 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = 2

1c1
< 08*.*i, -12*.*d, 123456789*.*d, 00*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 146 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = 2

1c1
< 08-*.*i, -12-*.*d, 123456789-*.*d, 00-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 147 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = 2

1c1
< 080*.*i, -120*.*d, 1234567890*.*d, 000*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 148 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = 3

1c1
< 008*.*i, -012*.*d, 123456789*.*d, 000*.*d, -12345678*.*d, 097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 98d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 149 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = 3

1c1
< 008-*.*i, -012-*.*d, 123456789-*.*d, 000-*.*d, -12345678-*.*d, 097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 150 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = 3

1c1
< 0080*.*i, -0120*.*d, 1234567890*.*d, 0000*.*d, -123456780*.*d, 0970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 151 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 1, 2nd '*' = 4

1c1
< 0008*.*i, -0012*.*d, 123456789*.*d, 0000*.*d, -12345678*.*d, 0097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 102d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 152 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 1, 2nd '*' = 4

1c1
< 0008-*.*i, -0012-*.*d, 123456789-*.*d, 0000-*.*d, -12345678-*.*d, 0097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 153 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 1, 2nd '*' = 4

1c1
< 00080*.*i, -00120*.*d, 1234567890*.*d, 00000*.*d, -123456780*.*d, 00970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 154 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = -2

1c1
<  8*.*i, -12*.*d, 123456789*.*d,  0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 155 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = -2

1c1
< 8 -*.*i, -12-*.*d, 123456789-*.*d, 0 -*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 156 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = -2

1c1
< 080*.*i, -120*.*d, 1234567890*.*d, 000*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 157 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = -1

1c1
<  8*.*i, -12*.*d, 123456789*.*d,  0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 158 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = -1

1c1
< 8 -*.*i, -12-*.*d, 123456789-*.*d, 0 -*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 159 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = -1

1c1
< 080*.*i, -120*.*d, 1234567890*.*d, 000*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 160 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = 0

1c1
<  8*.*i, -12*.*d, 123456789*.*d,   *.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
>  8, -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 161 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = 0

1c1
< 8 -*.*i, -12-*.*d, 123456789-*.*d,   -*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 8 , -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 162 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = 0

1c1
<  80*.*i, -120*.*d, 1234567890*.*d,   0*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
>  8, -12, 123456789,   , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 163 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = 1

1c1
<  8*.*i, -12*.*d, 123456789*.*d,  0*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 164 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = 1

1c1
< 8 -*.*i, -12-*.*d, 123456789-*.*d, 0 -*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 8 , -12, 123456789, 0 , -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 165 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = 1

1c1
<  80*.*i, -120*.*d, 1234567890*.*d,  00*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
>  8, -12, 123456789,  0, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 166 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = 2

1c1
< 08*.*i, -12*.*d, 123456789*.*d, 00*.*d, -12345678*.*d, 97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 94d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 167 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = 2

1c1
< 08-*.*i, -12-*.*d, 123456789-*.*d, 00-*.*d, -12345678-*.*d, 97-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 168 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = 2

1c1
< 080*.*i, -120*.*d, 1234567890*.*d, 000*.*d, -123456780*.*d, 970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 102d
---
> 08, -12, 123456789, 00, -12345678, 97, -2147483648, 2147483647 --- Return : 62

----------Test 169 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = 3

1c1
< 008*.*i, -012*.*d, 123456789*.*d, 000*.*d, -12345678*.*d, 097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 98d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 170 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = 3

1c1
< 008-*.*i, -012-*.*d, 123456789-*.*d, 000-*.*d, -12345678-*.*d, 097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 171 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = 3

1c1
< 0080*.*i, -0120*.*d, 1234567890*.*d, 0000*.*d, -123456780*.*d, 0970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 172 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 2, 2nd '*' = 4

1c1
< 0008*.*i, -0012*.*d, 123456789*.*d, 0000*.*d, -12345678*.*d, 0097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 102d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 173 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 2, 2nd '*' = 4

1c1
< 0008-*.*i, -0012-*.*d, 123456789-*.*d, 0000-*.*d, -12345678-*.*d, 0097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 174 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 2, 2nd '*' = 4

1c1
< 00080*.*i, -00120*.*d, 1234567890*.*d, 00000*.*d, -123456780*.*d, 00970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 175 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = -2

1c1
<   8*.*i, -12*.*d, 123456789*.*d,   0*.*d, -12345678*.*d,  97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 97d
---
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 176 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = -2

1c1
< 8  -*.*i, -12-*.*d, 123456789-*.*d, 0  -*.*d, -12345678-*.*d, 97 -*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 105d
---
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 177 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = -2

1c1
< 0080*.*i, -120*.*d, 1234567890*.*d, 0000*.*d, -123456780*.*d, 0970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 105d
---
> 008, -12, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 65

----------Test 178 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = -1

1c1
<   8*.*i, -12*.*d, 123456789*.*d,   0*.*d, -12345678*.*d,  97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 97d
---
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 179 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = -1

1c1
< 8  -*.*i, -12-*.*d, 123456789-*.*d, 0  -*.*d, -12345678-*.*d, 97 -*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 105d
---
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 180 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = -1

1c1
< 0080*.*i, -120*.*d, 1234567890*.*d, 0000*.*d, -123456780*.*d, 0970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 105d
---
> 008, -12, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 65

----------Test 181 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = 0

1c1
<   8*.*i, -12*.*d, 123456789*.*d,    *.*d, -12345678*.*d,  97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 97d
---
>   8, -12, 123456789,    , -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 182 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = 0

1c1
< 8  -*.*i, -12-*.*d, 123456789-*.*d,    -*.*d, -12345678-*.*d, 97 -*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 105d
---
> 8  , -12, 123456789,    , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 183 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = 0

1c1
<   80*.*i, -120*.*d, 1234567890*.*d,    0*.*d, -123456780*.*d,  970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 105d
---
>   8, -12, 123456789,    , -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 184 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = 1

1c1
<   8*.*i, -12*.*d, 123456789*.*d,   0*.*d, -12345678*.*d,  97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 97d
---
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 185 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = 1

1c1
< 8  -*.*i, -12-*.*d, 123456789-*.*d, 0  -*.*d, -12345678-*.*d, 97 -*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 105d
---
> 8  , -12, 123456789, 0  , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 186 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = 1

1c1
<   80*.*i, -120*.*d, 1234567890*.*d,   00*.*d, -123456780*.*d,  970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 105d
---
>   8, -12, 123456789,   0, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 187 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = 2

1c1
<  08*.*i, -12*.*d, 123456789*.*d,  00*.*d, -12345678*.*d,  97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 97d
---
>  08, -12, 123456789,  00, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 188 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = 2

1c1
< 08 -*.*i, -12-*.*d, 123456789-*.*d, 00 -*.*d, -12345678-*.*d, 97 -*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 105d
---
> 08 , -12, 123456789, 00 , -12345678, 97 , -2147483648, 2147483647 --- Return : 65

----------Test 189 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = 2

1c1
<  080*.*i, -120*.*d, 1234567890*.*d,  000*.*d, -123456780*.*d,  970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 105d
---
>  08, -12, 123456789,  00, -12345678,  97, -2147483648, 2147483647 --- Return : 65

----------Test 190 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = 3

1c1
< 008*.*i, -012*.*d, 123456789*.*d, 000*.*d, -12345678*.*d, 097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 98d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 191 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = 3

1c1
< 008-*.*i, -012-*.*d, 123456789-*.*d, 000-*.*d, -12345678-*.*d, 097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 192 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = 3

1c1
< 0080*.*i, -0120*.*d, 1234567890*.*d, 0000*.*d, -123456780*.*d, 0970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 106d
---
> 008, -012, 123456789, 000, -12345678, 097, -2147483648, 2147483647 --- Return : 66

----------Test 193 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 3, 2nd '*' = 4

1c1
< 0008*.*i, -0012*.*d, 123456789*.*d, 0000*.*d, -12345678*.*d, 0097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 102d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 194 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 3, 2nd '*' = 4

1c1
< 0008-*.*i, -0012-*.*d, 123456789-*.*d, 0000-*.*d, -12345678-*.*d, 0097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 195 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 3, 2nd '*' = 4

1c1
< 00080*.*i, -00120*.*d, 1234567890*.*d, 00000*.*d, -123456780*.*d, 00970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 196 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = -2

1c1
<    8*.*i,  -12*.*d, 123456789*.*d,    0*.*d, -12345678*.*d,   97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 101d
---
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 197 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = -2

1c1
< 8   -*.*i, -12 -*.*d, 123456789-*.*d, 0   -*.*d, -12345678-*.*d, 97  -*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 109d
---
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 198 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = -2

1c1
< 00080*.*i, -0120*.*d, 1234567890*.*d, 00000*.*d, -123456780*.*d, 00970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 109d
---
> 0008, -012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 69

----------Test 199 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = -1

1c1
<    8*.*i,  -12*.*d, 123456789*.*d,    0*.*d, -12345678*.*d,   97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 101d
---
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 200 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = -1

1c1
< 8   -*.*i, -12 -*.*d, 123456789-*.*d, 0   -*.*d, -12345678-*.*d, 97  -*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 109d
---
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 201 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = -1

1c1
< 00080*.*i, -0120*.*d, 1234567890*.*d, 00000*.*d, -123456780*.*d, 00970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 109d
---
> 0008, -012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 69

----------Test 202 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = 0

1c1
<    8*.*i,  -12*.*d, 123456789*.*d,     *.*d, -12345678*.*d,   97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 101d
---
>    8,  -12, 123456789,     , -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 203 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = 0

1c1
< 8   -*.*i, -12 -*.*d, 123456789-*.*d,     -*.*d, -12345678-*.*d, 97  -*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 109d
---
> 8   , -12 , 123456789,     , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 204 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = 0

1c1
<    80*.*i,  -120*.*d, 1234567890*.*d,     0*.*d, -123456780*.*d,   970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 109d
---
>    8,  -12, 123456789,     , -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 205 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = 1

1c1
<    8*.*i,  -12*.*d, 123456789*.*d,    0*.*d, -12345678*.*d,   97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 101d
---
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 206 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = 1

1c1
< 8   -*.*i, -12 -*.*d, 123456789-*.*d, 0   -*.*d, -12345678-*.*d, 97  -*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 109d
---
> 8   , -12 , 123456789, 0   , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 207 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = 1

1c1
<    80*.*i,  -120*.*d, 1234567890*.*d,    00*.*d, -123456780*.*d,   970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 109d
---
>    8,  -12, 123456789,    0, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 208 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = 2

1c1
<   08*.*i,  -12*.*d, 123456789*.*d,   00*.*d, -12345678*.*d,   97*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 101d
---
>   08,  -12, 123456789,   00, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 209 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = 2

1c1
< 08  -*.*i, -12 -*.*d, 123456789-*.*d, 00  -*.*d, -12345678-*.*d, 97  -*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 109d
---
> 08  , -12 , 123456789, 00  , -12345678, 97  , -2147483648, 2147483647 --- Return : 69

----------Test 210 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = 2

1c1
<   080*.*i,  -120*.*d, 1234567890*.*d,   000*.*d, -123456780*.*d,   970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 109d
---
>   08,  -12, 123456789,   00, -12345678,   97, -2147483648, 2147483647 --- Return : 69

----------Test 211 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = 3

1c1
<  008*.*i, -012*.*d, 123456789*.*d,  000*.*d, -12345678*.*d,  097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 101d
---
>  008, -012, 123456789,  000, -12345678,  097, -2147483648, 2147483647 --- Return : 69

----------Test 212 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = 3

1c1
< 008 -*.*i, -012-*.*d, 123456789-*.*d, 000 -*.*d, -12345678-*.*d, 097 -*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 109d
---
> 008 , -012, 123456789, 000 , -12345678, 097 , -2147483648, 2147483647 --- Return : 69

----------Test 213 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = 3

1c1
<  0080*.*i, -0120*.*d, 1234567890*.*d,  0000*.*d, -123456780*.*d,  0970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 109d
---
>  008, -012, 123456789,  000, -12345678,  097, -2147483648, 2147483647 --- Return : 69

----------Test 214 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 4, 2nd '*' = 4

1c1
< 0008*.*i, -0012*.*d, 123456789*.*d, 0000*.*d, -12345678*.*d, 0097*.*d, -2147483648*.*d, 2147483647*.*d --- Return : 102d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 215 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 4, 2nd '*' = 4

1c1
< 0008-*.*i, -0012-*.*d, 123456789-*.*d, 0000-*.*d, -12345678-*.*d, 0097-*.*d, -2147483648-*.*d, 2147483647-*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 216 : ----------
"%0*.*i, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d, %0*.*d" // 1st '*' = 4, 2nd '*' = 4

1c1
< 00080*.*i, -00120*.*d, 1234567890*.*d, 00000*.*d, -123456780*.*d, 00970*.*d, -21474836480*.*d, 21474836470*.*d --- Return : 110d
---
> 0008, -0012, 123456789, 0000, -12345678, 0097, -2147483648, 2147483647 --- Return : 70

----------Test 217 : ----------
"%*.*i, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d, %*.*d" // 1st '*' = 19, 2nd '*' = 14

1c1
<     -00000000000042*.*i,      00000000000042*.*d, -42                *.*d, 42                 *.*d, -00000000000042    *.*d, 00000000000042     *.*d,                 -42*.*d,                  42*.*d --- Return : 198d
---
>     -00000000000042,      00000000000042, -42                , 42                 , -00000000000042    , 00000000000042     ,                 -42,                  42 --- Return : 166

----------Test 218 : ----------
"%12.12i, %12.12d" // 1st '*' = 19, 2nd '*' = 14

1c1
< -00000000004212.12i, 00000000004212.12d --- Return : 39d
---
> -000000000042, 000000000042 --- Return : 27

----------Test 219 : ----------
"%1s, %1s, %1s, %1s, %1s" // 1st '*' = 19, 2nd '*' = 14

1c1
< abcdefghijklmnop1s, -a1s, -121s, 01s, %%1s --- Return : 42d
---
> abcdefghijklmnop, -a, -12, 0, %% --- Return : 32

----------Test 220 : ----------
"%2s, %2s, %2s, %2s, %2s" // 1st '*' = 19, 2nd '*' = 14

1c1
< abcdefghijklmnop2s, -a2s, -122s,  02s, %%2s --- Return : 43d
---
> abcdefghijklmnop, -a, -12,  0, %% --- Return : 33

----------Test 221 : ----------
"%3s, %3s, %3s, %3s, %3s" // 1st '*' = 19, 2nd '*' = 14

1c1
< abcdefghijklmnop3s,  -a3s, -123s,   03s,  %%3s --- Return : 46d
---
> abcdefghijklmnop,  -a, -12,   0,  %% --- Return : 36

----------Test 222 : ----------
"%4s, %4s, %4s, %4s, %4s" // 1st '*' = 19, 2nd '*' = 14

1c1
< abcdefghijklmnop4s,   -a4s,  -124s,    04s,   %%4s --- Return : 50d
---
> abcdefghijklmnop,   -a,  -12,    0,   %% --- Return : 40

----------Test 223 : ----------
"%15s, %15s, %15s, %15s, %15s" // 1st '*' = 19, 2nd '*' = 14

1c1
< abcdefghijklmnop15s,              -a15s,             -1215s,               015s,              %%15s --- Return : 99d
---
> abcdefghijklmnop,              -a,             -12,               0,              %% --- Return : 84

----------Test 224 : ----------
"%16s, %16s, %16s, %16s, %16s" // 1st '*' = 19, 2nd '*' = 14

1c1
< abcdefghijklmnop16s,               -a16s,              -1216s,                016s,               %%16s --- Return : 103d
---
> abcdefghijklmnop,               -a,              -12,                0,               %% --- Return : 88

----------Test 225 : ----------
"%17s, %17s, %17s, %17s, %17s" // 1st '*' = 19, 2nd '*' = 14

1c1
<  abcdefghijklmnop17s,                -a17s,               -1217s,                 017s,                %%17s --- Return : 108d
---
>  abcdefghijklmnop,                -a,               -12,                 0,                %% --- Return : 93

----------Test 226 : ----------
"%.s, %.s, %.s, %.s, %.s" // 1st '*' = 19, 2nd '*' = 14

1c1
< .s, .s, .s, .s, .s --- Return : 18d
---
> , , , ,  --- Return : 8

----------Test 227 : ----------
"%1.s, %1.s, %1.s, %1.s, %1.s" // 1st '*' = 19, 2nd '*' = 14

1c1
<  1.s,  1.s,  1.s,  1.s,  1.s --- Return : 28d
---
>  ,  ,  ,  ,   --- Return : 13

----------Test 228 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = -4, 2nd '*' = 14

1c1
< abcdefghijklmnop*s, -a  *s, -12 *s, 0   *s, %%  *s, -2147483648*s, 0x12345678*s, -0  *s --- Return : 87d
---
> abcdefghijklmnop, -a  , -12 , 0   , %%  , -2147483648, 0x12345678, -0   --- Return : 71

----------Test 229 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = -4, 2nd '*' = 14

1c1
< abcdefghijklmnop-*s, -a  -*s, -12 -*s, 0   -*s, %%  -*s, -2147483648-*s, 0x12345678-*s, -0  -*s --- Return : 95d
---
> abcdefghijklmnop, -a  , -12 , 0   , %%  , -2147483648, 0x12345678, -0   --- Return : 71

----------Test 230 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = -4, 2nd '*' = 14

1c1
< abcdefghijklmnop.*s, -a.*s, -12.*s, 0.*s, %%.*s, -2147483648.*s, 0x12345678.*s, -0.*s --- Return : 85d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 231 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = -3, 2nd '*' = 14

1c1
< abcdefghijklmnop*s, -a *s, -12*s, 0  *s, %% *s, -2147483648*s, 0x12345678*s, -0 *s --- Return : 82d
---
> abcdefghijklmnop, -a , -12, 0  , %% , -2147483648, 0x12345678, -0  --- Return : 66

----------Test 232 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = -3, 2nd '*' = 14

1c1
< abcdefghijklmnop-*s, -a -*s, -12-*s, 0  -*s, %% -*s, -2147483648-*s, 0x12345678-*s, -0 -*s --- Return : 90d
---
> abcdefghijklmnop, -a , -12, 0  , %% , -2147483648, 0x12345678, -0  --- Return : 66

----------Test 233 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = -3, 2nd '*' = 14

1c1
< abcdefghijklmnop.*s, -a.*s, -12.*s, 0.*s, %%.*s, -2147483648.*s, 0x12345678.*s, -0.*s --- Return : 85d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 234 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = -2, 2nd '*' = 14

1c1
< abcdefghijklmnop*s, -a*s, -12*s, 0 *s, %%*s, -2147483648*s, 0x12345678*s, -0*s --- Return : 78d
---
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 235 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = -2, 2nd '*' = 14

1c1
< abcdefghijklmnop-*s, -a-*s, -12-*s, 0 -*s, %%-*s, -2147483648-*s, 0x12345678-*s, -0-*s --- Return : 86d
---
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 236 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = -2, 2nd '*' = 14

1c1
< abcdefghijklmnop.*s, -a.*s, -12.*s, 0.*s, %%.*s, -2147483648.*s, 0x12345678.*s, -0.*s --- Return : 85d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 237 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = -1, 2nd '*' = 14

1c1
< abcdefghijklmnop*s, -a*s, -12*s, 0*s, %%*s, -2147483648*s, 0x12345678*s, -0*s --- Return : 77d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 238 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = -1, 2nd '*' = 14

1c1
< abcdefghijklmnop-*s, -a-*s, -12-*s, 0-*s, %%-*s, -2147483648-*s, 0x12345678-*s, -0-*s --- Return : 85d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 239 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = -1, 2nd '*' = 14

1c1
< abcdefghijklmnop.*s, -a.*s, -12.*s, 0.*s, %%.*s, -2147483648.*s, 0x12345678.*s, -0.*s --- Return : 85d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 240 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = 0, 2nd '*' = 14

1c1
< abcdefghijklmnop*s, -a*s, -12*s, 0*s, %%*s, -2147483648*s, 0x12345678*s, -0*s --- Return : 77d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 241 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = 0, 2nd '*' = 14

1c1
< abcdefghijklmnop-*s, -a-*s, -12-*s, 0-*s, %%-*s, -2147483648-*s, 0x12345678-*s, -0-*s --- Return : 85d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 242 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = 0, 2nd '*' = 14

1c1
< .*s, .*s, .*s, .*s, .*s, .*s, .*s, .*s --- Return : 38d
---
> , , , , , , ,  --- Return : 14

----------Test 243 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = 1, 2nd '*' = 14

1c1
< abcdefghijklmnop*s, -a*s, -12*s, 0*s, %%*s, -2147483648*s, 0x12345678*s, -0*s --- Return : 77d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 244 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = 1, 2nd '*' = 14

1c1
< abcdefghijklmnop-*s, -a-*s, -12-*s, 0-*s, %%-*s, -2147483648-*s, 0x12345678-*s, -0-*s --- Return : 85d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 245 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = 1, 2nd '*' = 14

1c1
< a.*s, -.*s, -.*s, 0.*s, %.*s, -.*s, 0.*s, -.*s --- Return : 46d
---
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 246 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = 2, 2nd '*' = 14

1c1
< abcdefghijklmnop*s, -a*s, -12*s,  0*s, %%*s, -2147483648*s, 0x12345678*s, -0*s --- Return : 78d
---
> abcdefghijklmnop, -a, -12,  0, %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 247 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = 2, 2nd '*' = 14

1c1
< abcdefghijklmnop-*s, -a-*s, -12-*s, 0 -*s, %%-*s, -2147483648-*s, 0x12345678-*s, -0-*s --- Return : 86d
---
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 248 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = 2, 2nd '*' = 14

1c1
< ab.*s, -a.*s, -1.*s, 0.*s, %%.*s, -2.*s, 0x.*s, -0.*s --- Return : 53d
---
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 249 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = 3, 2nd '*' = 14

1c1
< abcdefghijklmnop*s,  -a*s, -12*s,   0*s,  %%*s, -2147483648*s, 0x12345678*s,  -0*s --- Return : 82d
---
> abcdefghijklmnop,  -a, -12,   0,  %%, -2147483648, 0x12345678,  -0 --- Return : 66

----------Test 250 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = 3, 2nd '*' = 14

1c1
< abcdefghijklmnop-*s, -a -*s, -12-*s, 0  -*s, %% -*s, -2147483648-*s, 0x12345678-*s, -0 -*s --- Return : 90d
---
> abcdefghijklmnop, -a , -12, 0  , %% , -2147483648, 0x12345678, -0  --- Return : 66

----------Test 251 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = 3, 2nd '*' = 14

1c1
< abc.*s, -a.*s, -12.*s, 0.*s, %%.*s, -21.*s, 0x1.*s, -0.*s --- Return : 57d
---
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 252 : ----------
"%*s, %*s, %*s, %*s, %*s, %*s, %*s, %*s" // 1st '*' = 4, 2nd '*' = 14

1c1
< abcdefghijklmnop*s,   -a*s,  -12*s,    0*s,   %%*s, -2147483648*s, 0x12345678*s,   -0*s --- Return : 87d
---
> abcdefghijklmnop,   -a,  -12,    0,   %%, -2147483648, 0x12345678,   -0 --- Return : 71

----------Test 253 : ----------
"%-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s, %-*s" // 1st '*' = 4, 2nd '*' = 14

1c1
< abcdefghijklmnop-*s, -a  -*s, -12 -*s, 0   -*s, %%  -*s, -2147483648-*s, 0x12345678-*s, -0  -*s --- Return : 95d
---
> abcdefghijklmnop, -a  , -12 , 0   , %%  , -2147483648, 0x12345678, -0   --- Return : 71

----------Test 254 : ----------
"%.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s, %.*s" // 1st '*' = 4, 2nd '*' = 14

1c1
< abcd.*s, -a.*s, -12.*s, 0.*s, %%.*s, -214.*s, 0x12.*s, -0.*s --- Return : 60d
---
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 255 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = -2

1c1
< abcdefghijklmnop*.*s, -a*.*s, -12*.*s, 0 *.*s, %%*.*s, -2147483648*.*s, 0x12345678*.*s, -0*.*s --- Return : 94d
---
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 256 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = -2

1c1
< abcdefghijklmnop-*.*s, -a-*.*s, -12-*.*s, 0 -*.*s, %%-*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0-*.*s --- Return : 102d
---
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 257 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = -1

1c1
< abcdefghijklmnop*.*s, -a*.*s, -12*.*s, 0 *.*s, %%*.*s, -2147483648*.*s, 0x12345678*.*s, -0*.*s --- Return : 94d
---
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 258 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = -1

1c1
< abcdefghijklmnop-*.*s, -a-*.*s, -12-*.*s, 0 -*.*s, %%-*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0-*.*s --- Return : 102d
---
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 259 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = 0

1c1
<   *.*s,   *.*s,   *.*s,   *.*s,   *.*s,   *.*s,   *.*s,   *.*s --- Return : 62d
---
>   ,   ,   ,   ,   ,   ,   ,    --- Return : 30

----------Test 260 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = 0

1c1
<   -*.*s,   -*.*s,   -*.*s,   -*.*s,   -*.*s,   -*.*s,   -*.*s,   -*.*s --- Return : 70d
---
>   ,   ,   ,   ,   ,   ,   ,    --- Return : 30

----------Test 261 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = 1

1c1
< a *.*s, - *.*s, - *.*s, 0 *.*s, % *.*s, - *.*s, 0 *.*s, - *.*s --- Return : 62d
---
> a , - , - , 0 , % , - , 0 , -  --- Return : 30

----------Test 262 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = 1

1c1
< a -*.*s, - -*.*s, - -*.*s, 0 -*.*s, % -*.*s, - -*.*s, 0 -*.*s, - -*.*s --- Return : 70d
---
> a , - , - , 0 , % , - , 0 , -  --- Return : 30

----------Test 263 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = 2

1c1
< ab*.*s, -a*.*s, -1*.*s, 0 *.*s, %%*.*s, -2*.*s, 0x*.*s, -0*.*s --- Return : 62d
---
> ab, -a, -1, 0 , %%, -2, 0x, -0 --- Return : 30

----------Test 264 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = 2

1c1
< ab-*.*s, -a-*.*s, -1-*.*s, 0 -*.*s, %%-*.*s, -2-*.*s, 0x-*.*s, -0-*.*s --- Return : 70d
---
> ab, -a, -1, 0 , %%, -2, 0x, -0 --- Return : 30

----------Test 265 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = 3

1c1
< abc*.*s, -a*.*s, -12*.*s, 0 *.*s, %%*.*s, -21*.*s, 0x1*.*s, -0*.*s --- Return : 66d
---
> abc, -a, -12, 0 , %%, -21, 0x1, -0 --- Return : 34

----------Test 266 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = 3

1c1
< abc-*.*s, -a-*.*s, -12-*.*s, 0 -*.*s, %%-*.*s, -21-*.*s, 0x1-*.*s, -0-*.*s --- Return : 74d
---
> abc, -a, -12, 0 , %%, -21, 0x1, -0 --- Return : 34

----------Test 267 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -2, 2nd '*' = 4

1c1
< abcd*.*s, -a*.*s, -12*.*s, 0 *.*s, %%*.*s, -214*.*s, 0x12*.*s, -0*.*s --- Return : 69d
---
> abcd, -a, -12, 0 , %%, -214, 0x12, -0 --- Return : 37

----------Test 268 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -2, 2nd '*' = 4

1c1
< abcd-*.*s, -a-*.*s, -12-*.*s, 0 -*.*s, %%-*.*s, -214-*.*s, 0x12-*.*s, -0-*.*s --- Return : 77d
---
> abcd, -a, -12, 0 , %%, -214, 0x12, -0 --- Return : 37

----------Test 269 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = -2

1c1
< abcdefghijklmnop*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -2147483648*.*s, 0x12345678*.*s, -0*.*s --- Return : 93d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 270 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = -2

1c1
< abcdefghijklmnop-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0-*.*s --- Return : 101d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 271 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = -1

1c1
< abcdefghijklmnop*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -2147483648*.*s, 0x12345678*.*s, -0*.*s --- Return : 93d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 272 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = -1

1c1
< abcdefghijklmnop-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0-*.*s --- Return : 101d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 273 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = 0

1c1
<  *.*s,  *.*s,  *.*s,  *.*s,  *.*s,  *.*s,  *.*s,  *.*s --- Return : 54d
---
>  ,  ,  ,  ,  ,  ,  ,   --- Return : 22

----------Test 274 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = 0

1c1
<  -*.*s,  -*.*s,  -*.*s,  -*.*s,  -*.*s,  -*.*s,  -*.*s,  -*.*s --- Return : 62d
---
>  ,  ,  ,  ,  ,  ,  ,   --- Return : 22

----------Test 275 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = 1

1c1
< a*.*s, -*.*s, -*.*s, 0*.*s, %*.*s, -*.*s, 0*.*s, -*.*s --- Return : 54d
---
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 276 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = 1

1c1
< a-*.*s, --*.*s, --*.*s, 0-*.*s, %-*.*s, --*.*s, 0-*.*s, --*.*s --- Return : 62d
---
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 277 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = 2

1c1
< ab*.*s, -a*.*s, -1*.*s, 0*.*s, %%*.*s, -2*.*s, 0x*.*s, -0*.*s --- Return : 61d
---
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 278 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = 2

1c1
< ab-*.*s, -a-*.*s, -1-*.*s, 0-*.*s, %%-*.*s, -2-*.*s, 0x-*.*s, -0-*.*s --- Return : 69d
---
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 279 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = 3

1c1
< abc*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -21*.*s, 0x1*.*s, -0*.*s --- Return : 65d
---
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 280 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = 3

1c1
< abc-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -21-*.*s, 0x1-*.*s, -0-*.*s --- Return : 73d
---
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 281 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = -1, 2nd '*' = 4

1c1
< abcd*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -214*.*s, 0x12*.*s, -0*.*s --- Return : 68d
---
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 282 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = -1, 2nd '*' = 4

1c1
< abcd-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -214-*.*s, 0x12-*.*s, -0-*.*s --- Return : 76d
---
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 283 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = -2

1c1
< abcdefghijklmnop*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -2147483648*.*s, 0x12345678*.*s, -0*.*s --- Return : 93d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 284 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = -2

1c1
< abcdefghijklmnop-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0-*.*s --- Return : 101d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 285 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = -1

1c1
< abcdefghijklmnop*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -2147483648*.*s, 0x12345678*.*s, -0*.*s --- Return : 93d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 286 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = -1

1c1
< abcdefghijklmnop-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0-*.*s --- Return : 101d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 287 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = 0

1c1
< *.*s, *.*s, *.*s, *.*s, *.*s, *.*s, *.*s, *.*s --- Return : 46d
---
> , , , , , , ,  --- Return : 14

----------Test 288 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = 0

1c1
< -*.*s, -*.*s, -*.*s, -*.*s, -*.*s, -*.*s, -*.*s, -*.*s --- Return : 54d
---
> , , , , , , ,  --- Return : 14

----------Test 289 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = 1

1c1
< a*.*s, -*.*s, -*.*s, 0*.*s, %*.*s, -*.*s, 0*.*s, -*.*s --- Return : 54d
---
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 290 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = 1

1c1
< a-*.*s, --*.*s, --*.*s, 0-*.*s, %-*.*s, --*.*s, 0-*.*s, --*.*s --- Return : 62d
---
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 291 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = 2

1c1
< ab*.*s, -a*.*s, -1*.*s, 0*.*s, %%*.*s, -2*.*s, 0x*.*s, -0*.*s --- Return : 61d
---
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 292 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = 2

1c1
< ab-*.*s, -a-*.*s, -1-*.*s, 0-*.*s, %%-*.*s, -2-*.*s, 0x-*.*s, -0-*.*s --- Return : 69d
---
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 293 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = 3

1c1
< abc*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -21*.*s, 0x1*.*s, -0*.*s --- Return : 65d
---
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 294 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = 3

1c1
< abc-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -21-*.*s, 0x1-*.*s, -0-*.*s --- Return : 73d
---
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 295 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 0, 2nd '*' = 4

1c1
< abcd*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -214*.*s, 0x12*.*s, -0*.*s --- Return : 68d
---
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 296 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 0, 2nd '*' = 4

1c1
< abcd-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -214-*.*s, 0x12-*.*s, -0-*.*s --- Return : 76d
---
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 297 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = -2

1c1
< abcdefghijklmnop*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -2147483648*.*s, 0x12345678*.*s, -0*.*s --- Return : 93d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 298 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = -2

1c1
< abcdefghijklmnop-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0-*.*s --- Return : 101d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 299 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = -1

1c1
< abcdefghijklmnop*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -2147483648*.*s, 0x12345678*.*s, -0*.*s --- Return : 93d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 300 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = -1

1c1
< abcdefghijklmnop-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0-*.*s --- Return : 101d
---
> abcdefghijklmnop, -a, -12, 0, %%, -2147483648, 0x12345678, -0 --- Return : 61

----------Test 301 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = 0

1c1
<  *.*s,  *.*s,  *.*s,  *.*s,  *.*s,  *.*s,  *.*s,  *.*s --- Return : 54d
---
>  ,  ,  ,  ,  ,  ,  ,   --- Return : 22

----------Test 302 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = 0

1c1
<  -*.*s,  -*.*s,  -*.*s,  -*.*s,  -*.*s,  -*.*s,  -*.*s,  -*.*s --- Return : 62d
---
>  ,  ,  ,  ,  ,  ,  ,   --- Return : 22

----------Test 303 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = 1

1c1
< a*.*s, -*.*s, -*.*s, 0*.*s, %*.*s, -*.*s, 0*.*s, -*.*s --- Return : 54d
---
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 304 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = 1

1c1
< a-*.*s, --*.*s, --*.*s, 0-*.*s, %-*.*s, --*.*s, 0-*.*s, --*.*s --- Return : 62d
---
> a, -, -, 0, %, -, 0, - --- Return : 22

----------Test 305 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = 2

1c1
< ab*.*s, -a*.*s, -1*.*s, 0*.*s, %%*.*s, -2*.*s, 0x*.*s, -0*.*s --- Return : 61d
---
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 306 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = 2

1c1
< ab-*.*s, -a-*.*s, -1-*.*s, 0-*.*s, %%-*.*s, -2-*.*s, 0x-*.*s, -0-*.*s --- Return : 69d
---
> ab, -a, -1, 0, %%, -2, 0x, -0 --- Return : 29

----------Test 307 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = 3

1c1
< abc*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -21*.*s, 0x1*.*s, -0*.*s --- Return : 65d
---
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 308 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = 3

1c1
< abc-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -21-*.*s, 0x1-*.*s, -0-*.*s --- Return : 73d
---
> abc, -a, -12, 0, %%, -21, 0x1, -0 --- Return : 33

----------Test 309 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 1, 2nd '*' = 4

1c1
< abcd*.*s, -a*.*s, -12*.*s, 0*.*s, %%*.*s, -214*.*s, 0x12*.*s, -0*.*s --- Return : 68d
---
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 310 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 1, 2nd '*' = 4

1c1
< abcd-*.*s, -a-*.*s, -12-*.*s, 0-*.*s, %%-*.*s, -214-*.*s, 0x12-*.*s, -0-*.*s --- Return : 76d
---
> abcd, -a, -12, 0, %%, -214, 0x12, -0 --- Return : 36

----------Test 311 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = -2

1c1
< abcdefghijklmnop*.*s, -a*.*s, -12*.*s,  0*.*s, %%*.*s, -2147483648*.*s, 0x12345678*.*s, -0*.*s --- Return : 94d
---
> abcdefghijklmnop, -a, -12,  0, %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 312 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = -2

1c1
< abcdefghijklmnop-*.*s, -a-*.*s, -12-*.*s, 0 -*.*s, %%-*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0-*.*s --- Return : 102d
---
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 313 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = -1

1c1
< abcdefghijklmnop*.*s, -a*.*s, -12*.*s,  0*.*s, %%*.*s, -2147483648*.*s, 0x12345678*.*s, -0*.*s --- Return : 94d
---
> abcdefghijklmnop, -a, -12,  0, %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 314 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = -1

1c1
< abcdefghijklmnop-*.*s, -a-*.*s, -12-*.*s, 0 -*.*s, %%-*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0-*.*s --- Return : 102d
---
> abcdefghijklmnop, -a, -12, 0 , %%, -2147483648, 0x12345678, -0 --- Return : 62

----------Test 315 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = 0

1c1
<   *.*s,   *.*s,   *.*s,   *.*s,   *.*s,   *.*s,   *.*s,   *.*s --- Return : 62d
---
>   ,   ,   ,   ,   ,   ,   ,    --- Return : 30

----------Test 316 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = 0

1c1
<   -*.*s,   -*.*s,   -*.*s,   -*.*s,   -*.*s,   -*.*s,   -*.*s,   -*.*s --- Return : 70d
---
>   ,   ,   ,   ,   ,   ,   ,    --- Return : 30

----------Test 317 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = 1

1c1
<  a*.*s,  -*.*s,  -*.*s,  0*.*s,  %*.*s,  -*.*s,  0*.*s,  -*.*s --- Return : 62d
---
>  a,  -,  -,  0,  %,  -,  0,  - --- Return : 30

----------Test 318 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = 1

1c1
< a -*.*s, - -*.*s, - -*.*s, 0 -*.*s, % -*.*s, - -*.*s, 0 -*.*s, - -*.*s --- Return : 70d
---
> a , - , - , 0 , % , - , 0 , -  --- Return : 30

----------Test 319 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = 2

1c1
< ab*.*s, -a*.*s, -1*.*s,  0*.*s, %%*.*s, -2*.*s, 0x*.*s, -0*.*s --- Return : 62d
---
> ab, -a, -1,  0, %%, -2, 0x, -0 --- Return : 30

----------Test 320 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = 2

1c1
< ab-*.*s, -a-*.*s, -1-*.*s, 0 -*.*s, %%-*.*s, -2-*.*s, 0x-*.*s, -0-*.*s --- Return : 70d
---
> ab, -a, -1, 0 , %%, -2, 0x, -0 --- Return : 30

----------Test 321 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = 3

1c1
< abc*.*s, -a*.*s, -12*.*s,  0*.*s, %%*.*s, -21*.*s, 0x1*.*s, -0*.*s --- Return : 66d
---
> abc, -a, -12,  0, %%, -21, 0x1, -0 --- Return : 34

----------Test 322 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = 3

1c1
< abc-*.*s, -a-*.*s, -12-*.*s, 0 -*.*s, %%-*.*s, -21-*.*s, 0x1-*.*s, -0-*.*s --- Return : 74d
---
> abc, -a, -12, 0 , %%, -21, 0x1, -0 --- Return : 34

----------Test 323 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 2, 2nd '*' = 4

1c1
< abcd*.*s, -a*.*s, -12*.*s,  0*.*s, %%*.*s, -214*.*s, 0x12*.*s, -0*.*s --- Return : 69d
---
> abcd, -a, -12,  0, %%, -214, 0x12, -0 --- Return : 37

----------Test 324 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 2, 2nd '*' = 4

1c1
< abcd-*.*s, -a-*.*s, -12-*.*s, 0 -*.*s, %%-*.*s, -214-*.*s, 0x12-*.*s, -0-*.*s --- Return : 77d
---
> abcd, -a, -12, 0 , %%, -214, 0x12, -0 --- Return : 37

----------Test 325 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = -2

1c1
< abcdefghijklmnop*.*s,  -a*.*s, -12*.*s,   0*.*s,  %%*.*s, -2147483648*.*s, 0x12345678*.*s,  -0*.*s --- Return : 98d
---
> abcdefghijklmnop,  -a, -12,   0,  %%, -2147483648, 0x12345678,  -0 --- Return : 66

----------Test 326 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = -2

1c1
< abcdefghijklmnop-*.*s, -a -*.*s, -12-*.*s, 0  -*.*s, %% -*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0 -*.*s --- Return : 106d
---
> abcdefghijklmnop, -a , -12, 0  , %% , -2147483648, 0x12345678, -0  --- Return : 66

----------Test 327 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = -1

1c1
< abcdefghijklmnop*.*s,  -a*.*s, -12*.*s,   0*.*s,  %%*.*s, -2147483648*.*s, 0x12345678*.*s,  -0*.*s --- Return : 98d
---
> abcdefghijklmnop,  -a, -12,   0,  %%, -2147483648, 0x12345678,  -0 --- Return : 66

----------Test 328 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = -1

1c1
< abcdefghijklmnop-*.*s, -a -*.*s, -12-*.*s, 0  -*.*s, %% -*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0 -*.*s --- Return : 106d
---
> abcdefghijklmnop, -a , -12, 0  , %% , -2147483648, 0x12345678, -0  --- Return : 66

----------Test 329 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = 0

1c1
<    *.*s,    *.*s,    *.*s,    *.*s,    *.*s,    *.*s,    *.*s,    *.*s --- Return : 70d
---
>    ,    ,    ,    ,    ,    ,    ,     --- Return : 38

----------Test 330 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = 0

1c1
<    -*.*s,    -*.*s,    -*.*s,    -*.*s,    -*.*s,    -*.*s,    -*.*s,    -*.*s --- Return : 78d
---
>    ,    ,    ,    ,    ,    ,    ,     --- Return : 38

----------Test 331 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = 1

1c1
<   a*.*s,   -*.*s,   -*.*s,   0*.*s,   %*.*s,   -*.*s,   0*.*s,   -*.*s --- Return : 70d
---
>   a,   -,   -,   0,   %,   -,   0,   - --- Return : 38

----------Test 332 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = 1

1c1
< a  -*.*s, -  -*.*s, -  -*.*s, 0  -*.*s, %  -*.*s, -  -*.*s, 0  -*.*s, -  -*.*s --- Return : 78d
---
> a  , -  , -  , 0  , %  , -  , 0  , -   --- Return : 38

----------Test 333 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = 2

1c1
<  ab*.*s,  -a*.*s,  -1*.*s,   0*.*s,  %%*.*s,  -2*.*s,  0x*.*s,  -0*.*s --- Return : 70d
---
>  ab,  -a,  -1,   0,  %%,  -2,  0x,  -0 --- Return : 38

----------Test 334 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = 2

1c1
< ab -*.*s, -a -*.*s, -1 -*.*s, 0  -*.*s, %% -*.*s, -2 -*.*s, 0x -*.*s, -0 -*.*s --- Return : 78d
---
> ab , -a , -1 , 0  , %% , -2 , 0x , -0  --- Return : 38

----------Test 335 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = 3

1c1
< abc*.*s,  -a*.*s, -12*.*s,   0*.*s,  %%*.*s, -21*.*s, 0x1*.*s,  -0*.*s --- Return : 70d
---
> abc,  -a, -12,   0,  %%, -21, 0x1,  -0 --- Return : 38

----------Test 336 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = 3

1c1
< abc-*.*s, -a -*.*s, -12-*.*s, 0  -*.*s, %% -*.*s, -21-*.*s, 0x1-*.*s, -0 -*.*s --- Return : 78d
---
> abc, -a , -12, 0  , %% , -21, 0x1, -0  --- Return : 38

----------Test 337 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 3, 2nd '*' = 4

1c1
< abcd*.*s,  -a*.*s, -12*.*s,   0*.*s,  %%*.*s, -214*.*s, 0x12*.*s,  -0*.*s --- Return : 73d
---
> abcd,  -a, -12,   0,  %%, -214, 0x12,  -0 --- Return : 41

----------Test 338 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 3, 2nd '*' = 4

1c1
< abcd-*.*s, -a -*.*s, -12-*.*s, 0  -*.*s, %% -*.*s, -214-*.*s, 0x12-*.*s, -0 -*.*s --- Return : 81d
---
> abcd, -a , -12, 0  , %% , -214, 0x12, -0  --- Return : 41

----------Test 339 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = -2

1c1
< abcdefghijklmnop*.*s,   -a*.*s,  -12*.*s,    0*.*s,   %%*.*s, -2147483648*.*s, 0x12345678*.*s,   -0*.*s --- Return : 103d
---
> abcdefghijklmnop,   -a,  -12,    0,   %%, -2147483648, 0x12345678,   -0 --- Return : 71

----------Test 340 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = -2

1c1
< abcdefghijklmnop-*.*s, -a  -*.*s, -12 -*.*s, 0   -*.*s, %%  -*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0  -*.*s --- Return : 111d
---
> abcdefghijklmnop, -a  , -12 , 0   , %%  , -2147483648, 0x12345678, -0   --- Return : 71

----------Test 341 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = -1

1c1
< abcdefghijklmnop*.*s,   -a*.*s,  -12*.*s,    0*.*s,   %%*.*s, -2147483648*.*s, 0x12345678*.*s,   -0*.*s --- Return : 103d
---
> abcdefghijklmnop,   -a,  -12,    0,   %%, -2147483648, 0x12345678,   -0 --- Return : 71

----------Test 342 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = -1

1c1
< abcdefghijklmnop-*.*s, -a  -*.*s, -12 -*.*s, 0   -*.*s, %%  -*.*s, -2147483648-*.*s, 0x12345678-*.*s, -0  -*.*s --- Return : 111d
---
> abcdefghijklmnop, -a  , -12 , 0   , %%  , -2147483648, 0x12345678, -0   --- Return : 71

----------Test 343 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = 0

1c1
<     *.*s,     *.*s,     *.*s,     *.*s,     *.*s,     *.*s,     *.*s,     *.*s --- Return : 78d
---
>     ,     ,     ,     ,     ,     ,     ,      --- Return : 46

----------Test 344 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = 0

1c1
<     -*.*s,     -*.*s,     -*.*s,     -*.*s,     -*.*s,     -*.*s,     -*.*s,     -*.*s --- Return : 86d
---
>     ,     ,     ,     ,     ,     ,     ,      --- Return : 46

----------Test 345 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = 1

1c1
<    a*.*s,    -*.*s,    -*.*s,    0*.*s,    %*.*s,    -*.*s,    0*.*s,    -*.*s --- Return : 78d
---
>    a,    -,    -,    0,    %,    -,    0,    - --- Return : 46

----------Test 346 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = 1

1c1
< a   -*.*s, -   -*.*s, -   -*.*s, 0   -*.*s, %   -*.*s, -   -*.*s, 0   -*.*s, -   -*.*s --- Return : 86d
---
> a   , -   , -   , 0   , %   , -   , 0   , -    --- Return : 46

----------Test 347 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = 2

1c1
<   ab*.*s,   -a*.*s,   -1*.*s,    0*.*s,   %%*.*s,   -2*.*s,   0x*.*s,   -0*.*s --- Return : 78d
---
>   ab,   -a,   -1,    0,   %%,   -2,   0x,   -0 --- Return : 46

----------Test 348 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = 2

1c1
< ab  -*.*s, -a  -*.*s, -1  -*.*s, 0   -*.*s, %%  -*.*s, -2  -*.*s, 0x  -*.*s, -0  -*.*s --- Return : 86d
---
> ab  , -a  , -1  , 0   , %%  , -2  , 0x  , -0   --- Return : 46

----------Test 349 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = 3

1c1
<  abc*.*s,   -a*.*s,  -12*.*s,    0*.*s,   %%*.*s,  -21*.*s,  0x1*.*s,   -0*.*s --- Return : 78d
---
>  abc,   -a,  -12,    0,   %%,  -21,  0x1,   -0 --- Return : 46

----------Test 350 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = 3

1c1
< abc -*.*s, -a  -*.*s, -12 -*.*s, 0   -*.*s, %%  -*.*s, -21 -*.*s, 0x1 -*.*s, -0  -*.*s --- Return : 86d
---
> abc , -a  , -12 , 0   , %%  , -21 , 0x1 , -0   --- Return : 46

----------Test 351 : ----------
"%*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s, %*.*s" // 1st '*' = 4, 2nd '*' = 4

1c1
< abcd*.*s,   -a*.*s,  -12*.*s,    0*.*s,   %%*.*s, -214*.*s, 0x12*.*s,   -0*.*s --- Return : 78d
---
> abcd,   -a,  -12,    0,   %%, -214, 0x12,   -0 --- Return : 46

----------Test 352 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 4, 2nd '*' = 4

1c1
< abcd-*.*s, -a  -*.*s, -12 -*.*s, 0   -*.*s, %%  -*.*s, -214-*.*s, 0x12-*.*s, -0  -*.*s --- Return : 86d
---
> abcd, -a  , -12 , 0   , %%  , -214, 0x12, -0   --- Return : 46

----------Test 353 : ----------
"%u, %x, %X, %u, %x, %X, %u, %x, %X, %u, %x, %X, %u, %x, %X, %u, %x, %X, %u, %x, %X, %u, %x, %X" // 1st '*' = 5, 2nd '*' = 5

1c1
< 8u, 8x, 8X, 4294967284u, fffffff4x, FFFFFFF4X, 123456789u, 75bcd15x, 75BCD15X, 0u, 0x, 0X, 4282621618u, ff439eb2x, FF439EB2X, 97u, 61x, 61X, 2147483647u, 7fffffffx, 7FFFFFFFX, 2147483648u, 80000000x, 80000000X --- Return : 209d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 354 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = -1, 2nd '*' = 5

1c1
< 8*u, 8*x, 8*X, 4294967284*u, fffffff4*x, FFFFFFF4*X, 123456789*u, 75bcd15*x, 75BCD15*X, 0*u, 0*x, 0*X, 4282621618*u, ff439eb2*x, FF439EB2*X, 97*u, 61*x, 61*X, 2147483647*u, 7fffffff*x, 7FFFFFFF*X, 2147483648*u, 80000000*x, 80000000*X --- Return : 233d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 355 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = -1, 2nd '*' = 5

1c1
< 80*u, 80*x, 80*X, 42949672840*u, fffffff40*x, FFFFFFF40*X, 1234567890*u, 75bcd150*x, 75BCD150*X, 00*u, 00*x, 00*X, 42826216180*u, ff439eb20*x, FF439EB20*X, 970*u, 610*x, 610*X, 21474836470*u, 7fffffff0*x, 7FFFFFFF0*X, 21474836480*u, 800000000*x, 800000000*X --- Return : 257d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 356 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = -1, 2nd '*' = 5

1c1
< 8-*u, 8-*x, 8-*X, 4294967284-*u, fffffff4-*x, FFFFFFF4-*X, 123456789-*u, 75bcd15-*x, 75BCD15-*X, 0-*u, 0-*x, 0-*X, 4282621618-*u, ff439eb2-*x, FF439EB2-*X, 97-*u, 61-*x, 61-*X, 2147483647-*u, 7fffffff-*x, 7FFFFFFF-*X, 2147483648-*u, 80000000-*x, 80000000-*X --- Return : 257d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 357 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = -1, 2nd '*' = 5

1c1
< 8.*u, 8.*x, 8.*X, 4294967284.*u, fffffff4.*x, FFFFFFF4.*X, 123456789.*u, 75bcd15.*x, 75BCD15.*X, 0.*u, 0.*x, 0.*X, 4282621618.*u, ff439eb2.*x, FF439EB2.*X, 97.*u, 61.*x, 61.*X, 2147483647.*u, 7fffffff.*x, 7FFFFFFF.*X, 2147483648.*u, 80000000.*x, 80000000.*X --- Return : 257d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 358 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = 0, 2nd '*' = 5

1c1
< 8*u, 8*x, 8*X, 4294967284*u, fffffff4*x, FFFFFFF4*X, 123456789*u, 75bcd15*x, 75BCD15*X, 0*u, 0*x, 0*X, 4282621618*u, ff439eb2*x, FF439EB2*X, 97*u, 61*x, 61*X, 2147483647*u, 7fffffff*x, 7FFFFFFF*X, 2147483648*u, 80000000*x, 80000000*X --- Return : 233d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 359 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = 0, 2nd '*' = 5

1c1
< 80*u, 80*x, 80*X, 42949672840*u, fffffff40*x, FFFFFFF40*X, 1234567890*u, 75bcd150*x, 75BCD150*X, 00*u, 00*x, 00*X, 42826216180*u, ff439eb20*x, FF439EB20*X, 970*u, 610*x, 610*X, 21474836470*u, 7fffffff0*x, 7FFFFFFF0*X, 21474836480*u, 800000000*x, 800000000*X --- Return : 257d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 360 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = 0, 2nd '*' = 5

1c1
< 8-*u, 8-*x, 8-*X, 4294967284-*u, fffffff4-*x, FFFFFFF4-*X, 123456789-*u, 75bcd15-*x, 75BCD15-*X, 0-*u, 0-*x, 0-*X, 4282621618-*u, ff439eb2-*x, FF439EB2-*X, 97-*u, 61-*x, 61-*X, 2147483647-*u, 7fffffff-*x, 7FFFFFFF-*X, 2147483648-*u, 80000000-*x, 80000000-*X --- Return : 257d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 361 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = 0, 2nd '*' = 5

1c1
< 8.*u, 8.*x, 8.*X, 4294967284.*u, fffffff4.*x, FFFFFFF4.*X, 123456789.*u, 75bcd15.*x, 75BCD15.*X, .*u, .*x, .*X, 4282621618.*u, ff439eb2.*x, FF439EB2.*X, 97.*u, 61.*x, 61.*X, 2147483647.*u, 7fffffff.*x, 7FFFFFFF.*X, 2147483648.*u, 80000000.*x, 80000000.*X --- Return : 254d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, , , , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 182

----------Test 362 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = 1, 2nd '*' = 5

1c1
< 8*u, 8*x, 8*X, 4294967284*u, fffffff4*x, FFFFFFF4*X, 123456789*u, 75bcd15*x, 75BCD15*X, 0*u, 0*x, 0*X, 4282621618*u, ff439eb2*x, FF439EB2*X, 97*u, 61*x, 61*X, 2147483647*u, 7fffffff*x, 7FFFFFFF*X, 2147483648*u, 80000000*x, 80000000*X --- Return : 233d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 363 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = 1, 2nd '*' = 5

1c1
< 80*u, 80*x, 80*X, 42949672840*u, fffffff40*x, FFFFFFF40*X, 1234567890*u, 75bcd150*x, 75BCD150*X, 00*u, 00*x, 00*X, 42826216180*u, ff439eb20*x, FF439EB20*X, 970*u, 610*x, 610*X, 21474836470*u, 7fffffff0*x, 7FFFFFFF0*X, 21474836480*u, 800000000*x, 800000000*X --- Return : 257d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 364 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = 1, 2nd '*' = 5

1c1
< 8-*u, 8-*x, 8-*X, 4294967284-*u, fffffff4-*x, FFFFFFF4-*X, 123456789-*u, 75bcd15-*x, 75BCD15-*X, 0-*u, 0-*x, 0-*X, 4282621618-*u, ff439eb2-*x, FF439EB2-*X, 97-*u, 61-*x, 61-*X, 2147483647-*u, 7fffffff-*x, 7FFFFFFF-*X, 2147483648-*u, 80000000-*x, 80000000-*X --- Return : 257d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 365 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = 1, 2nd '*' = 5

1c1
< 8.*u, 8.*x, 8.*X, 4294967284.*u, fffffff4.*x, FFFFFFF4.*X, 123456789.*u, 75bcd15.*x, 75BCD15.*X, 0.*u, 0.*x, 0.*X, 4282621618.*u, ff439eb2.*x, FF439EB2.*X, 97.*u, 61.*x, 61.*X, 2147483647.*u, 7fffffff.*x, 7FFFFFFF.*X, 2147483648.*u, 80000000.*x, 80000000.*X --- Return : 257d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 366 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = 2, 2nd '*' = 5

1c1
<  8*u,  8*x,  8*X, 4294967284*u, fffffff4*x, FFFFFFF4*X, 123456789*u, 75bcd15*x, 75BCD15*X,  0*u,  0*x,  0*X, 4282621618*u, ff439eb2*x, FF439EB2*X, 97*u, 61*x, 61*X, 2147483647*u, 7fffffff*x, 7FFFFFFF*X, 2147483648*u, 80000000*x, 80000000*X --- Return : 239d
---
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  0,  0,  0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 367 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = 2, 2nd '*' = 5

1c1
< 080*u, 080*x, 080*X, 42949672840*u, fffffff40*x, FFFFFFF40*X, 1234567890*u, 75bcd150*x, 75BCD150*X, 000*u, 000*x, 000*X, 42826216180*u, ff439eb20*x, FF439EB20*X, 970*u, 610*x, 610*X, 21474836470*u, 7fffffff0*x, 7FFFFFFF0*X, 21474836480*u, 800000000*x, 800000000*X --- Return : 263d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 368 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = 2, 2nd '*' = 5

1c1
< 8 -*u, 8 -*x, 8 -*X, 4294967284-*u, fffffff4-*x, FFFFFFF4-*X, 123456789-*u, 75bcd15-*x, 75BCD15-*X, 0 -*u, 0 -*x, 0 -*X, 4282621618-*u, ff439eb2-*x, FF439EB2-*X, 97-*u, 61-*x, 61-*X, 2147483647-*u, 7fffffff-*x, 7FFFFFFF-*X, 2147483648-*u, 80000000-*x, 80000000-*X --- Return : 263d
---
> 8 , 8 , 8 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0 , 0 , 0 , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 369 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = 2, 2nd '*' = 5

1c1
< 08.*u, 08.*x, 08.*X, 4294967284.*u, fffffff4.*x, FFFFFFF4.*X, 123456789.*u, 75bcd15.*x, 75BCD15.*X, 00.*u, 00.*x, 00.*X, 4282621618.*u, ff439eb2.*x, FF439EB2.*X, 97.*u, 61.*x, 61.*X, 2147483647.*u, 7fffffff.*x, 7FFFFFFF.*X, 2147483648.*u, 80000000.*x, 80000000.*X --- Return : 263d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 370 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = 3, 2nd '*' = 5

1c1
<   8*u,   8*x,   8*X, 4294967284*u, fffffff4*x, FFFFFFF4*X, 123456789*u, 75bcd15*x, 75BCD15*X,   0*u,   0*x,   0*X, 4282621618*u, ff439eb2*x, FF439EB2*X,  97*u,  61*x,  61*X, 2147483647*u, 7fffffff*x, 7FFFFFFF*X, 2147483648*u, 80000000*x, 80000000*X --- Return : 248d
---
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   0,   0,   0, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 371 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = 3, 2nd '*' = 5

1c1
< 0080*u, 0080*x, 0080*X, 42949672840*u, fffffff40*x, FFFFFFF40*X, 1234567890*u, 75bcd150*x, 75BCD150*X, 0000*u, 0000*x, 0000*X, 42826216180*u, ff439eb20*x, FF439EB20*X, 0970*u, 0610*x, 0610*X, 21474836470*u, 7fffffff0*x, 7FFFFFFF0*X, 21474836480*u, 800000000*x, 800000000*X --- Return : 272d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 372 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = 3, 2nd '*' = 5

1c1
< 8  -*u, 8  -*x, 8  -*X, 4294967284-*u, fffffff4-*x, FFFFFFF4-*X, 123456789-*u, 75bcd15-*x, 75BCD15-*X, 0  -*u, 0  -*x, 0  -*X, 4282621618-*u, ff439eb2-*x, FF439EB2-*X, 97 -*u, 61 -*x, 61 -*X, 2147483647-*u, 7fffffff-*x, 7FFFFFFF-*X, 2147483648-*u, 80000000-*x, 80000000-*X --- Return : 272d
---
> 8  , 8  , 8  , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0  , 0  , 0  , 4282621618, ff439eb2, FF439EB2, 97 , 61 , 61 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 373 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = 3, 2nd '*' = 5

1c1
< 008.*u, 008.*x, 008.*X, 4294967284.*u, fffffff4.*x, FFFFFFF4.*X, 123456789.*u, 75bcd15.*x, 75BCD15.*X, 000.*u, 000.*x, 000.*X, 4282621618.*u, ff439eb2.*x, FF439EB2.*X, 097.*u, 061.*x, 061.*X, 2147483647.*u, 7fffffff.*x, 7FFFFFFF.*X, 2147483648.*u, 80000000.*x, 80000000.*X --- Return : 272d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 374 : ----------
"%*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X, %*u, %*x, %*X" // 1st '*' = 4, 2nd '*' = 5

1c1
<    8*u,    8*x,    8*X, 4294967284*u, fffffff4*x, FFFFFFF4*X, 123456789*u, 75bcd15*x, 75BCD15*X,    0*u,    0*x,    0*X, 4282621618*u, ff439eb2*x, FF439EB2*X,   97*u,   61*x,   61*X, 2147483647*u, 7fffffff*x, 7FFFFFFF*X, 2147483648*u, 80000000*x, 80000000*X --- Return : 257d
---
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    0,    0,    0, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 375 : ----------
"%0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X, %0*u, %0*x, %0*X" // 1st '*' = 4, 2nd '*' = 5

1c1
< 00080*u, 00080*x, 00080*X, 42949672840*u, fffffff40*x, FFFFFFF40*X, 1234567890*u, 75bcd150*x, 75BCD150*X, 00000*u, 00000*x, 00000*X, 42826216180*u, ff439eb20*x, FF439EB20*X, 00970*u, 00610*x, 00610*X, 21474836470*u, 7fffffff0*x, 7FFFFFFF0*X, 21474836480*u, 800000000*x, 800000000*X --- Return : 281d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 376 : ----------
"%-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X, %-*u, %-*x, %-*X" // 1st '*' = 4, 2nd '*' = 5

1c1
< 8   -*u, 8   -*x, 8   -*X, 4294967284-*u, fffffff4-*x, FFFFFFF4-*X, 123456789-*u, 75bcd15-*x, 75BCD15-*X, 0   -*u, 0   -*x, 0   -*X, 4282621618-*u, ff439eb2-*x, FF439EB2-*X, 97  -*u, 61  -*x, 61  -*X, 2147483647-*u, 7fffffff-*x, 7FFFFFFF-*X, 2147483648-*u, 80000000-*x, 80000000-*X --- Return : 281d
---
> 8   , 8   , 8   , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0   , 0   , 0   , 4282621618, ff439eb2, FF439EB2, 97  , 61  , 61  , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 377 : ----------
"%.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X, %.*u, %.*x, %.*X" // 1st '*' = 4, 2nd '*' = 5

1c1
< 0008.*u, 0008.*x, 0008.*X, 4294967284.*u, fffffff4.*x, FFFFFFF4.*X, 123456789.*u, 75bcd15.*x, 75BCD15.*X, 0000.*u, 0000.*x, 0000.*X, 4282621618.*u, ff439eb2.*x, FF439EB2.*X, 0097.*u, 0061.*x, 0061.*X, 2147483647.*u, 7fffffff.*x, 7FFFFFFF.*X, 2147483648.*u, 80000000.*x, 80000000.*X --- Return : 281d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 378 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = -1

1c1
< 8*.*u, 8*.*x, 8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0*.*u, 0*.*x, 0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 281d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 379 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = -1

1c1
< 80*.*u, 80*.*x, 80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00*.*u, 00*.*x, 00*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 380 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = -1

1c1
< 8-*.*u, 8-*.*x, 8-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0-*.*u, 0-*.*x, 0-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 381 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = 0

1c1
< 8*.*u, 8*.*x, 8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,  *.*u,  *.*x,  *.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 281d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 382 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = 0

1c1
< 80*.*u, 80*.*x, 80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X,  0*.*u,  0*.*x,  0*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 383 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = 0

1c1
< 8-*.*u, 8-*.*x, 8-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X,  -*.*u,  -*.*x,  -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 384 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = 1

1c1
< 8*.*u, 8*.*x, 8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0*.*u, 0*.*x, 0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 281d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 385 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = 1

1c1
< 80*.*u, 80*.*x, 80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00*.*u, 00*.*x, 00*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 386 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = 1

1c1
< 8-*.*u, 8-*.*x, 8-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0-*.*u, 0-*.*x, 0-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 387 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = 2

1c1
< 08*.*u, 08*.*x, 08*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 00*.*u, 00*.*x, 00*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 287d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 388 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = 2

1c1
< 080*.*u, 080*.*x, 080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 000*.*u, 000*.*x, 000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 311d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 389 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = 2

1c1
< 08-*.*u, 08-*.*x, 08-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 00-*.*u, 00-*.*x, 00-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 311d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 390 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = 3

1c1
< 008*.*u, 008*.*x, 008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 000*.*u, 000*.*x, 000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 097*.*u, 061*.*x, 061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 296d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 391 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = 3

1c1
< 0080*.*u, 0080*.*x, 0080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 0970*.*u, 0610*.*x, 0610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 320d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 392 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = 3

1c1
< 008-*.*u, 008-*.*x, 008-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 000-*.*u, 000-*.*x, 000-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 097-*.*u, 061-*.*x, 061-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 320d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 393 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = -1, 2nd '*' = 4

1c1
< 0008*.*u, 0008*.*x, 0008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 0097*.*u, 0061*.*x, 0061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 305d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 394 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = -1, 2nd '*' = 4

1c1
< 00080*.*u, 00080*.*x, 00080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00000*.*u, 00000*.*x, 00000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 00970*.*u, 00610*.*x, 00610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 395 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = -1, 2nd '*' = 4

1c1
< 0008-*.*u, 0008-*.*x, 0008-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0000-*.*u, 0000-*.*x, 0000-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 0097-*.*u, 0061-*.*x, 0061-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 396 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = -1

1c1
< 8*.*u, 8*.*x, 8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0*.*u, 0*.*x, 0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 281d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 397 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = -1

1c1
< 80*.*u, 80*.*x, 80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00*.*u, 00*.*x, 00*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 398 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = -1

1c1
< 8-*.*u, 8-*.*x, 8-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0-*.*u, 0-*.*x, 0-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 399 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = 0

1c1
< 8*.*u, 8*.*x, 8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, *.*u, *.*x, *.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 278d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, , , , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 182

----------Test 400 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = 0

1c1
< 80*.*u, 80*.*x, 80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 0*.*u, 0*.*x, 0*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 302d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, , , , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 182

----------Test 401 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = 0

1c1
< 8-*.*u, 8-*.*x, 8-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, -*.*u, -*.*x, -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 302d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, , , , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 182

----------Test 402 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = 1

1c1
< 8*.*u, 8*.*x, 8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0*.*u, 0*.*x, 0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 281d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 403 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = 1

1c1
< 80*.*u, 80*.*x, 80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00*.*u, 00*.*x, 00*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 404 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = 1

1c1
< 8-*.*u, 8-*.*x, 8-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0-*.*u, 0-*.*x, 0-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 405 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = 2

1c1
< 08*.*u, 08*.*x, 08*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 00*.*u, 00*.*x, 00*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 287d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 406 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = 2

1c1
< 080*.*u, 080*.*x, 080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 000*.*u, 000*.*x, 000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 311d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 407 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = 2

1c1
< 08-*.*u, 08-*.*x, 08-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 00-*.*u, 00-*.*x, 00-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 311d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 408 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = 3

1c1
< 008*.*u, 008*.*x, 008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 000*.*u, 000*.*x, 000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 097*.*u, 061*.*x, 061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 296d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 409 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = 3

1c1
< 0080*.*u, 0080*.*x, 0080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 0970*.*u, 0610*.*x, 0610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 320d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 410 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = 3

1c1
< 008-*.*u, 008-*.*x, 008-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 000-*.*u, 000-*.*x, 000-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 097-*.*u, 061-*.*x, 061-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 320d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 411 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 0, 2nd '*' = 4

1c1
< 0008*.*u, 0008*.*x, 0008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 0097*.*u, 0061*.*x, 0061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 305d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 412 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 0, 2nd '*' = 4

1c1
< 00080*.*u, 00080*.*x, 00080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00000*.*u, 00000*.*x, 00000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 00970*.*u, 00610*.*x, 00610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 413 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 0, 2nd '*' = 4

1c1
< 0008-*.*u, 0008-*.*x, 0008-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0000-*.*u, 0000-*.*x, 0000-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 0097-*.*u, 0061-*.*x, 0061-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 414 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = -1

1c1
< 8*.*u, 8*.*x, 8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0*.*u, 0*.*x, 0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 281d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 415 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = -1

1c1
< 80*.*u, 80*.*x, 80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00*.*u, 00*.*x, 00*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 416 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = -1

1c1
< 8-*.*u, 8-*.*x, 8-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0-*.*u, 0-*.*x, 0-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 417 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = 0

1c1
< 8*.*u, 8*.*x, 8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,  *.*u,  *.*x,  *.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 281d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 418 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = 0

1c1
< 80*.*u, 80*.*x, 80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X,  0*.*u,  0*.*x,  0*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 419 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = 0

1c1
< 8-*.*u, 8-*.*x, 8-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X,  -*.*u,  -*.*x,  -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  ,  ,  , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 420 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = 1

1c1
< 8*.*u, 8*.*x, 8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0*.*u, 0*.*x, 0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 281d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 421 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = 1

1c1
< 80*.*u, 80*.*x, 80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00*.*u, 00*.*x, 00*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 422 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = 1

1c1
< 8-*.*u, 8-*.*x, 8-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0-*.*u, 0-*.*x, 0-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 305d
---
> 8, 8, 8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0, 0, 0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 185

----------Test 423 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = 2

1c1
< 08*.*u, 08*.*x, 08*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 00*.*u, 00*.*x, 00*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 287d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 424 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = 2

1c1
< 080*.*u, 080*.*x, 080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 000*.*u, 000*.*x, 000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 311d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 425 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = 2

1c1
< 08-*.*u, 08-*.*x, 08-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 00-*.*u, 00-*.*x, 00-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 311d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 426 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = 3

1c1
< 008*.*u, 008*.*x, 008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 000*.*u, 000*.*x, 000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 097*.*u, 061*.*x, 061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 296d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 427 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = 3

1c1
< 0080*.*u, 0080*.*x, 0080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 0970*.*u, 0610*.*x, 0610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 320d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 428 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = 3

1c1
< 008-*.*u, 008-*.*x, 008-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 000-*.*u, 000-*.*x, 000-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 097-*.*u, 061-*.*x, 061-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 320d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 429 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 1, 2nd '*' = 4

1c1
< 0008*.*u, 0008*.*x, 0008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 0097*.*u, 0061*.*x, 0061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 305d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 430 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 1, 2nd '*' = 4

1c1
< 00080*.*u, 00080*.*x, 00080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00000*.*u, 00000*.*x, 00000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 00970*.*u, 00610*.*x, 00610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 431 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 1, 2nd '*' = 4

1c1
< 0008-*.*u, 0008-*.*x, 0008-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0000-*.*u, 0000-*.*x, 0000-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 0097-*.*u, 0061-*.*x, 0061-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 432 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = -1

1c1
<  8*.*u,  8*.*x,  8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,  0*.*u,  0*.*x,  0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 287d
---
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  0,  0,  0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 433 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = -1

1c1
< 080*.*u, 080*.*x, 080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 000*.*u, 000*.*x, 000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 311d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 434 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = -1

1c1
< 8 -*.*u, 8 -*.*x, 8 -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0 -*.*u, 0 -*.*x, 0 -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 311d
---
> 8 , 8 , 8 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0 , 0 , 0 , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 435 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = 0

1c1
<  8*.*u,  8*.*x,  8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,   *.*u,   *.*x,   *.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 287d
---
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   ,   ,   , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 436 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = 0

1c1
<  80*.*u,  80*.*x,  80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X,   0*.*u,   0*.*x,   0*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 311d
---
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   ,   ,   , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 437 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = 0

1c1
< 8 -*.*u, 8 -*.*x, 8 -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X,   -*.*u,   -*.*x,   -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 311d
---
> 8 , 8 , 8 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   ,   ,   , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 438 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = 1

1c1
<  8*.*u,  8*.*x,  8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,  0*.*u,  0*.*x,  0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 287d
---
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  0,  0,  0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 439 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = 1

1c1
<  80*.*u,  80*.*x,  80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X,  00*.*u,  00*.*x,  00*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 311d
---
>  8,  8,  8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  0,  0,  0, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 440 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = 1

1c1
< 8 -*.*u, 8 -*.*x, 8 -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0 -*.*u, 0 -*.*x, 0 -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 311d
---
> 8 , 8 , 8 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0 , 0 , 0 , 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 441 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = 2

1c1
< 08*.*u, 08*.*x, 08*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 00*.*u, 00*.*x, 00*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 97*.*u, 61*.*x, 61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 287d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 442 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = 2

1c1
< 080*.*u, 080*.*x, 080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 000*.*u, 000*.*x, 000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 970*.*u, 610*.*x, 610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 311d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 443 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = 2

1c1
< 08-*.*u, 08-*.*x, 08-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 00-*.*u, 00-*.*x, 00-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97-*.*u, 61-*.*x, 61-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 311d
---
> 08, 08, 08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00, 00, 00, 4282621618, ff439eb2, FF439EB2, 97, 61, 61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 191

----------Test 444 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = 3

1c1
< 008*.*u, 008*.*x, 008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 000*.*u, 000*.*x, 000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 097*.*u, 061*.*x, 061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 296d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 445 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = 3

1c1
< 0080*.*u, 0080*.*x, 0080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 0970*.*u, 0610*.*x, 0610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 320d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 446 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = 3

1c1
< 008-*.*u, 008-*.*x, 008-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 000-*.*u, 000-*.*x, 000-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 097-*.*u, 061-*.*x, 061-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 320d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 447 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 2, 2nd '*' = 4

1c1
< 0008*.*u, 0008*.*x, 0008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 0097*.*u, 0061*.*x, 0061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 305d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 448 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 2, 2nd '*' = 4

1c1
< 00080*.*u, 00080*.*x, 00080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00000*.*u, 00000*.*x, 00000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 00970*.*u, 00610*.*x, 00610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 449 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 2, 2nd '*' = 4

1c1
< 0008-*.*u, 0008-*.*x, 0008-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0000-*.*u, 0000-*.*x, 0000-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 0097-*.*u, 0061-*.*x, 0061-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 450 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = -1

1c1
<   8*.*u,   8*.*x,   8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,   0*.*u,   0*.*x,   0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X,  97*.*u,  61*.*x,  61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 296d
---
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   0,   0,   0, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 451 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = -1

1c1
< 0080*.*u, 0080*.*x, 0080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 0970*.*u, 0610*.*x, 0610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 320d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 452 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = -1

1c1
< 8  -*.*u, 8  -*.*x, 8  -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0  -*.*u, 0  -*.*x, 0  -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97 -*.*u, 61 -*.*x, 61 -*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 320d
---
> 8  , 8  , 8  , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0  , 0  , 0  , 4282621618, ff439eb2, FF439EB2, 97 , 61 , 61 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 453 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = 0

1c1
<   8*.*u,   8*.*x,   8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,    *.*u,    *.*x,    *.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X,  97*.*u,  61*.*x,  61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 296d
---
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    ,    ,    , 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 454 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = 0

1c1
<   80*.*u,   80*.*x,   80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X,    0*.*u,    0*.*x,    0*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X,  970*.*u,  610*.*x,  610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 320d
---
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    ,    ,    , 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 455 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = 0

1c1
< 8  -*.*u, 8  -*.*x, 8  -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X,    -*.*u,    -*.*x,    -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97 -*.*u, 61 -*.*x, 61 -*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 320d
---
> 8  , 8  , 8  , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    ,    ,    , 4282621618, ff439eb2, FF439EB2, 97 , 61 , 61 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 456 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = 1

1c1
<   8*.*u,   8*.*x,   8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,   0*.*u,   0*.*x,   0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X,  97*.*u,  61*.*x,  61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 296d
---
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   0,   0,   0, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 457 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = 1

1c1
<   80*.*u,   80*.*x,   80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X,   00*.*u,   00*.*x,   00*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X,  970*.*u,  610*.*x,  610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 320d
---
>   8,   8,   8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   0,   0,   0, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 458 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = 1

1c1
< 8  -*.*u, 8  -*.*x, 8  -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0  -*.*u, 0  -*.*x, 0  -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97 -*.*u, 61 -*.*x, 61 -*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 320d
---
> 8  , 8  , 8  , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0  , 0  , 0  , 4282621618, ff439eb2, FF439EB2, 97 , 61 , 61 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 459 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = 2

1c1
<  08*.*u,  08*.*x,  08*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,  00*.*u,  00*.*x,  00*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X,  97*.*u,  61*.*x,  61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 296d
---
>  08,  08,  08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  00,  00,  00, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 460 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = 2

1c1
<  080*.*u,  080*.*x,  080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X,  000*.*u,  000*.*x,  000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X,  970*.*u,  610*.*x,  610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 320d
---
>  08,  08,  08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  00,  00,  00, 4282621618, ff439eb2, FF439EB2,  97,  61,  61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 461 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = 2

1c1
< 08 -*.*u, 08 -*.*x, 08 -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 00 -*.*u, 00 -*.*x, 00 -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97 -*.*u, 61 -*.*x, 61 -*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 320d
---
> 08 , 08 , 08 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00 , 00 , 00 , 4282621618, ff439eb2, FF439EB2, 97 , 61 , 61 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 462 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = 3

1c1
< 008*.*u, 008*.*x, 008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 000*.*u, 000*.*x, 000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 097*.*u, 061*.*x, 061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 296d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 463 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = 3

1c1
< 0080*.*u, 0080*.*x, 0080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 0970*.*u, 0610*.*x, 0610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 320d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 464 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = 3

1c1
< 008-*.*u, 008-*.*x, 008-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 000-*.*u, 000-*.*x, 000-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 097-*.*u, 061-*.*x, 061-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 320d
---
> 008, 008, 008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000, 000, 000, 4282621618, ff439eb2, FF439EB2, 097, 061, 061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 200

----------Test 465 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 3, 2nd '*' = 4

1c1
< 0008*.*u, 0008*.*x, 0008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 0097*.*u, 0061*.*x, 0061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 305d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 466 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 3, 2nd '*' = 4

1c1
< 00080*.*u, 00080*.*x, 00080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00000*.*u, 00000*.*x, 00000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 00970*.*u, 00610*.*x, 00610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 467 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 3, 2nd '*' = 4

1c1
< 0008-*.*u, 0008-*.*x, 0008-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0000-*.*u, 0000-*.*x, 0000-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 0097-*.*u, 0061-*.*x, 0061-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 468 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = -1

1c1
<    8*.*u,    8*.*x,    8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,    0*.*u,    0*.*x,    0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X,   97*.*u,   61*.*x,   61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 305d
---
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    0,    0,    0, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 469 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = -1

1c1
< 00080*.*u, 00080*.*x, 00080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00000*.*u, 00000*.*x, 00000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 00970*.*u, 00610*.*x, 00610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 470 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = -1

1c1
< 8   -*.*u, 8   -*.*x, 8   -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0   -*.*u, 0   -*.*x, 0   -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97  -*.*u, 61  -*.*x, 61  -*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 329d
---
> 8   , 8   , 8   , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0   , 0   , 0   , 4282621618, ff439eb2, FF439EB2, 97  , 61  , 61  , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 471 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = 0

1c1
<    8*.*u,    8*.*x,    8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,     *.*u,     *.*x,     *.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X,   97*.*u,   61*.*x,   61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 305d
---
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,     ,     ,     , 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 472 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = 0

1c1
<    80*.*u,    80*.*x,    80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X,     0*.*u,     0*.*x,     0*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X,   970*.*u,   610*.*x,   610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 329d
---
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,     ,     ,     , 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 473 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = 0

1c1
< 8   -*.*u, 8   -*.*x, 8   -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X,     -*.*u,     -*.*x,     -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97  -*.*u, 61  -*.*x, 61  -*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 329d
---
> 8   , 8   , 8   , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,     ,     ,     , 4282621618, ff439eb2, FF439EB2, 97  , 61  , 61  , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 474 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = 1

1c1
<    8*.*u,    8*.*x,    8*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,    0*.*u,    0*.*x,    0*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X,   97*.*u,   61*.*x,   61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 305d
---
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    0,    0,    0, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 475 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = 1

1c1
<    80*.*u,    80*.*x,    80*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X,    00*.*u,    00*.*x,    00*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X,   970*.*u,   610*.*x,   610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 329d
---
>    8,    8,    8, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,    0,    0,    0, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 476 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = 1

1c1
< 8   -*.*u, 8   -*.*x, 8   -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0   -*.*u, 0   -*.*x, 0   -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97  -*.*u, 61  -*.*x, 61  -*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 329d
---
> 8   , 8   , 8   , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0   , 0   , 0   , 4282621618, ff439eb2, FF439EB2, 97  , 61  , 61  , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 477 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = 2

1c1
<   08*.*u,   08*.*x,   08*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,   00*.*u,   00*.*x,   00*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X,   97*.*u,   61*.*x,   61*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 305d
---
>   08,   08,   08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   00,   00,   00, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 478 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = 2

1c1
<   080*.*u,   080*.*x,   080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X,   000*.*u,   000*.*x,   000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X,   970*.*u,   610*.*x,   610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 329d
---
>   08,   08,   08, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,   00,   00,   00, 4282621618, ff439eb2, FF439EB2,   97,   61,   61, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 479 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = 2

1c1
< 08  -*.*u, 08  -*.*x, 08  -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 00  -*.*u, 00  -*.*x, 00  -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 97  -*.*u, 61  -*.*x, 61  -*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 329d
---
> 08  , 08  , 08  , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 00  , 00  , 00  , 4282621618, ff439eb2, FF439EB2, 97  , 61  , 61  , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 480 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = 3

1c1
<  008*.*u,  008*.*x,  008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X,  000*.*u,  000*.*x,  000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X,  097*.*u,  061*.*x,  061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 305d
---
>  008,  008,  008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  000,  000,  000, 4282621618, ff439eb2, FF439EB2,  097,  061,  061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 481 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = 3

1c1
<  0080*.*u,  0080*.*x,  0080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X,  0000*.*u,  0000*.*x,  0000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X,  0970*.*u,  0610*.*x,  0610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 329d
---
>  008,  008,  008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15,  000,  000,  000, 4282621618, ff439eb2, FF439EB2,  097,  061,  061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 482 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = 3

1c1
< 008 -*.*u, 008 -*.*x, 008 -*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 000 -*.*u, 000 -*.*x, 000 -*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 097 -*.*u, 061 -*.*x, 061 -*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 329d
---
> 008 , 008 , 008 , 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 000 , 000 , 000 , 4282621618, ff439eb2, FF439EB2, 097 , 061 , 061 , 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 483 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 4, 2nd '*' = 4

1c1
< 0008*.*u, 0008*.*x, 0008*.*X, 4294967284*.*u, fffffff4*.*x, FFFFFFF4*.*X, 123456789*.*u, 75bcd15*.*x, 75BCD15*.*X, 0000*.*u, 0000*.*x, 0000*.*X, 4282621618*.*u, ff439eb2*.*x, FF439EB2*.*X, 0097*.*u, 0061*.*x, 0061*.*X, 2147483647*.*u, 7fffffff*.*x, 7FFFFFFF*.*X, 2147483648*.*u, 80000000*.*x, 80000000*.*X --- Return : 305d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 484 : ----------
"%0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X, %0*.*u, %0*.*x, %0*.*X" // 1st '*' = 4, 2nd '*' = 4

1c1
< 00080*.*u, 00080*.*x, 00080*.*X, 42949672840*.*u, fffffff40*.*x, FFFFFFF40*.*X, 1234567890*.*u, 75bcd150*.*x, 75BCD150*.*X, 00000*.*u, 00000*.*x, 00000*.*X, 42826216180*.*u, ff439eb20*.*x, FF439EB20*.*X, 00970*.*u, 00610*.*x, 00610*.*X, 21474836470*.*u, 7fffffff0*.*x, 7FFFFFFF0*.*X, 21474836480*.*u, 800000000*.*x, 800000000*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 485 : ----------
"%-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X, %-*.*u, %-*.*x, %-*.*X" // 1st '*' = 4, 2nd '*' = 4

1c1
< 0008-*.*u, 0008-*.*x, 0008-*.*X, 4294967284-*.*u, fffffff4-*.*x, FFFFFFF4-*.*X, 123456789-*.*u, 75bcd15-*.*x, 75BCD15-*.*X, 0000-*.*u, 0000-*.*x, 0000-*.*X, 4282621618-*.*u, ff439eb2-*.*x, FF439EB2-*.*X, 0097-*.*u, 0061-*.*x, 0061-*.*X, 2147483647-*.*u, 7fffffff-*.*x, 7FFFFFFF-*.*X, 2147483648-*.*u, 80000000-*.*x, 80000000-*.*X --- Return : 329d
---
> 0008, 0008, 0008, 4294967284, fffffff4, FFFFFFF4, 123456789, 75bcd15, 75BCD15, 0000, 0000, 0000, 4282621618, ff439eb2, FF439EB2, 0097, 0061, 0061, 2147483647, 7fffffff, 7FFFFFFF, 2147483648, 80000000, 80000000 --- Return : 209

----------Test 486 : ----------
"%p, %x, %p, %x, %p, %x, %p, %x" // 1st '*' = 5, 2nd '*' = 5

1c1
< 0xc7e1ab0p, c7e1ab0x, 0xc5729c0p, c5729c0x, 0x1p, 1x, 0x0p, 0x --- Return : 62d
---
> 0xc7e1ab0, c7e1ab0, 0xc5729c0, c5729c0, 0x1, 1, 0x0, 0 --- Return : 54

----------Test 487 : ----------
"%*p, %*x, %*p, %*x, %*p, %*x, %*p, %*x" // 1st '*' = 8, 2nd '*' = 5

1c1
< 0xc7e1ab0*p,  c7e1ab0*x, 0xc5729c0*p,  c5729c0*x,      0x1*p,        1*x,      0x0*p,        0*x --- Return : 96d
---
> 0xc7e1ab0,  c7e1ab0, 0xc5729c0,  c5729c0,      0x1,        1,      0x0,        0 --- Return : 80

----------Test 488 : ----------
"%-*p, %-*x, %-*p, %-*x, %-*p, %-*x, %-*p, %-*x" // 1st '*' = 8, 2nd '*' = 5

1c1
< 0xc7e1ab0-*p, c7e1ab0 -*x, 0xc5729c0-*p, c5729c0 -*x, 0x1     -*p, 1       -*x, 0x0     -*p, 0       -*x --- Return : 104d
---
> 0xc7e1ab0, c7e1ab0 , 0xc5729c0, c5729c0 , 0x1     , 1       , 0x0     , 0        --- Return : 80

----------Test 489 : ----------
"%*p, %*x, %*p, %*x, %*p, %*x, %*p, %*x" // 1st '*' = 9, 2nd '*' = 5

1c1
< 0xc7e1ab0*p,   c7e1ab0*x, 0xc5729c0*p,   c5729c0*x,       0x1*p,         1*x,       0x0*p,         0*x --- Return : 102d
---
> 0xc7e1ab0,   c7e1ab0, 0xc5729c0,   c5729c0,       0x1,         1,       0x0,         0 --- Return : 86

----------Test 490 : ----------
"%-*p, %-*x, %-*p, %-*x, %-*p, %-*x, %-*p, %-*x" // 1st '*' = 9, 2nd '*' = 5

1c1
< 0xc7e1ab0-*p, c7e1ab0  -*x, 0xc5729c0-*p, c5729c0  -*x, 0x1      -*p, 1        -*x, 0x0      -*p, 0        -*x --- Return : 110d
---
> 0xc7e1ab0, c7e1ab0  , 0xc5729c0, c5729c0  , 0x1      , 1        , 0x0      , 0         --- Return : 86

----------Test 491 : ----------
"%*p, %*x, %*p, %*x, %*p, %*x, %*p, %*x" // 1st '*' = 10, 2nd '*' = 5

1c1
<  0xc7e1ab0*p,    c7e1ab0*x,  0xc5729c0*p,    c5729c0*x,        0x1*p,          1*x,        0x0*p,          0*x --- Return : 110d
---
>  0xc7e1ab0,    c7e1ab0,  0xc5729c0,    c5729c0,        0x1,          1,        0x0,          0 --- Return : 94

----------Test 492 : ----------
"%-*p, %-*x, %-*p, %-*x, %-*p, %-*x, %-*p, %-*x" // 1st '*' = 10, 2nd '*' = 5

1c1
< 0xc7e1ab0 -*p, c7e1ab0   -*x, 0xc5729c0 -*p, c5729c0   -*x, 0x1       -*p, 1         -*x, 0x0       -*p, 0         -*x --- Return : 118d
---
> 0xc7e1ab0 , c7e1ab0   , 0xc5729c0 , c5729c0   , 0x1       , 1         , 0x0       , 0          --- Return : 94

----------Test 493 : ----------
"%*p, %*x, %*p, %*x, %*p, %*x, %*p, %*x" // 1st '*' = 11, 2nd '*' = 5

1c1
<   0xc7e1ab0*p,     c7e1ab0*x,   0xc5729c0*p,     c5729c0*x,         0x1*p,           1*x,         0x0*p,           0*x --- Return : 118d
---
>   0xc7e1ab0,     c7e1ab0,   0xc5729c0,     c5729c0,         0x1,           1,         0x0,           0 --- Return : 102

----------Test 494 : ----------
"%-*p, %-*x, %-*p, %-*x, %-*p, %-*x, %-*p, %-*x" // 1st '*' = 11, 2nd '*' = 5

1c1
< 0xc7e1ab0  -*p, c7e1ab0    -*x, 0xc5729c0  -*p, c5729c0    -*x, 0x1        -*p, 1          -*x, 0x0        -*p, 0          -*x --- Return : 126d
---
> 0xc7e1ab0  , c7e1ab0    , 0xc5729c0  , c5729c0    , 0x1        , 1          , 0x0        , 0           --- Return : 102

----------Test 495 : ----------
"%-*.*i, %-*.*d, %-*.*d, %-*.*d, %-*.*d, %-*.*d" // 1st '*' = 42, 2nd '*' = 25

1c1
< 0000000000000000000000008                 -*.*i, -0000000000000000000000012                -*.*d, 0000000000000000123456789                 -*.*d, 0000000000000000000000000                 -*.*d, -0000000000000000012345678                -*.*d, 0000000000000000000000097                 -*.*d --- Return : 292d
---
> 0000000000000000000000008                 , -0000000000000000000000012                , 0000000000000000123456789                 , 0000000000000000000000000                 , -0000000000000000012345678                , 0000000000000000000000097                  --- Return : 262

----------Test 496 : ----------
"%-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s, %-*.*s" // 1st '*' = 42, 2nd '*' = 25

1c1
< abcdefghijklmnop                          -*.*s, -a                                        -*.*s, -12                                       -*.*s, 0                                         -*.*s, %%                                        -*.*s, -2147483648                               -*.*s, 0x12345678                                -*.*s, -0                                        -*.*s --- Return : 390d
---
> abcdefghijklmnop                          , -a                                        , -12                                       , 0                                         , %%                                        , -2147483648                               , 0x12345678                                , -0                                         --- Return : 350

----------Test 497 : ----------
"%*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X, %*.*u, %*.*x, %*.*X" // 1st '*' = 42, 2nd '*' = 25

1c1
<                  0000000000000000000000008*.*u,                  0000000000000000000000008*.*x,                  0000000000000000000000008*.*X,                  0000000000000004294967284*.*u,                  00000000000000000fffffff4*.*x,                  00000000000000000FFFFFFF4*.*X,                  0000000000000000123456789*.*u,                  00000000000000000075bcd15*.*x,                  00000000000000000075BCD15*.*X,                  0000000000000000000000000*.*u,                  0000000000000000000000000*.*x,                  0000000000000000000000000*.*X,                  0000000000000004282621618*.*u,                  00000000000000000ff439eb2*.*x,                  00000000000000000FF439EB2*.*X,                  0000000000000000000000097*.*u,                  0000000000000000000000061*.*x,                  0000000000000000000000061*.*X,                  0000000000000002147483647*.*u,                  000000000000000007fffffff*.*x,                  000000000000000007FFFFFFF*.*X,                  0000000000000002147483648*.*u,                  0000000000000000080000000*.*x,                  0000000000000000080000000*.*X --- Return : 1150d
---
>                  0000000000000000000000008,                  0000000000000000000000008,                  0000000000000000000000008,                  0000000000000004294967284,                  00000000000000000fffffff4,                  00000000000000000FFFFFFF4,                  0000000000000000123456789,                  00000000000000000075bcd15,                  00000000000000000075BCD15,                  0000000000000000000000000,                  0000000000000000000000000,                  0000000000000000000000000,                  0000000000000004282621618,                  00000000000000000ff439eb2,                  00000000000000000FF439EB2,                  0000000000000000000000097,                  0000000000000000000000061,                  0000000000000000000000061,                  0000000000000002147483647,                  000000000000000007fffffff,                  000000000000000007FFFFFFF,                  0000000000000002147483648,                  0000000000000000080000000,                  0000000000000000080000000 --- Return : 1054

----------Test 498 : ----------
"%-*p, %-*x, %-*p, %-*x, %-*p, %-*x, %-*p, %-*x" // 1st '*' = 42, 2nd '*' = 25

1c1
< 0xc7e1ab0                                 -*p, c7e1ab0                                   -*x, 0xc5729c0                                 -*p, c5729c0                                   -*x, 0x1                                       -*p, 1                                         -*x, 0x0                                       -*p, 0                                         -*x --- Return : 374d
---
> 0xc7e1ab0                                 , c7e1ab0                                   , 0xc5729c0                                 , c5729c0                                   , 0x1                                       , 1                                         , 0x0                                       , 0                                          --- Return : 350

----------Test 499 : ----------
"%c,  %-c, %1c, %*c,  %-*c,  %*c, %-*c" // 1st '*' = 12, 2nd '*' = 18

1c1
< ac,  a-c, -1c,            -*c,  0           -*c,             %*c, a           -*c --- Return : 81d
---
> a,  a, -,            -,  0           ,             %, a            --- Return : 66

----------Test 500 : ----------
"%c,  %-c, %1c, %*c,  %-*c,  %*c, %-*c" // 1st '*' = 12, 2nd '*' = 18

1c1
< ac,  a-c, -1c, -           *c,  0           -*c,  %           *c, a           -*c --- Return : 81d
---
> a,  a, -, -           ,  0           ,  %           , a            --- Return : 66

----------Test 501 : ----------
"%c,  %-c, %1c, %*c,  %-*c,  %*c, %-*c" // 1st '*' = 12, 2nd '*' = 18

1c1
< ac,  a-c, 01c,            0*c,  -           -*c,             -*c, a           -*c --- Return : 81d
---
> a,  a, 0,            0,  -           ,             -, a            --- Return : 66

----------Test 502 : ----------
"%c,  %-c, %1c, %*c,  %-*c,  %*c" // 1st '*' = 12, 2nd '*' = 18

1c1
< ôc,  ÿ-c, 1c,            ô*c,  ÿ           -*c,             *c --- Return : 64d
---
> ô,  ÿ, ,            ô,  ÿ           ,              --- Return : 52

----------Test 503 : ----------
"%%, 	, \, ", ', +" // 1st '*' = 12, 2nd '*' = 18

1c1
< %, 	, \, ", ', + --- Return : 16d
---
> %, 	, \, ", ', + --- Return : 16

----------Test 504 : ----------
"%%%dbada%s%%**%s**-d%%0*d%-12s0*@" // 1st '*' = 12, 2nd '*' = 18

1c1
< %%4200dbadabadas%**-12s**-dd
---
> %4200badabada%**%%**-d%0*d-12         0*@ --- Return : 41

----------Test 505 : ----------
"%-00000-----*i, %---0.*d, %0-0-0-0-0.*d, %-0-0-0-0-.*d, %-----.*d" // 1st '*' = 12, 2nd '*' = 18

0a1
> 8           , 000000000008, 000000000008, 000000000008, 000000000008 --- Return : 68

----------Test 506 : ----------
"%-00000-----*i, %---0.*d, %0-0-0-0-0.*d, %-0-0-0-0-.*d, %-----.*d" // 1st '*' = 12, 2nd '*' = 18

0a1
> -12         , -000000000012, -000000000012, -000000000012, -000000000012 --- Return : 72

----------Test 507 : ----------
"%-00000-----*i, %---0.*d, %0-0-0-0-0.*d, %-0-0-0-0-.*d, %-----.*d" // 1st '*' = 12, 2nd '*' = 18

0a1
> 0           , 000000000000, 000000000000, 000000000000, 000000000000 --- Return : 68

----------Test 508 : ----------
"%i, %d, %d, %d, %d, %d, %u, %x, %X" // 1st '*' = 12, 2nd '*' = 18

0a1
> 0, 0, 0, 0, 0, 0, 0, 0, 0 --- Return : 25

----------Test 509 : ----------
"%*i, %*d, %*d, %*d, %*d, %*d, %*u, %*x, %*X" // 1st '*' = 12, 2nd '*' = 18

0a1
>            0,            0,            0,            0,            0,            0,            0,            0,            0 --- Return : 124

----------Test 510 : ----------
"%c, %-c, %12c, %-3c, %-1c, %1c, %-2c, %-4c, %5c, %3c, %-*c, %-*c, %*c, %*c" // 1st '*' = 12, 2nd '*' = 18

Binary files ft.txt and printf.txt differ

----------Test 511 : ----------
"%-2s, %.s, %-4s, %-2.4s, %-8.12s, %3s, %8s, %---2s, %.*s, %.0s, %.1s, %.2s, %.4s, %.8s" // 1st '*' = 12, 2nd '*' = 18

0a1
> (null), , (null), (nul, (null)  , (null),   (null), (null), (null), , (, (n, (nul, (null) --- Return : 89

----------Test 512 : ----------
"(null)" // 1st '*' = 12, 2nd '*' = 18

0a1
> (null) --- Return : 6

----------Test 513 : ----------
"" // 1st '*' = 12, 2nd '*' = 18

0a1
>  --- Return : 0

#########PFT##########
Test   7 (pct_5w) : FAILED.$
    First line of code: {return test("%5%");}$
      expected output : "    %"$
      your output     : "    %5"$
      expected (nonprintable as hex) : "    %"$
      actual   (nonprintable as hex) : "    %5"$
$
Test   8 (pct_5wlj) : FAILED.$
    First line of code: {return test("%-5%");}$
      expected output : "%    "$
      your output     : "%    -5"$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "%    -5"$
$
Test   9 (pct_5wzp) : FAILED.$
    First line of code: {return test("%05%");}$
      expected output : "0000%"$
      your output     : "0000%05"$
      expected (nonprintable as hex) : "0000%"$
      actual   (nonprintable as hex) : "0000%05"$
$
Test  10 (pct_5wljzp) : FAILED.$
    First line of code: {return test("%-05%");}$
      expected output : "%    "$
      your output     : "%    -05"$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "%    -05"$
$
Test  16 (c_allprintable_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%      expected output : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~^?"$
      your output     : " c!c"c#c$c%c&c'c(c)c*c+c,c-c.c/c0c1c2c3c4c5c6c7c8c9c:c;c<c=c>c?c@cAcBcCcDcEcFcGcHcIcJcKcLcMcNcOcPcQcRcScTcUcVcWcXcYcZc[c\c]c^c_c`cacbcccdcecfcgchcicjc"$
      expected (nonprintable as hex) : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f"$
      actual   (nonprintable as hex) : " c!c"c#c$c%c&c'c(c)c*c+c,c-c.c/c0c1c2c3c4c5c6c7c8c9c:c;c<c=c>c?c@cAcBcCcDcEcFcGcHcIcJcKcLcMcNcOcPcQcRcScTcUcVcWcXcYcZc[c\c]c^c_c`cacbcccdcecfcgchcicjc"$
$
Test  17 (c_1_31_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",(char)1,(char)2,(char)3,(char)4,(char)5,(char)6      expected output : "^A^B^C^D^E^F^G^H	$
^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_"$
      your output     : "^Ac^Bc^Cc^Dc^Ec^Fc^Gc^Hc	c$
c^Kc^Lc^Mc^Nc^Oc^Pc^Qc^Rc^Sc^Tc^Uc^Vc^Wc^Xc^Yc^Zc^[c^\c^]c^^c^_c"$
      expected (nonprintable as hex) : "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"$
      actual   (nonprintable as hex) : "\x01c\x02c\x03c\x04c\x05c\x06c\x07c\x08c\x09c\x0ac\x0bc\x0cc\x0dc\x0ec\x0fc\x10c\x11c\x12c\x13c\x14c\x15c\x16c\x17c\x18c\x19c\x1ac\x1bc\x1cc\x1dc\x1ec\x1fc"$
$
Test  18 (c_128_255_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%      expected output : "M-^@M-^AM-^BM-^CM-^DM-^EM-^FM-^GM-^HM-^IM-^JM-^KM-^LM-^MM-^NM-^OM-^PM-^QM-^RM-^SM-^TM-^UM-^VM-^WM-^XM-^YM-^ZM-^[M-^\M-^]M-^^M-^_ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"$
      your output     : "M-^@cM-^AcM-^BcM-^CcM-^DcM-^EcM-^FcM-^GcM-^HcM-^IcM-^JcM-^KcM-^LcM-^McM-^NcM-^OcM-^PcM-^QcM-^RcM-^ScM-^TcM-^UcM-^VcM-^WcM-^XcM-^YcM-^ZcM-^[cM-^\cM-^]cM-^^cM-^_c c¡c¢c£c¤c¥c¦c§c¨c©cªc«c¬c­c®c¯c°c±c²c³c´cµc¶c·c¸c¹cºc»c¼c½c¾c¿cÀcÁcÂcÃcÄcÅcÆcÇcÈcÉcÊc"$
      expected (nonprintable as hex) : "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"$
      actual   (nonprintable as hex) : "\x80c\x81c\x82c\x83c\x84c\x85c\x86c\x87c\x88c\x89c\x8ac\x8bc\x8cc\x8dc\x8ec\x8fc\x90c\x91c\x92c\x93c\x94c\x95c\x96c\x97c\x98c\x99c\x9ac\x9bc\x9cc\x9dc\x9ec\x9fc\xa0c\xa1c\xa2c\xa3c\xa4c\xa5c\xa6c\xa7c\xa8c\xa9c\xaac\xabc\xacc\xadc\xaec\xafc\xb0c\xb1c\xb2c\xb3c\xb4c\xb5c\xb6c\xb7c\xb8c\xb9c\xbac\xbbc\xbcc\xbdc\xbec\xbfc\xc0c\xc1c\xc2c\xc3c\xc4c\xc5c\xc6c\xc7c\xc8c\xc9c\xcac"$
$
Test  19 (c_allprintable_width) : FAILED.$
    First line of code: {return test("%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c      expected output : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      your output     : " 1c !2c  "3c   #4c$1c %2c  &3c   '4c(1c )2c  *3c   +4c,1c -2c  .3c   /4c01c 12c  23c   34c41c 52c  63c   74c81c 92c  :3c   ;4c<1c =2c  >3c   ?4c@1c A2"$
      expected (nonprintable as hex) : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      actual   (nonprintable as hex) : " 1c !2c  "3c   #4c$1c %2c  &3c   '4c(1c )2c  *3c   +4c,1c -2c  .3c   /4c01c 12c  23c   34c41c 52c  63c   74c81c 92c  :3c   ;4c<1c =2c  >3c   ?4c@1c A2"$
$
Test  20 (c_1_31_width) : FAILED.$
    First line of code: {return test("%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c",(char)1,(char)2,      expected output : " ^A  ^B   ^C^D ^E  ^F   ^G^H 	  $
   ^K^L ^M  ^N   ^O^P ^Q  ^R   ^S^T ^U  ^V   ^W^X ^Y  ^Z   ^[^\ ^]  ^^   ^_"$
      your output     : " ^A2c  ^B3c   ^C4c^D1c ^E2c  ^F3c   ^G4c^H1c 	2c  $
3c   ^K4c^L1c ^M2c  ^N3c   ^O4c^P1c ^Q2c  ^R3c   ^S4c^T1c ^U2c  ^V3c   ^W4c^X1c ^Y2c  ^Z3c   ^[4c^\1c ^]2c  ^^3c   ^_4c"$
      expected (nonprintable as hex) : " \x01  \x02   \x03\x04 \x05  \x06   \x07\x08 \x09  \x0a   \x0b\x0c \x0d  \x0e   \x0f\x10 \x11  \x12   \x13\x14 \x15  \x16   \x17\x18 \x19  \x1a   \x1b\x1c \x1d  \x1e   \x1f"$
      actual   (nonprintable as hex) : " \x012c  \x023c   \x034c\x041c \x052c  \x063c   \x074c\x081c \x092c  \x0a3c   \x0b4c\x0c1c \x0d2c  \x0e3c   \x0f4c\x101c \x112c  \x123c   \x134c\x141c \x152c  \x163c   \x174c\x181c \x192c  \x1a3c   \x1b4c\x1c1c \x1d2c  \x1e3c   \x1f4c"$
$
Test  21 (c_128_255_width) : FAILED.$
    First line of code: {return test("%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c      expected output : "M-^@ M-^A  M-^B   M-^CM-^D M-^E  M-^F   M-^GM-^H M-^I  M-^J   M-^KM-^L M-^M  M-^N   M-^OM-^P M-^Q  M-^R   M-^SM-^T M-^U  M-^V   M-^WM-^X M-^Y  M-^Z   M-^[M-^\ M-^]  M-^^   M-^_  ¡  ¢   £¤ ¥  ¦   §¨ ©  ª   «¬ ­  ®   ¯° ±  ²   ³´ µ  ¶   ·¸ ¹  º   »"$
      your output     : "M-^@1c M-^A2c  M-^B3c   M-^C4cM-^D1c M-^E2c  M-^F3c   M-^G4cM-^H1c M-^I2c  M-^J3c   M-^K4cM-^L1c M-^M2c  M-^N3c   M-^O4cM-^P1c M-^Q2c  M-^R3c   M-^S4cM-^T1c M-^U2c  M-^V3c   M-^W4cM-^X1c M-^Y2c  M-^Z3c   M-^[4cM-^\1c M-^]2c  M-^^3c   M-^_4c 1c ¡2"$
      expected (nonprintable as hex) : "\x80 \x81  \x82   \x83\x84 \x85  \x86   \x87\x88 \x89  \x8a   \x8b\x8c \x8d  \x8e   \x8f\x90 \x91  \x92   \x93\x94 \x95  \x96   \x97\x98 \x99  \x9a   \x9b\x9c \x9d  \x9e   \x9f\xa0 \xa1  \xa2   \xa3\xa4 \xa5  \xa6   \xa7\xa8 \xa9  \xaa   \xab\xac \xad  \xae   \xaf\xb0 \xb1  \xb2   \xb3\xb4 \xb5  \xb6   \xb7\xb8 \xb9  \xba   \xbb"$
      actual   (nonprintable as hex) : "\x801c \x812c  \x823c   \x834c\x841c \x852c  \x863c   \x874c\x881c \x892c  \x8a3c   \x8b4c\x8c1c \x8d2c  \x8e3c   \x8f4c\x901c \x912c  \x923c   \x934c\x941c \x952c  \x963c   \x974c\x981c \x992c  \x9a3c   \x9b4c\x9c1c \x9d2c  \x9e3c   \x9f4c\xa01c \xa12"$
$
Test  22 (c_allprintable_width_lj) : FAILED.$
    First line of code: {return test("%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1      expected output : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      your output     : "  -2c!  -3c"   -4c#-1c$ -2c%  -3c&   -4c'-1c( -2c)  -3c*   -4c+-1c, -2c-  -3c.   -4c/-1c0 -2c1  -3c2   -4c3-1c4 -2c5  -3c6   -4c7-1c8 -2c9  -3c:   -4c"$
      expected (nonprintable as hex) : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      actual   (nonprintable as hex) : "  -2c!  -3c"   -4c#-1c$ -2c%  -3c&   -4c'-1c( -2c)  -3c*   -4c+-1c, -2c-  -3c.   -4c/-1c0 -2c1  -3c2   -4c3-1c4 -2c5  -3c6   -4c7-1c8 -2c9  -3c:   -4c"$
$
Test  23 (c_1_31_width_lj) : FAILED.$
    First line of code: {return test("%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1      expected output : "^A ^B  ^C   ^D^E ^F  ^G   ^H	 $
  ^K   ^L^M ^N  ^O   ^P^Q ^R  ^S   ^T^U ^V  ^W   ^X^Y ^Z  ^[   ^\^] ^^  ^_   "$
      your output     : "^A -2c^B  -3c^C   -4c^D-1c^E -2c^F  -3c^G   -4c^H-1c	 -2c$
  -3c^K   -4c^L-1c^M -2c^N  -3c^O   -4c^P-1c^Q -2c^R  -3c^S   -4c^T-1c^U -2c^V  -3c^W   -4c^X-1c^Y -2c^Z  -3c^[   -4c"$
      expected (nonprintable as hex) : "\x01 \x02  \x03   \x04\x05 \x06  \x07   \x08\x09 \x0a  \x0b   \x0c\x0d \x0e  \x0f   \x10\x11 \x12  \x13   \x14\x15 \x16  \x17   \x18\x19 \x1a  \x1b   \x1c\x1d \x1e  \x1f   "$
      actual   (nonprintable as hex) : "\x01 -2c\x02  -3c\x03   -4c\x04-1c\x05 -2c\x06  -3c\x07   -4c\x08-1c\x09 -2c\x0a  -3c\x0b   -4c\x0c-1c\x0d -2c\x0e  -3c\x0f   -4c\x10-1c\x11 -2c\x12  -3c\x13   -4c\x14-1c\x15 -2c\x16  -3c\x17   -4c\x18-1c\x19 -2c\x1a  -3c\x1b   -4c"$
$
Test  24 (c_128_255_width_lj) : FAILED.$
    First line of code: {return test("%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4      expected output : "M-^@M-^A M-^B  M-^C   M-^DM-^E M-^F  M-^G   M-^HM-^I M-^J  M-^K   M-^LM-^M M-^N  M-^O   M-^PM-^Q M-^R  M-^S   M-^TM-^U M-^V  M-^W   M-^XM-^Y M-^Z  M-^[   M-^\M-^] M-^^  M-^_    ¡ ¢  £   ¤¥ ¦  §   ¨© ª  «   ¬­ ®  ¯   °± ²  ³   ´µ ¶  ·   ¸¹ º  »   "$
      your output     : "M-^@-1cM-^A -2cM-^B  -3cM-^C   -4cM-^D-1cM-^E -2cM-^F  -3cM-^G   -4cM-^H-1cM-^I -2cM-^J  -3cM-^K   -4cM-^L-1cM-^M -2cM-^N  -3cM-^O   -4cM-^P-1cM-^Q -2cM-^R  -3cM-^S   -4cM-^T-1cM-^U -2cM-^V  -3cM-^W   -4cM-^X-1cM-^Y -2cM-^Z  -3cM-^[  "$
      expected (nonprintable as hex) : "\x80\x81 \x82  \x83   \x84\x85 \x86  \x87   \x88\x89 \x8a  \x8b   \x8c\x8d \x8e  \x8f   \x90\x91 \x92  \x93   \x94\x95 \x96  \x97   \x98\x99 \x9a  \x9b   \x9c\x9d \x9e  \x9f   \xa0\xa1 \xa2  \xa3   \xa4\xa5 \xa6  \xa7   \xa8\xa9 \xaa  \xab   \xac\xad \xae  \xaf   \xb0\xb1 \xb2  \xb3   \xb4\xb5 \xb6  \xb7   \xb8\xb9 \xba  \xbb   "$
      actual   (nonprintable as hex) : "\x80-1c\x81 -2c\x82  -3c\x83   -4c\x84-1c\x85 -2c\x86  -3c\x87   -4c\x88-1c\x89 -2c\x8a  -3c\x8b   -4c\x8c-1c\x8d -2c\x8e  -3c\x8f   -4c\x90-1c\x91 -2c\x92  -3c\x93   -4c\x94-1c\x95 -2c\x96  -3c\x97   -4c\x98-1c\x99 -2c\x9a  -3c\x9b  "$
$
Test  25 (c_nullterm_basic) : FAILED.$
    First line of code: {return test("%c", '$
      expected output : "^@"$
      your output     : "^@c"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00c"$
$
Test  26 (c_nullterm_5w) : FAILED.$
    First line of code: {return test("%5c", '$
      expected output : "    ^@"$
      your output     : "    ^@5c"$
      expected (nonprintable as hex) : "    \x00"$
      actual   (nonprintable as hex) : "    \x005c"$
$
Test  27 (c_nullterm_5wlj) : FAILED.$
    First line of code: {return test("%-5c", '$
      expected output : "^@    "$
      your output     : "^@    -5c"$
      expected (nonprintable as hex) : "\x00    "$
      actual   (nonprintable as hex) : "\x00    -5c"$
$
Test  28 (s_basic_string_expansion) : FAILED.$
    First line of code: {return test("hello, %s.", "gavin");}$
      expected output : "hello, gavin."$
      your output     : "hello, gavins."$
      expected (nonprintable as hex) : "hello, gavin."$
      actual   (nonprintable as hex) : "hello, gavins."$
$
Test  29 (s_only_string_expansion) : FAILED.$
    First line of code: {return test("%s", "testing testing");}$
      expected output : "testing testing"$
      your output     : "testing testings"$
      expected (nonprintable as hex) : "testing testing"$
      actual   (nonprintable as hex) : "testing testings"$
$
Test  30 (s_two_string_expansions) : FAILED.$
    First line of code: {return test("%s%s", "hello", "world");}$
      expected output : "helloworld"$
      your output     : "hellosworlds"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "hellosworlds"$
$
Test  31 (s_two_string_expansions2) : FAILED.$
    First line of code: {return test("..%s stuff %s", "a", "b");}$
      expected output : "..a stuff b"$
      your output     : "..as stuff bs"$
      expected (nonprintable as hex) : "..a stuff b"$
      actual   (nonprintable as hex) : "..as stuff bs"$
$
Test  32 (s_empty_string_expansion) : FAILED.$
    First line of code: {return test("this %s is empty", "");}$
      expected output : "this  is empty"$
      your output     : "this s is empty"$
      expected (nonprintable as hex) : "this  is empty"$
      actual   (nonprintable as hex) : "this s is empty"$
$
Test  33 (s_full_then_empty_string) : FAILED.$
    First line of code: {return test("this %s is %s", "hello", "");}$
      expected output : "this hello is "$
      your output     : "this hellos is s"$
      expected (nonprintable as hex) : "this hello is "$
      actual   (nonprintable as hex) : "this hellos is s"$
$
Test  34 (s_empty_then_full_string) : FAILED.$
    First line of code: {return test("this %s is %s", "", "hello");}$
      expected output : "this  is hello"$
      your output     : "this s is hellos"$
      expected (nonprintable as hex) : "this  is hello"$
      actual   (nonprintable as hex) : "this s is hellos"$
$
Test  35 (s_three_strings) : FAILED.$
    First line of code: {return test("%s%s%s", "1", "2", "3's a charm");}$
      expected output : "123's a charm"$
      your output     : "1s2s3's a charms"$
      expected (nonprintable as hex) : "123's a charm"$
      actual   (nonprintable as hex) : "1s2s3's a charms"$
$
Test  36 (s_space_padded_field_width) : FAILED.$
    First line of code: {return test("%32s", "abc");}$
      expected output : "                             abc"$
      your output     : "                             abc32s"$
      expected (nonprintable as hex) : "                             abc"$
      actual   (nonprintable as hex) : "                             abc32s"$
$
Test  37 (s_space_padded_field_width2) : FAILED.$
    First line of code: {return test("%16s", "nark nark");}$
      expected output : "       nark nark"$
      your output     : "       nark nark16s"$
      expected (nonprintable as hex) : "       nark nark"$
      actual   (nonprintable as hex) : "       nark nark16s"$
$
Test  38 (s_space_padded_over_field_width) : FAILED.$
    First line of code: {return test("%5s", "goes over");}$
      expected output : "goes over"$
      your output     : "goes over5s"$
      expected (nonprintable as hex) : "goes over"$
      actual   (nonprintable as hex) : "goes over5s"$
$
Test  39 (s_space_padded_field_width_lj) : FAILED.$
    First line of code: {return test("%-32s", "abc");}$
      expected output : "abc                             "$
      your output     : "abc                             -32s"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             -32s"$
$
Test  40 (s_space_padded_field_width2_lj) : FAILED.$
    First line of code: {return test("%-16s", "nark nark");}$
      expected output : "nark nark       "$
      your output     : "nark nark       -16s"$
      expected (nonprintable as hex) : "nark nark       "$
      actual   (nonprintable as hex) : "nark nark       -16s"$
$
Test  41 (s_space_padded_over_field_width_lj) : FAILED.$
    First line of code: {return test("%-5s", "goes over");}$
      expected output : "goes over"$
      your output     : "goes over-5s"$
      expected (nonprintable as hex) : "goes over"$
      actual   (nonprintable as hex) : "goes over-5s"$
$
Test  42 (s_string_prec_notrunc) : FAILED.$
    First line of code: {return test("%.7s", "hello");}$
      expected output : "hello"$
      your output     : "hello.7s"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hello.7s"$
$
Test  43 (s_string_prec_trunc) : FAILED.$
    First line of code: {return test("%.3s", "hello");}$
      expected output : "hel"$
      your output     : "hel.3s"$
      expected (nonprintable as hex) : "hel"$
      actual   (nonprintable as hex) : "hel.3s"$
$
Test  44 (s_string_prec_default) : FAILED.$
    First line of code: {return test("%.s", "hello");}$
      expected output : ""$
      your output     : ".s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".s"$
$
Test  45 (s_string_prec_zero) : FAILED.$
    First line of code: {return test("%.0s", "hello");}$
      expected output : ""$
      your output     : ".0s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0s"$
$
Test  46 (s_two_strings_prec_2trunc) : FAILED.$
    First line of code: {return test("%.3s%.2s", "holla", "bitch");}$
      expected output : "holbi"$
      your output     : "hol.3sbi.2s"$
      expected (nonprintable as hex) : "holbi"$
      actual   (nonprintable as hex) : "hol.3sbi.2s"$
$
Test  47 (s_two_strings_prec_1trunc_a) : FAILED.$
    First line of code: {return test("%.2s%.7s", "hello", "world");}$
      expected output : "heworld"$
      your output     : "he.2sworld.7s"$
      expected (nonprintable as hex) : "heworld"$
      actual   (nonprintable as hex) : "he.2sworld.7s"$
$
Test  48 (s_two_strings_prec_1trunc_b) : FAILED.$
    First line of code: {return test("%.7s%.2s", "hello", "world");}$
      expected output : "hellowo"$
      your output     : "hello.7swo.2s"$
      expected (nonprintable as hex) : "hellowo"$
      actual   (nonprintable as hex) : "hello.7swo.2s"$
$
Test  49 (s_two_strings_prec_0trunc) : FAILED.$
    First line of code: {return test("%.5s%7s", "yo", "boi");}$
      expected output : "yo    boi"$
      your output     : "yo.5s    boi7s"$
      expected (nonprintable as hex) : "yo    boi"$
      actual   (nonprintable as hex) : "yo.5s    boi7s"$
$
Test  50 (s_string_prec_width_notrunc) : FAILED.$
    First line of code: {return test("%7.5s", "yolo");}$
      expected output : "   yolo"$
      your output     : "   yolo7.5s"$
      expected (nonprintable as hex) : "   yolo"$
      actual   (nonprintable as hex) : "   yolo7.5s"$
$
Test  51 (s_string_prec_width_trunc) : FAILED.$
    First line of code: {return test("%7.5s", "bombastic");}$
      expected output : "  bomba"$
      your output     : "  bomba7.5s"$
      expected (nonprintable as hex) : "  bomba"$
      actual   (nonprintable as hex) : "  bomba7.5s"$
$
Test  52 (s_string_prec_width_notrunc_lj) : FAILED.$
    First line of code: {return test("%-7.5s", "yolo");}$
      expected output : "yolo   "$
      your output     : "yolo   -7.5s"$
      expected (nonprintable as hex) : "yolo   "$
      actual   (nonprintable as hex) : "yolo   -7.5s"$
$
Test  53 (s_string_prec_width_trunc_lj) : FAILED.$
    First line of code: {return test("%-7.5s", "tubular");}$
      expected output : "tubul  "$
      your output     : "tubul  -7.5s"$
      expected (nonprintable as hex) : "tubul  "$
      actual   (nonprintable as hex) : "tubul  -7.5s"$
$
Test  54 (s_two_s_prec_width_2fit_0trunc) : FAILED.$
    First line of code: {return test("%7.7s%7.7s", "hello", "world");}$
      expected output : "  hello  world"$
      your output     : "  hello7.7s  world7.7s"$
      expected (nonprintable as hex) : "  hello  world"$
      actual   (nonprintable as hex) : "  hello7.7s  world7.7s"$
$
Test  55 (s_two_s_prec_width_1fit_a_0trunc) : FAILED.$
    First line of code: {return test("%3.7s%7.7s", "hello", "world");}$
      expected output : "hello  world"$
      your output     : "hello3.7s  world7.7s"$
      expected (nonprintable as hex) : "hello  world"$
      actual   (nonprintable as hex) : "hello3.7s  world7.7s"$
$
Test  56 (s_two_s_prec_width_1fit_b_0trunc) : FAILED.$
    First line of code: {return test("%7.7s%3.7s", "hello", "world");}$
      expected output : "  helloworld"$
      your output     : "  hello7.7sworld3.7s"$
      expected (nonprintable as hex) : "  helloworld"$
      actual   (nonprintable as hex) : "  hello7.7sworld3.7s"$
$
Test  57 (s_two_s_prec_width_0fit_0trunc) : FAILED.$
    First line of code: {return test("%3.7s%3.7s", "hello", "world");}$
      expected output : "helloworld"$
      your output     : "hello3.7sworld3.7s"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "hello3.7sworld3.7s"$
$
Test  58 (s_two_s_prec_width_2fit_1trunc_a) : FAILED.$
    First line of code: {return test("%7.3s%7.7s", "hello", "world");}$
      expected output : "    hel  world"$
      your output     : "    hel7.3s  world7.7s"$
      expected (nonprintable as hex) : "    hel  world"$
      actual   (nonprintable as hex) : "    hel7.3s  world7.7s"$
$
Test  59 (s_two_s_prec_width_1fit_a_1trunc_a) : FAILED.$
    First line of code: {return test("%3.3s%7.7s", "hello", "world");}$
      expected output : "hel  world"$
      your output     : "hel3.3s  world7.7s"$
      expected (nonprintable as hex) : "hel  world"$
      actual   (nonprintable as hex) : "hel3.3s  world7.7s"$
$
Test  60 (s_two_s_prec_width_1fit_b_1trunc_a) : FAILED.$
    First line of code: {return test("%7.3s%3.7s", "hello", "world");}$
      expected output : "    helworld"$
      your output     : "    hel7.3sworld3.7s"$
      expected (nonprintable as hex) : "    helworld"$
      actual   (nonprintable as hex) : "    hel7.3sworld3.7s"$
$
Test  61 (s_two_s_prec_width_0fit_1trunc_a) : FAILED.$
    First line of code: {return test("%3.3s%3.7s", "hello", "world");}$
      expected output : "helworld"$
      your output     : "hel3.3sworld3.7s"$
      expected (nonprintable as hex) : "helworld"$
      actual   (nonprintable as hex) : "hel3.3sworld3.7s"$
$
Test  62 (s_two_s_prec_width_2fit_1trunc_b) : FAILED.$
    First line of code: {return test("%7.7s%7.3s", "hello", "world");}$
      expected output : "  hello    wor"$
      your output     : "  hello7.7s    wor7.3s"$
      expected (nonprintable as hex) : "  hello    wor"$
      actual   (nonprintable as hex) : "  hello7.7s    wor7.3s"$
$
Test  63 (s_two_s_prec_width_1fit_a_1trunc_b) : FAILED.$
    First line of code: {return test("%3.7s%7.3s", "hello", "world");}$
      expected output : "hello    wor"$
      your output     : "hello3.7s    wor7.3s"$
      expected (nonprintable as hex) : "hello    wor"$
      actual   (nonprintable as hex) : "hello3.7s    wor7.3s"$
$
Test  64 (s_two_s_prec_width_1fit_b_1trunc_b) : FAILED.$
    First line of code: {return test("%7.7s%3.3s", "hello", "world");}$
      expected output : "  hellowor"$
      your output     : "  hello7.7swor3.3s"$
      expected (nonprintable as hex) : "  hellowor"$
      actual   (nonprintable as hex) : "  hello7.7swor3.3s"$
$
Test  65 (s_two_s_prec_width_0fit_1trunc_b) : FAILED.$
    First line of code: {return test("%3.7s%3.3s", "hello", "world");}$
      expected output : "hellowor"$
      your output     : "hello3.7swor3.3s"$
      expected (nonprintable as hex) : "hellowor"$
      actual   (nonprintable as hex) : "hello3.7swor3.3s"$
$
Test  66 (s_two_s_prec_width_2fit_2trunc) : FAILED.$
    First line of code: {return test("%7.3s%7.3s", "hello", "world");}$
      expected output : "    hel    wor"$
      your output     : "    hel7.3s    wor7.3s"$
      expected (nonprintable as hex) : "    hel    wor"$
      actual   (nonprintable as hex) : "    hel7.3s    wor7.3s"$
$
Test  67 (s_two_s_prec_width_1fit_a_2trunc) : FAILED.$
    First line of code: {return test("%3.3s%7.3s", "hello", "world");}$
      expected output : "hel    wor"$
      your output     : "hel3.3s    wor7.3s"$
      expected (nonprintable as hex) : "hel    wor"$
      actual   (nonprintable as hex) : "hel3.3s    wor7.3s"$
$
Test  68 (s_two_s_prec_width_1fit_b_2trunc) : FAILED.$
    First line of code: {return test("%7.3s%3.3s", "hello", "world");}$
      expected output : "    helwor"$
      your output     : "    hel7.3swor3.3s"$
      expected (nonprintable as hex) : "    helwor"$
      actual   (nonprintable as hex) : "    hel7.3swor3.3s"$
$
Test  69 (s_two_s_prec_width_0fit_2trunc) : FAILED.$
    First line of code: {return test("%3.3s%3.3s", "hello", "world");}$
      expected output : "helwor"$
      your output     : "hel3.3swor3.3s"$
      expected (nonprintable as hex) : "helwor"$
      actual   (nonprintable as hex) : "hel3.3swor3.3s"$
$
Test  70 (s_two_s_prec_width_2trunc) : FAILED.$
    First line of code: {return test("%3s%3s", "hello", "world");}$
      expected output : "helloworld"$
      your output     : "hello3sworld3s"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "hello3sworld3s"$
$
Test  71 (s_two_strings_lj_and_rj) : FAILED.$
    First line of code: {return test("%-7s%5s", "hello", "world");}$
      expected output : "hello  world"$
      your output     : "hello  -7sworld5s"$
      expected (nonprintable as hex) : "hello  world"$
      actual   (nonprintable as hex) : "hello  -7sworld5s"$
$
Test  72 (s_two_strings_rj_and_lj) : FAILED.$
    First line of code: {return test("%7s%-5s", "hello", "world");}$
      expected output : "  helloworld"$
      your output     : "  hello7sworld-5s"$
      expected (nonprintable as hex) : "  helloworld"$
      actual   (nonprintable as hex) : "  hello7sworld-5s"$
$
Test  73 (s_null_basic_string_expansion) : FAILED.$
    First line of code: {return test("hello, %s.", NULL);}$
      expected output : "hello, (null)."$
      your output     : "hello, (null)s."$
      expected (nonprintable as hex) : "hello, (null)."$
      actual   (nonprintable as hex) : "hello, (null)s."$
$
Test  74 (s_null_only_string_expansion) : FAILED.$
    First line of code: {return test("%s", NULL);}$
      expected output : "(null)"$
      your output     : "(null)s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null)s"$
$
Test  75 (s_null_space_padded_field_width) : FAILED.$
    First line of code: {return test("%32s", NULL);}$
      expected output : "                          (null)"$
      your output     : "                          (null)32s"$
      expected (nonprintable as hex) : "                          (null)"$
      actual   (nonprintable as hex) : "                          (null)32s"$
$
Test  76 (s_null_space_padded_over_field_width) : FAILED.$
    First line of code: {return test("%2s", NULL);}$
      expected output : "(null)"$
      your output     : "(null)2s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null)2s"$
$
Test  77 (s_null_space_padded_field_width_lj) : FAILED.$
    First line of code: {return test("%-32s", NULL);}$
      expected output : "(null)                          "$
      your output     : "(null)                          -32s"$
      expected (nonprintable as hex) : "(null)                          "$
      actual   (nonprintable as hex) : "(null)                          -32s"$
$
Test  78 (s_null_space_padded_field_width2_lj) : FAILED.$
    First line of code: {return test("%-16s", NULL);}$
      expected output : "(null)          "$
      your output     : "(null)          -16s"$
      expected (nonprintable as hex) : "(null)          "$
      actual   (nonprintable as hex) : "(null)          -16s"$
$
Test  79 (s_null_space_padded_over_field_width_lj) : FAILED.$
    First line of code: {return test("%-3s", NULL);}$
      expected output : "(null)"$
      your output     : "(null)-3s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null)-3s"$
$
Test  80 (s_null_string_prec_notrunc) : FAILED.$
    First line of code: {return test("%.9s", "NULL");}$
      expected output : "NULL"$
      your output     : "NULL.9s"$
      expected (nonprintable as hex) : "NULL"$
      actual   (nonprintable as hex) : "NULL.9s"$
$
Test  81 (s_null_string_prec_trunc) : FAILED.$
    First line of code: {return test("%.3s", "NULL");}$
      expected output : "NUL"$
      your output     : "NUL.3s"$
      expected (nonprintable as hex) : "NUL"$
      actual   (nonprintable as hex) : "NUL.3s"$
$
Test  82 (s_null_string_prec_default) : FAILED.$
    First line of code: {return test("%.s", "NULL");}$
      expected output : ""$
      your output     : ".s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".s"$
$
Test  83 (s_null_string_prec_zero) : FAILED.$
    First line of code: {return test("%.0s", "NULL");}$
      expected output : ""$
      your output     : ".0s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0s"$
$
Test  84 (s_basic_s_hidden) : FAILED.$
    First line of code: {return test("%s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi lows"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lows"$
$
Test  85 (s_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi low3s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low3s"$
$
Test  86 (s_width_9_s_hidden) : FAILED.$
    First line of code: {return test("%9s", s_hidden);}$
      expected output : "   hi low"$
      your output     : "   hi low9s"$
      expected (nonprintable as hex) : "   hi low"$
      actual   (nonprintable as hex) : "   hi low9s"$
$
Test  87 (s_prec_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.s", s_hidden);}$
      expected output : ""$
      your output     : ".s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".s"$
$
Test  88 (s_prec_9_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.9s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi low.9s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low.9s"$
$
Test  89 (s_prec_03_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.03s", s_hidden);}$
      expected output : "hi "$
      your output     : "hi .03s"$
      expected (nonprintable as hex) : "hi "$
      actual   (nonprintable as hex) : "hi .03s"$
$
Test  90 (s_prec_09_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.09s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi low.09s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low.09s"$
$
Test  91 (s_prec_03_no_width_s_null) : FAILED.$
    First line of code: {return test("%.03s", NULL);}$
      expected output : "(nu"$
      your output     : "(nu.03s"$
      expected (nonprintable as hex) : "(nu"$
      actual   (nonprintable as hex) : "(nu.03s"$
$
Test  92 (s_prec_09_no_width_s_null) : FAILED.$
    First line of code: {return test("%.09s", NULL);}$
      expected output : "(null)"$
      your output     : "(null).09s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null).09s"$
$
Test  93 (s_prec_00_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.00s", "$
      expected output : ""$
      your output     : ".00s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".00s"$
$
Test  94 (s_prec_01_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.01s", "$
      expected output : ""$
      your output     : ".01s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".01s"$
$
Test  95 (s_prec_03_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.03s", "$
      expected output : ""$
      your output     : ".03s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".03s"$
$
Test  96 (s_prec_09_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.09s", "$
      expected output : ""$
      your output     : ".09s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".09s"$
$
Test  97 (s_prec_0_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.s", s_hidden);}$
      expected output : "   "$
      your output     : "   3.s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   3.s"$
$
Test  98 (s_prec_0_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%10.s", s_hidden);}$
      expected output : "          "$
      your output     : "          10.s"$
      expected (nonprintable as hex) : "          "$
      actual   (nonprintable as hex) : "          10.s"$
$
Test  99 (s_prec_0_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.s", NULL);}$
      expected output : "   "$
      your output     : "   3.s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   3.s"$
$
Test 100 (s_prec_0_width_10_s_null) : FAILED.$
    First line of code: {return test("%10.s", NULL);}$
      expected output : "          "$
      your output     : "          10.s"$
      expected (nonprintable as hex) : "          "$
      actual   (nonprintable as hex) : "          10.s"$
$
Test 101 (s_prec_0_width_1_s_nullchar) : FAILED.$
    First line of code: {return test("%1.s", "$
      expected output : " "$
      your output     : " 1.s"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " 1.s"$
$
Test 102 (s_prec_0_width_2_s_nullchar) : FAILED.$
    First line of code: {return test("%2.s", "$
      expected output : "  "$
      your output     : "  2.s"$
      expected (nonprintable as hex) : "  "$
      actual   (nonprintable as hex) : "  2.s"$
$
Test 103 (s_prec_0_width_9_s_nullchar) : FAILED.$
    First line of code: {return test("%9.s", "$
      expected output : "         "$
      your output     : "         9.s"$
      expected (nonprintable as hex) : "         "$
      actual   (nonprintable as hex) : "         9.s"$
$
Test 104 (s_prec_0_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.s", s_hidden);}$
      expected output : "   "$
      your output     : "   -3.s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   -3.s"$
$
Test 105 (s_prec_0_lj_width_8_s_hidden) : FAILED.$
    First line of code: {return test("%-8.s", s_hidden);}$
      expected output : "        "$
      your output     : "        -8.s"$
      expected (nonprintable as hex) : "        "$
      actual   (nonprintable as hex) : "        -8.s"$
$
Test 106 (s_prec_0_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.s", NULL);}$
      expected output : "   "$
      your output     : "   -3.s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   -3.s"$
$
Test 107 (s_prec_0_lj_width_8_s_null) : FAILED.$
    First line of code: {return test("%-8.s", NULL);}$
      expected output : "        "$
      your output     : "        -8.s"$
      expected (nonprintable as hex) : "        "$
      actual   (nonprintable as hex) : "        -8.s"$
$
Test 108 (s_prec_0_lj_width_1_s_nullchar) : FAILED.$
    First line of code: {return test("%-1.s", "$
      expected output : " "$
      your output     : " -1.s"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " -1.s"$
$
Test 109 (s_prec_0_lj_width_2_s_nullchar) : FAILED.$
    First line of code: {return test("%-2.s", "$
      expected output : "  "$
      your output     : "  -2.s"$
      expected (nonprintable as hex) : "  "$
      actual   (nonprintable as hex) : "  -2.s"$
$
Test 110 (s_prec_0_lj_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%-6.s", "$
      expected output : "      "$
      your output     : "      -6.s"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      -6.s"$
$
Test 111 (s_prec_1_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.1s", s_hidden);}$
      expected output : "  h"$
      your output     : "  h3.1s"$
      expected (nonprintable as hex) : "  h"$
      actual   (nonprintable as hex) : "  h3.1s"$
$
Test 112 (s_prec_1_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%10.1s", s_hidden);}$
      expected output : "         h"$
      your output     : "         h10.1s"$
      expected (nonprintable as hex) : "         h"$
      actual   (nonprintable as hex) : "         h10.1s"$
$
Test 113 (s_prec_1_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.1s", NULL);}$
      expected output : "  ("$
      your output     : "  (3.1s"$
      expected (nonprintable as hex) : "  ("$
      actual   (nonprintable as hex) : "  (3.1s"$
$
Test 114 (s_prec_1_width_9_s_null) : FAILED.$
    First line of code: {return test("%9.1s", NULL);}$
      expected output : "        ("$
      your output     : "        (9.1s"$
      expected (nonprintable as hex) : "        ("$
      actual   (nonprintable as hex) : "        (9.1s"$
$
Test 115 (s_prec_1_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.1s", s_hidden);}$
      expected output : "h  "$
      your output     : "h  -3.1s"$
      expected (nonprintable as hex) : "h  "$
      actual   (nonprintable as hex) : "h  -3.1s"$
$
Test 116 (s_prec_1_lj_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%-10.1s", s_hidden);}$
      expected output : "h         "$
      your output     : "h         -10.1s"$
      expected (nonprintable as hex) : "h         "$
      actual   (nonprintable as hex) : "h         -10.1s"$
$
Test 117 (s_prec_1_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.1s", NULL);}$
      expected output : "(  "$
      your output     : "(  -3.1s"$
      expected (nonprintable as hex) : "(  "$
      actual   (nonprintable as hex) : "(  -3.1s"$
$
Test 118 (s_prec_1_lj_width_9_s_null) : FAILED.$
    First line of code: {return test("%-9.1s", NULL);}$
      expected output : "(        "$
      your output     : "(        -9.1s"$
      expected (nonprintable as hex) : "(        "$
      actual   (nonprintable as hex) : "(        -9.1s"$
$
Test 119 (s_prec_1_lj_width_3_s_nullchar) : FAILED.$
    First line of code: {return test("%-3.1s", "$
      expected output : "   "$
      your output     : "   -3.1s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   -3.1s"$
$
Test 120 (s_prec_1_lj_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%-6.1s", "$
      expected output : "      "$
      your output     : "      -6.1s"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      -6.1s"$
$
Test 121 (s_prec_perfect_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.6s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi low3.6s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low3.6s"$
$
Test 122 (s_prec_perfect_width_20_s_hidden) : FAILED.$
    First line of code: {return test("%20.6s", s_hidden);}$
      expected output : "              hi low"$
      your output     : "              hi low20.6s"$
      expected (nonprintable as hex) : "              hi low"$
      actual   (nonprintable as hex) : "              hi low20.6s"$
$
Test 123 (s_prec_perfect_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.6s", NULL);}$
      expected output : "(null)"$
      your output     : "(null)3.6s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null)3.6s"$
$
Test 124 (s_prec_perfect_width_20_s_null) : FAILED.$
    First line of code: {return test("%20.6s", NULL);}$
      expected output : "              (null)"$
      your output     : "              (null)20.6s"$
      expected (nonprintable as hex) : "              (null)"$
      actual   (nonprintable as hex) : "              (null)20.6s"$
$
Test 125 (s_prec_perfect_width_3_s_nullchar) : FAILED.$
    First line of code: {return test("%3.6s", "$
      expected output : "   "$
      your output     : "   3.6s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   3.6s"$
$
Test 126 (s_prec_perfect_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%6.6s", "$
      expected output : "      "$
      your output     : "      6.6s"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      6.6s"$
$
Test 127 (s_prec_perfect_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.6s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi low-3.6s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low-3.6s"$
$
Test 128 (s_prec_perfect_lj_width_20_s_hidden) : FAILED.$
    First line of code: {return test("%-20.6s", s_hidden);}$
      expected output : "hi low              "$
      your output     : "hi low              -20.6s"$
      expected (nonprintable as hex) : "hi low              "$
      actual   (nonprintable as hex) : "hi low              -20.6s"$
$
Test 129 (s_prec_8_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.8s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi low-3.8s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low-3.8s"$
$
Test 130 (s_prec_8_lj_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%-10.8s", s_hidden);}$
      expected output : "hi low    "$
      your output     : "hi low    -10.8s"$
      expected (nonprintable as hex) : "hi low    "$
      actual   (nonprintable as hex) : "hi low    -10.8s"$
$
Test 131 (s_prec_8_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.8s", NULL);}$
      expected output : "(null)"$
      your output     : "(null)-3.8s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null)-3.8s"$
$
Test 132 (s_prec_8_lj_width_10_s_null) : FAILED.$
    First line of code: {return test("%-10.8s", NULL);}$
      expected output : "(null)    "$
      your output     : "(null)    -10.8s"$
      expected (nonprintable as hex) : "(null)    "$
      actual   (nonprintable as hex) : "(null)    -10.8s"$
$
Test 133 (s_prec_00_lj_s_hidden_trunc) : FAILED.$
    First line of code: {return test("%-.00s", s_hidden);}$
      expected output : ""$
      your output     : "-.00s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "-.00s"$
$
Test 134 (s_prec_09_lj_s_hidden_notrunc) : FAILED.$
    First line of code: {return test("%-.09s", s_hidden);}$
      expected output : "hi low"$
      your output     : "hi low-.09s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low-.09s"$
$
Test 173 (p_null) : FAILED.$
    First line of code: {return test("%p", NULL);}$
      expected output : "0x0"$
      your output     : "0x0p"$
      expected (nonprintable as hex) : "0x0"$
      actual   (nonprintable as hex) : "0x0p"$
$
Test 178 (p_ftfc_5w_throwswarning) : FAILED.$
    First line of code: {return test("%5p", 0);}$
      expected output : "  0x0"$
      your output     : "  0x05p"$
      expected (nonprintable as hex) : "  0x0"$
      actual   (nonprintable as hex) : "  0x05p"$
$
Test 179 (p_basic) : FAILED.$
    First line of code: {return test("%p%p%p%p%p%p%p%p%p%p%p%p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected output : "0x10f8efee80x10f8efee90x10f8efeea0x10f8efeec0x10f8efef00x10f8efef40x10f8efef80x10f8eff000x10f8eff080x10f8eff100x10f8eff180x10f8eff20"$
      your output     : "0x10f8efee8p0x10f8efee9p0x10f8efeeap0x10f8efeecp0x10f8efef0p0x10f8efef4p0x10f8efef8p0x10f8eff00p0x10f8eff08p0x10f8eff10p0x10f8eff18p0x10f8eff20p"$
      expected (nonprintable as hex) : "0x10f8efee80x10f8efee90x10f8efeea0x10f8efeec0x10f8efef00x10f8efef40x10f8efef80x10f8eff000x10f8eff080x10f8eff100x10f8eff180x10f8eff20"$
      actual   (nonprintable as hex) : "0x10f8efee8p0x10f8efee9p0x10f8efeeap0x10f8efeecp0x10f8efef0p0x10f8efef4p0x10f8efef8p0x10f8eff00p0x10f8eff08p0x10f8eff10p0x10f8eff18p0x10f8eff20p"$
$
Test 180 (p_width_fit) : FAILED.$
    First line of code: {return test("%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "                                                           0x10f8efee8                                                           0x10f8efee9          "$
      your output     : "                                                           0x10f8efee870p                                                           0x10f8efee970p    "$
      expected (nonprintable as hex) : "                                                           0x10f8efee8                                                           0x10f8efee9          "$
      actual   (nonprintable as hex) : "                                                           0x10f8efee870p                                                           0x10f8efee970p    "$
$
Test 181 (p_width_nofit) : FAILED.$
    First line of code: {return test("%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected output : "0x10f8efee80x10f8efee90x10f8efeea0x10f8efeec0x10f8efef00x10f8efef40x10f8efef80x10f8eff000x10f8eff080x10f8eff100x10f8eff180x10f8eff20"$
      your output     : "0x10f8efee85p0x10f8efee95p0x10f8efeea5p0x10f8efeec5p0x10f8efef05p0x10f8efef45p0x10f8efef85p0x10f8eff005p0x10f8eff085p0x10f8eff105p0x10f8eff185p0x10f8e"$
      expected (nonprintable as hex) : "0x10f8efee80x10f8efee90x10f8efeea0x10f8efeec0x10f8efef00x10f8efef40x10f8efef80x10f8eff000x10f8eff080x10f8eff100x10f8eff180x10f8eff20"$
      actual   (nonprintable as hex) : "0x10f8efee85p0x10f8efee95p0x10f8efeea5p0x10f8efeec5p0x10f8efef05p0x10f8efef45p0x10f8efef85p0x10f8eff005p0x10f8eff085p0x10f8eff105p0x10f8eff185p0x10f8e"$
$
Test 182 (p_width_16) : FAILED.$
    First line of code: {return test("%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "     0x10f8efee8     0x10f8efee9     0x10f8efeea     0x10f8efeec     0x10f8efef0     0x10f8efef4     0x10f8efef8     0x10f8eff00     0x10f8eff08     0"$
      your output     : "     0x10f8efee816p     0x10f8efee916p     0x10f8efeea16p     0x10f8efeec16p     0x10f8efef016p     0x10f8efef416p     0x10f8efef816p     0x10f8eff001"$
      expected (nonprintable as hex) : "     0x10f8efee8     0x10f8efee9     0x10f8efeea     0x10f8efeec     0x10f8efef0     0x10f8efef4     0x10f8efef8     0x10f8eff00     0x10f8eff08     0"$
      actual   (nonprintable as hex) : "     0x10f8efee816p     0x10f8efee916p     0x10f8efeea16p     0x10f8efeec16p     0x10f8efef016p     0x10f8efef416p     0x10f8efef816p     0x10f8eff001"$
$
Test 183 (p_width_8) : FAILED.$
    First line of code: {return test("%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected output : "0x10f8efee80x10f8efee90x10f8efeea0x10f8efeec0x10f8efef00x10f8efef40x10f8efef80x10f8eff000x10f8eff080x10f8eff100x10f8eff180x10f8eff20"$
      your output     : "0x10f8efee88p0x10f8efee98p0x10f8efeea8p0x10f8efeec8p0x10f8efef08p0x10f8efef48p0x10f8efef88p0x10f8eff008p0x10f8eff088p0x10f8eff108p0x10f8eff188p0x10f8e"$
      expected (nonprintable as hex) : "0x10f8efee80x10f8efee90x10f8efeea0x10f8efeec0x10f8efef00x10f8efef40x10f8efef80x10f8eff000x10f8eff080x10f8eff100x10f8eff180x10f8eff20"$
      actual   (nonprintable as hex) : "0x10f8efee88p0x10f8efee98p0x10f8efeea8p0x10f8efeec8p0x10f8efef08p0x10f8efef48p0x10f8efef88p0x10f8eff008p0x10f8eff088p0x10f8eff108p0x10f8eff188p0x10f8e"$
$
Test 184 (p_width_32) : FAILED.$
    First line of code: {return test("%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "                     0x10f8efee8                     0x10f8efee9                     0x10f8efeea                     0x10f8efeec                     0"$
      your output     : "                     0x10f8efee832p                     0x10f8efee932p                     0x10f8efeea32p                     0x10f8efeec32p          "$
      expected (nonprintable as hex) : "                     0x10f8efee8                     0x10f8efee9                     0x10f8efeea                     0x10f8efeec                     0"$
      actual   (nonprintable as hex) : "                     0x10f8efee832p                     0x10f8efee932p                     0x10f8efeea32p                     0x10f8efeec32p          "$
$
Test 185 (p_width_fit_lj) : FAILED.$
    First line of code: {return test("%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected output : "0x10f8efee8                                                           0x10f8efee9                                                           0x10f8efee"$
      your output     : "0x10f8efee8                                                           -70p0x10f8efee9                                                           -70p0x"$
      expected (nonprintable as hex) : "0x10f8efee8                                                           0x10f8efee9                                                           0x10f8efee"$
      actual   (nonprintable as hex) : "0x10f8efee8                                                           -70p0x10f8efee9                                                           -70p0x"$
$
Test 186 (p_width_nofit_lj) : FAILED.$
    First line of code: {return test("%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "0x10f8efee80x10f8efee90x10f8efeea0x10f8efeec0x10f8efef00x10f8efef40x10f8efef80x10f8eff000x10f8eff080x10f8eff100x10f8eff180x10f8eff20"$
      your output     : "0x10f8efee8-5p0x10f8efee9-5p0x10f8efeea-5p0x10f8efeec-5p0x10f8efef0-5p0x10f8efef4-5p0x10f8efef8-5p0x10f8eff00-5p0x10f8eff08-5p0x10f8eff10-5p0x10f8eff1"$
      expected (nonprintable as hex) : "0x10f8efee80x10f8efee90x10f8efeea0x10f8efeec0x10f8efef00x10f8efef40x10f8efef80x10f8eff000x10f8eff080x10f8eff100x10f8eff180x10f8eff20"$
      actual   (nonprintable as hex) : "0x10f8efee8-5p0x10f8efee9-5p0x10f8efeea-5p0x10f8efeec-5p0x10f8efef0-5p0x10f8efef4-5p0x10f8efef8-5p0x10f8eff00-5p0x10f8eff08-5p0x10f8eff10-5p0x10f8eff1"$
$
Test 187 (p_width_16_lj) : FAILED.$
    First line of code: {return test("%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected output : "0x10f8efee8     0x10f8efee9     0x10f8efeea     0x10f8efeec     0x10f8efef0     0x10f8efef4     0x10f8efef8     0x10f8eff00     0x10f8eff08     0x10f8"$
      your output     : "0x10f8efee8     -16p0x10f8efee9     -16p0x10f8efeea     -16p0x10f8efeec     -16p0x10f8efef0     -16p0x10f8efef4     -16p0x10f8efef8     -16p0x10f8eff0"$
      expected (nonprintable as hex) : "0x10f8efee8     0x10f8efee9     0x10f8efeea     0x10f8efeec     0x10f8efef0     0x10f8efef4     0x10f8efef8     0x10f8eff00     0x10f8eff08     0x10f8"$
      actual   (nonprintable as hex) : "0x10f8efee8     -16p0x10f8efee9     -16p0x10f8efeea     -16p0x10f8efeec     -16p0x10f8efef0     -16p0x10f8efef4     -16p0x10f8efef8     -16p0x10f8eff0"$
$
Test 188 (p_width_8_lj) : FAILED.$
    First line of code: {return test("%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "0x10f8efee80x10f8efee90x10f8efeea0x10f8efeec0x10f8efef00x10f8efef40x10f8efef80x10f8eff000x10f8eff080x10f8eff100x10f8eff180x10f8eff20"$
      your output     : "0x10f8efee8-8p0x10f8efee9-8p0x10f8efeea-8p0x10f8efeec-8p0x10f8efef0-8p0x10f8efef4-8p0x10f8efef8-8p0x10f8eff00-8p0x10f8eff08-8p0x10f8eff10-8p0x10f8eff1"$
      expected (nonprintable as hex) : "0x10f8efee80x10f8efee90x10f8efeea0x10f8efeec0x10f8efef00x10f8efef40x10f8efef80x10f8eff000x10f8eff080x10f8eff100x10f8eff180x10f8eff20"$
      actual   (nonprintable as hex) : "0x10f8efee8-8p0x10f8efee9-8p0x10f8efeea-8p0x10f8efeec-8p0x10f8efef0-8p0x10f8efef4-8p0x10f8efef8-8p0x10f8eff00-8p0x10f8eff08-8p0x10f8eff10-8p0x10f8eff1"$
$
Test 189 (p_width_32_lj) : FAILED.$
    First line of code: {return test("%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected output : "0x10f8efee8                     0x10f8efee9                     0x10f8efeea                     0x10f8efeec                     0x10f8efef0           "$
      your output     : "0x10f8efee8                     -32p0x10f8efee9                     -32p0x10f8efeea                     -32p0x10f8efeec                     -32p0x10f8"$
      expected (nonprintable as hex) : "0x10f8efee8                     0x10f8efee9                     0x10f8efeea                     0x10f8efeec                     0x10f8efef0           "$
      actual   (nonprintable as hex) : "0x10f8efee8                     -32p0x10f8efee9                     -32p0x10f8efeea                     -32p0x10f8efeec                     -32p0x10f8"$
$
Test 190 (d_basic_pos) : FAILED.$
    First line of code: {return test("this %d number", 17);}$
      expected output : "this 17 number"$
      your output     : "this 17d number"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this 17d number"$
$
Test 191 (d_basic_neg) : FAILED.$
    First line of code: {return test("this %d number", -267);}$
      expected output : "this -267 number"$
      your output     : "this -267d number"$
      expected (nonprintable as hex) : "this -267 number"$
      actual   (nonprintable as hex) : "this -267d number"$
$
Test 192 (d_basic_zero) : FAILED.$
    First line of code: {return test("this %d number", 0);}$
      expected output : "this 0 number"$
      your output     : "this 0d number"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0d number"$
$
Test 193 (d_basic_onlypos) : FAILED.$
    First line of code: {return test("%d", 3);}$
      expected output : "3"$
      your output     : "3d"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3d"$
$
Test 194 (d_basic_onlyneg) : FAILED.$
    First line of code: {return test("%d", -1);}$
      expected output : "-1"$
      your output     : "-1d"$
      expected (nonprintable as hex) : "-1"$
      actual   (nonprintable as hex) : "-1d"$
$
Test 195 (d_basic_onlyzero) : FAILED.$
    First line of code: {return test("%d", 0);}$
      expected output : "0"$
      your output     : "0d"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0d"$
$
Test 196 (d_intmax) : FAILED.$
    First line of code: {return test("%d",  2147483647);}$
      expected output : "2147483647"$
      your output     : "2147483647d"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647d"$
$
Test 197 (d_intmin) : FAILED.$
    First line of code: {return test("%d", (int)(-2147483678));}$
      expected output : "2147483618"$
      your output     : "2147483618d"$
      expected (nonprintable as hex) : "2147483618"$
      actual   (nonprintable as hex) : "2147483618d"$
$
Test 198 (d_width_pos_fits) : FAILED.$
    First line of code: {return test("%7d", 33);}$
      expected output : "     33"$
      your output     : "     337d"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "     337d"$
$
Test 199 (d_width_neg_fits) : FAILED.$
    First line of code: {return test("%7d", -14);}$
      expected output : "    -14"$
      your output     : "    -147d"$
      expected (nonprintable as hex) : "    -14"$
      actual   (nonprintable as hex) : "    -147d"$
$
Test 200 (d_width_zero_fits) : FAILED.$
    First line of code: {return test("%3d", 0);}$
      expected output : "  0"$
      your output     : "  03d"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "  03d"$
$
Test 201 (d_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5d", 52625);}$
      expected output : "52625"$
      your output     : "526255d"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "526255d"$
$
Test 202 (d_width_neg_exactfit) : FAILED.$
    First line of code: {return test("%5d", -2562);}$
      expected output : "-2562"$
      your output     : "-25625d"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-25625d"$
$
Test 203 (d_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4d", 94827);}$
      expected output : "94827"$
      your output     : "948274d"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "948274d"$
$
Test 204 (d_width_neg_nofit) : FAILED.$
    First line of code: {return test("%4d", -2464);}$
      expected output : "-2464"$
      your output     : "-24644d"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-24644d"$
$
Test 205 (d_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7d", 33);}$
      expected output : "33     "$
      your output     : "33     -7d"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "33     -7d"$
$
Test 206 (d_width_neg_fits_lj) : FAILED.$
    First line of code: {return test("%-7d", -14);}$
      expected output : "-14    "$
      your output     : "-14    -7d"$
      expected (nonprintable as hex) : "-14    "$
      actual   (nonprintable as hex) : "-14    -7d"$
$
Test 207 (d_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3d", 0);}$
      expected output : "0  "$
      your output     : "0  -3d"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "0  -3d"$
$
Test 208 (d_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5d", 52625);}$
      expected output : "52625"$
      your output     : "52625-5d"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "52625-5d"$
$
Test 209 (d_width_neg_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5d", -2562);}$
      expected output : "-2562"$
      your output     : "-2562-5d"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-2562-5d"$
$
Test 210 (d_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4d", 94827);}$
      expected output : "94827"$
      your output     : "94827-4d"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827-4d"$
$
Test 211 (d_width_neg_nofit_lj) : FAILED.$
    First line of code: {return test("%-4d", -2464);}$
      expected output : "-2464"$
      your output     : "-2464-4d"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-2464-4d"$
$
Test 212 (d_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5d", 2);}$
      expected output : "00002"$
      your output     : "00002.5d"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "00002.5d"$
$
Test 213 (d_prec_fits_neg) : FAILED.$
    First line of code: {return test("%.6d", -3);}$
      expected output : "-000003"$
      your output     : "-000003.6d"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "-000003.6d"$
$
Test 214 (d_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3d", 0);}$
      expected output : "000"$
      your output     : "000.3d"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "000.3d"$
$
Test 215 (d_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4d", 5263);}$
      expected output : "5263"$
      your output     : "5263.4d"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "5263.4d"$
$
Test 216 (d_prec_exactfit_neg) : FAILED.$
    First line of code: {return test("%.4d", -2372);}$
      expected output : "-2372"$
      your output     : "-2372.4d"$
      expected (nonprintable as hex) : "-2372"$
      actual   (nonprintable as hex) : "-2372.4d"$
$
Test 217 (d_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3d", 13862);}$
      expected output : "13862"$
      your output     : "13862.3d"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "13862.3d"$
$
Test 218 (d_prec_nofit_neg) : FAILED.$
    First line of code: {return test("%.3d",-23646);}$
      expected output : "-23646"$
      your output     : "-23646.3d"$
      expected (nonprintable as hex) : "-23646"$
      actual   (nonprintable as hex) : "-23646.3d"$
$
Test 219 (d_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05d", 43);}$
      expected output : "00043"$
      your output     : "0004305d"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "0004305d"$
$
Test 220 (d_zp_neg_fits) : FAILED.$
    First line of code: {return test("%07d", -54);}$
      expected output : "-000054"$
      your output     : "-00005407d"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "-00005407d"$
$
Test 221 (d_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03d", 0);}$
      expected output : "000"$
      your output     : "00003d"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "00003d"$
$
Test 222 (d_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03d", 634);}$
      expected output : "634"$
      your output     : "63403d"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "63403d"$
$
Test 223 (d_zp_neg_exactfit) : FAILED.$
    First line of code: {return test("%04d", -532);}$
      expected output : "-532"$
      your output     : "-53204d"$
      expected (nonprintable as hex) : "-532"$
      actual   (nonprintable as hex) : "-53204d"$
$
Test 224 (d_zp_neg_minus1fit) : FAILED.$
    First line of code: {return test("%04d", -4825);}$
      expected output : "-4825"$
      your output     : "-482504d"$
      expected (nonprintable as hex) : "-4825"$
      actual   (nonprintable as hex) : "-482504d"$
$
Test 225 (d_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5d", 34);}$
      expected output : "   00034"$
      your output     : "   000348.5d"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   000348.5d"$
$
Test 226 (d_prec_width_fit_fit_neg) : FAILED.$
    First line of code: {return test("%10.5d", -216);}$
      expected output : "    -00216"$
      your output     : "    -0021610.5d"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -0021610.5d"$
$
Test 227 (d_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5d", 0);}$
      expected output : "   00000"$
      your output     : "   000008.5d"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   000008.5d"$
$
Test 228 (d_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3d", 8375);}$
      expected output : "    8375"$
      your output     : "    83758.3d"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    83758.3d"$
$
Test 229 (d_prec_width_nofit_fit_neg) : FAILED.$
    First line of code: {return test("%8.3d", -8473);}$
      expected output : "   -8473"$
      your output     : "   -84738.3d"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -84738.3d"$
$
Test 230 (d_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7d", 3267);}$
      expected output : "0003267"$
      your output     : "00032673.7d"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032673.7d"$
$
Test 231 (d_prec_width_fit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.7d", -2375);}$
      expected output : "-0002375"$
      your output     : "-00023753.7d"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-00023753.7d"$
$
Test 232 (d_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3d", 6983);}$
      expected output : "6983"$
      your output     : "69833.3d"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69833.3d"$
$
Test 233 (d_prec_width_nofit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.3d", -8462);}$
      expected output : "-8462"$
      your output     : "-84623.3d"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-84623.3d"$
$
Test 234 (d_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5d", 34);}$
      expected output : "00034   "$
      your output     : "00034   -8.5d"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   -8.5d"$
$
Test 235 (d_prec_width_fit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-10.5d", -216);}$
      expected output : "-00216    "$
      your output     : "-00216    -10.5d"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "-00216    -10.5d"$
$
Test 236 (d_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5d", 0);}$
      expected output : "00000   "$
      your output     : "00000   -8.5d"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   -8.5d"$
$
Test 237 (d_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3d", 8375);}$
      expected output : "8375    "$
      your output     : "8375    -8.3d"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    -8.3d"$
$
Test 238 (d_prec_width_nofit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-8.3d", -8473);}$
      expected output : "-8473   "$
      your output     : "-8473   -8.3d"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "-8473   -8.3d"$
$
Test 239 (d_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7d", 3267);}$
      expected output : "0003267"$
      your output     : "0003267-3.7d"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267-3.7d"$
$
Test 240 (d_prec_width_fit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.7d", -2375);}$
      expected output : "-0002375"$
      your output     : "-0002375-3.7d"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-0002375-3.7d"$
$
Test 241 (d_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3d", 6983);}$
      expected output : "6983"$
      your output     : "6983-3.3d"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983-3.3d"$
$
Test 242 (d_prec_width_nofit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.3d", -8462);}$
      expected output : "-8462"$
      your output     : "-8462-3.3d"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-8462-3.3d"$
$
Test 243 (d_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5d", 34);}$
      expected output : "   00034"$
      your output     : "   0003408.5d"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   0003408.5d"$
$
Test 244 (d_prec_width_ff_neg_zp) : FAILED.$
    First line of code: {return test("%010.5d", -216);}$
      expected output : "    -00216"$
      your output     : "    -00216010.5d"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -00216010.5d"$
$
Test 245 (d_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5d", 0);}$
      expected output : "   00000"$
      your output     : "   0000008.5d"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   0000008.5d"$
$
Test 246 (d_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3d", 8375);}$
      expected output : "    8375"$
      your output     : "    837508.3d"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    837508.3d"$
$
Test 247 (d_prec_width_nf_neg_zp) : FAILED.$
    First line of code: {return test("%08.3d", -8473);}$
      expected output : "   -8473"$
      your output     : "   -847308.3d"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -847308.3d"$
$
Test 248 (d_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7d", 3267);}$
      expected output : "0003267"$
      your output     : "000326703.7d"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "000326703.7d"$
$
Test 249 (d_prec_width_fn_neg_zp) : FAILED.$
    First line of code: {return test("%03.7d", -2375);}$
      expected output : "-0002375"$
      your output     : "-000237503.7d"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-000237503.7d"$
$
Test 250 (d_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3d", 6983);}$
      expected output : "6983"$
      your output     : "698303.3d"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "698303.3d"$
$
Test 251 (d_prec_width_nn_neg_zp) : FAILED.$
    First line of code: {return test("%03.3d", -8462);}$
      expected output : "-8462"$
      your output     : "-846203.3d"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-846203.3d"$
$
Test 252 (d_prec_width_ff_pos_lj_zp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5d", 34);}$
      expected output : "00034   "$
      your output     : "00034   0-8.5d"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   0-8.5d"$
$
Test 253 (d_prec_width_ff_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-10.5d", -216);}$
      expected output : "-00216    "$
      your output     : "-00216    0-10.5d"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "-00216    0-10.5d"$
$
Test 254 (d_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5d", 0);}$
      expected output : "00000   "$
      your output     : "00000   0-8.5d"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   0-8.5d"$
$
Test 255 (d_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3d", 8375);}$
      expected output : "8375    "$
      your output     : "8375    0-8.3d"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    0-8.3d"$
$
Test 256 (d_prec_width_nf_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3d", -8473);}$
      expected output : "-8473   "$
      your output     : "-8473   0-8.3d"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "-8473   0-8.3d"$
$
Test 257 (d_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7d", 3267);}$
      expected output : "0003267"$
      your output     : "00032670-3.7d"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032670-3.7d"$
$
Test 258 (d_prec_width_fn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7d", -2375);}$
      expected output : "-0002375"$
      your output     : "-00023750-3.7d"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-00023750-3.7d"$
$
Test 259 (d_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3d", 6983);}$
      expected output : "6983"$
      your output     : "69830-3.3d"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69830-3.3d"$
$
Test 260 (d_prec_width_nn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3d", -8462);}$
      expected output : "-8462"$
      your output     : "-84620-3.3d"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-84620-3.3d"$
$
Test 261 (d_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0d", 0);}$
      expected output : ""$
      your output     : ".0d"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0d"$
$
Test 262 (d_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.d", 0);}$
      expected output : ""$
      your output     : ".d"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".d"$
$
Test 263 (d_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0d", 0);}$
      expected output : "     "$
      your output     : "     5.0d"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.0d"$
$
Test 264 (d_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.d", 0);}$
      expected output : "     "$
      your output     : "     5.d"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.d"$
$
Test 265 (d_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0d", 0);}$
      expected output : "     "$
      your output     : "     -5.0d"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.0d"$
$
Test 266 (d_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.d", 0);}$
      expected output : "     "$
      your output     : "     -5.d"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.d"$
$
Test 267 (i_basic_pos) : FAILED.$
    First line of code: {return test("this %i number", 17);}$
      expected output : "this 17 number"$
      your output     : "this 17i number"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this 17i number"$
$
Test 268 (i_basic_neg) : FAILED.$
    First line of code: {return test("this %i number", -267);}$
      expected output : "this -267 number"$
      your output     : "this -267i number"$
      expected (nonprintable as hex) : "this -267 number"$
      actual   (nonprintable as hex) : "this -267i number"$
$
Test 269 (i_basic_zero) : FAILED.$
    First line of code: {return test("this %i number", 0);}$
      expected output : "this 0 number"$
      your output     : "this 0i number"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0i number"$
$
Test 270 (i_basic_onlypos) : FAILED.$
    First line of code: {return test("%i", 3);}$
      expected output : "3"$
      your output     : "3i"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3i"$
$
Test 271 (i_basic_onlyneg) : FAILED.$
    First line of code: {return test("%i", -1);}$
      expected output : "-1"$
      your output     : "-1i"$
      expected (nonprintable as hex) : "-1"$
      actual   (nonprintable as hex) : "-1i"$
$
Test 272 (i_basic_onlyzero) : FAILED.$
    First line of code: {return test("%i", 0);}$
      expected output : "0"$
      your output     : "0i"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0i"$
$
Test 273 (i_intmax) : FAILED.$
    First line of code: {return test("%i",  2147483647);}$
      expected output : "2147483647"$
      your output     : "2147483647i"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647i"$
$
Test 274 (i_intmin) : FAILED.$
    First line of code: {return test("%i", (int)(-2147483678));}$
      expected output : "2147483618"$
      your output     : "2147483618i"$
      expected (nonprintable as hex) : "2147483618"$
      actual   (nonprintable as hex) : "2147483618i"$
$
Test 275 (i_width_pos_fits) : FAILED.$
    First line of code: {return test("%7i", 33);}$
      expected output : "     33"$
      your output     : "     337i"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "     337i"$
$
Test 276 (i_width_neg_fits) : FAILED.$
    First line of code: {return test("%7i", -14);}$
      expected output : "    -14"$
      your output     : "    -147i"$
      expected (nonprintable as hex) : "    -14"$
      actual   (nonprintable as hex) : "    -147i"$
$
Test 277 (i_width_zero_fits) : FAILED.$
    First line of code: {return test("%3i", 0);}$
      expected output : "  0"$
      your output     : "  03i"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "  03i"$
$
Test 278 (i_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5i", 52625);}$
      expected output : "52625"$
      your output     : "526255i"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "526255i"$
$
Test 279 (i_width_neg_exactfit) : FAILED.$
    First line of code: {return test("%5i", -2562);}$
      expected output : "-2562"$
      your output     : "-25625i"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-25625i"$
$
Test 280 (i_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4i", 94827);}$
      expected output : "94827"$
      your output     : "948274i"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "948274i"$
$
Test 281 (i_width_neg_nofit) : FAILED.$
    First line of code: {return test("%4i", -2464);}$
      expected output : "-2464"$
      your output     : "-24644i"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-24644i"$
$
Test 282 (i_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7i", 33);}$
      expected output : "33     "$
      your output     : "33     -7i"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "33     -7i"$
$
Test 283 (i_width_neg_fits_lj) : FAILED.$
    First line of code: {return test("%-7i", -14);}$
      expected output : "-14    "$
      your output     : "-14    -7i"$
      expected (nonprintable as hex) : "-14    "$
      actual   (nonprintable as hex) : "-14    -7i"$
$
Test 284 (i_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3i", 0);}$
      expected output : "0  "$
      your output     : "0  -3i"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "0  -3i"$
$
Test 285 (i_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5i", 52625);}$
      expected output : "52625"$
      your output     : "52625-5i"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "52625-5i"$
$
Test 286 (i_width_neg_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5i", -2562);}$
      expected output : "-2562"$
      your output     : "-2562-5i"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-2562-5i"$
$
Test 287 (i_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4i", 94827);}$
      expected output : "94827"$
      your output     : "94827-4i"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827-4i"$
$
Test 288 (i_width_neg_nofit_lj) : FAILED.$
    First line of code: {return test("%-4i", -2464);}$
      expected output : "-2464"$
      your output     : "-2464-4i"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-2464-4i"$
$
Test 289 (i_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5i", 2);}$
      expected output : "00002"$
      your output     : "00002.5i"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "00002.5i"$
$
Test 290 (i_prec_fits_neg) : FAILED.$
    First line of code: {return test("%.6i", -3);}$
      expected output : "-000003"$
      your output     : "-000003.6i"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "-000003.6i"$
$
Test 291 (i_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3i", 0);}$
      expected output : "000"$
      your output     : "000.3i"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "000.3i"$
$
Test 292 (i_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4i", 5263);}$
      expected output : "5263"$
      your output     : "5263.4i"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "5263.4i"$
$
Test 293 (i_prec_exactfit_neg) : FAILED.$
    First line of code: {return test("%.4i", -2372);}$
      expected output : "-2372"$
      your output     : "-2372.4i"$
      expected (nonprintable as hex) : "-2372"$
      actual   (nonprintable as hex) : "-2372.4i"$
$
Test 294 (i_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3i", 13862);}$
      expected output : "13862"$
      your output     : "13862.3i"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "13862.3i"$
$
Test 295 (i_prec_nofit_neg) : FAILED.$
    First line of code: {return test("%.3i",-23646);}$
      expected output : "-23646"$
      your output     : "-23646.3i"$
      expected (nonprintable as hex) : "-23646"$
      actual   (nonprintable as hex) : "-23646.3i"$
$
Test 296 (i_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05i", 43);}$
      expected output : "00043"$
      your output     : "0004305i"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "0004305i"$
$
Test 297 (i_zp_neg_fits) : FAILED.$
    First line of code: {return test("%07i", -54);}$
      expected output : "-000054"$
      your output     : "-00005407i"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "-00005407i"$
$
Test 298 (i_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03i", 0);}$
      expected output : "000"$
      your output     : "00003i"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "00003i"$
$
Test 299 (i_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03i", 634);}$
      expected output : "634"$
      your output     : "63403i"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "63403i"$
$
Test 300 (i_zp_neg_exactfit) : FAILED.$
    First line of code: {return test("%04i", -532);}$
      expected output : "-532"$
      your output     : "-53204i"$
      expected (nonprintable as hex) : "-532"$
      actual   (nonprintable as hex) : "-53204i"$
$
Test 301 (i_zp_neg_minus1fit) : FAILED.$
    First line of code: {return test("%04i", -4825);}$
      expected output : "-4825"$
      your output     : "-482504i"$
      expected (nonprintable as hex) : "-4825"$
      actual   (nonprintable as hex) : "-482504i"$
$
Test 302 (i_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5i", 34);}$
      expected output : "   00034"$
      your output     : "   000348.5i"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   000348.5i"$
$
Test 303 (i_prec_width_fit_fit_neg) : FAILED.$
    First line of code: {return test("%10.5i", -216);}$
      expected output : "    -00216"$
      your output     : "    -0021610.5i"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -0021610.5i"$
$
Test 304 (i_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5i", 0);}$
      expected output : "   00000"$
      your output     : "   000008.5i"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   000008.5i"$
$
Test 305 (i_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3i", 8375);}$
      expected output : "    8375"$
      your output     : "    83758.3i"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    83758.3i"$
$
Test 306 (i_prec_width_nofit_fit_neg) : FAILED.$
    First line of code: {return test("%8.3i", -8473);}$
      expected output : "   -8473"$
      your output     : "   -84738.3i"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -84738.3i"$
$
Test 307 (i_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7i", 3267);}$
      expected output : "0003267"$
      your output     : "00032673.7i"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032673.7i"$
$
Test 308 (i_prec_width_fit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.7i", -2375);}$
      expected output : "-0002375"$
      your output     : "-00023753.7i"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-00023753.7i"$
$
Test 309 (i_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3i", 6983);}$
      expected output : "6983"$
      your output     : "69833.3i"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69833.3i"$
$
Test 310 (i_prec_width_nofit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.3i", -8462);}$
      expected output : "-8462"$
      your output     : "-84623.3i"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-84623.3i"$
$
Test 311 (i_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5i", 34);}$
      expected output : "00034   "$
      your output     : "00034   -8.5i"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   -8.5i"$
$
Test 312 (i_prec_width_fit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-10.5i", -216);}$
      expected output : "-00216    "$
      your output     : "-00216    -10.5i"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "-00216    -10.5i"$
$
Test 313 (i_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5i", 0);}$
      expected output : "00000   "$
      your output     : "00000   -8.5i"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   -8.5i"$
$
Test 314 (i_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3i", 8375);}$
      expected output : "8375    "$
      your output     : "8375    -8.3i"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    -8.3i"$
$
Test 315 (i_prec_width_nofit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-8.3i", -8473);}$
      expected output : "-8473   "$
      your output     : "-8473   -8.3i"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "-8473   -8.3i"$
$
Test 316 (i_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7i", 3267);}$
      expected output : "0003267"$
      your output     : "0003267-3.7i"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267-3.7i"$
$
Test 317 (i_prec_width_fit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.7i", -2375);}$
      expected output : "-0002375"$
      your output     : "-0002375-3.7i"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-0002375-3.7i"$
$
Test 318 (i_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3i", 6983);}$
      expected output : "6983"$
      your output     : "6983-3.3i"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983-3.3i"$
$
Test 319 (i_prec_width_nofit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.3i", -8462);}$
      expected output : "-8462"$
      your output     : "-8462-3.3i"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-8462-3.3i"$
$
Test 320 (i_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5i", 34);}$
      expected output : "   00034"$
      your output     : "   0003408.5i"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   0003408.5i"$
$
Test 321 (i_prec_width_ff_neg_zp) : FAILED.$
    First line of code: {return test("%010.5i", -216);}$
      expected output : "    -00216"$
      your output     : "    -00216010.5i"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -00216010.5i"$
$
Test 322 (i_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5i", 0);}$
      expected output : "   00000"$
      your output     : "   0000008.5i"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   0000008.5i"$
$
Test 323 (i_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3i", 8375);}$
      expected output : "    8375"$
      your output     : "    837508.3i"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    837508.3i"$
$
Test 324 (i_prec_width_nf_neg_zp) : FAILED.$
    First line of code: {return test("%08.3i", -8473);}$
      expected output : "   -8473"$
      your output     : "   -847308.3i"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -847308.3i"$
$
Test 325 (i_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7i", 3267);}$
      expected output : "0003267"$
      your output     : "000326703.7i"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "000326703.7i"$
$
Test 326 (i_prec_width_fn_neg_zp) : FAILED.$
    First line of code: {return test("%03.7i", -2375);}$
      expected output : "-0002375"$
      your output     : "-000237503.7i"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-000237503.7i"$
$
Test 327 (i_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3i", 6983);}$
      expected output : "6983"$
      your output     : "698303.3i"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "698303.3i"$
$
Test 328 (i_prec_width_nn_neg_zp) : FAILED.$
    First line of code: {return test("%03.3i", -8462);}$
      expected output : "-8462"$
      your output     : "-846203.3i"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-846203.3i"$
$
Test 329 (i_prec_width_ff_pos_lj_zp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5i", 34);}$
      expected output : "00034   "$
      your output     : "00034   0-8.5i"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   0-8.5i"$
$
Test 330 (i_prec_width_ff_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-10.5i", -216);}$
      expected output : "-00216    "$
      your output     : "-00216    0-10.5i"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "-00216    0-10.5i"$
$
Test 331 (i_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5i", 0);}$
      expected output : "00000   "$
      your output     : "00000   0-8.5i"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   0-8.5i"$
$
Test 332 (i_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3i", 8375);}$
      expected output : "8375    "$
      your output     : "8375    0-8.3i"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    0-8.3i"$
$
Test 333 (i_prec_width_nf_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3i", -8473);}$
      expected output : "-8473   "$
      your output     : "-8473   0-8.3i"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "-8473   0-8.3i"$
$
Test 334 (i_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7i", 3267);}$
      expected output : "0003267"$
      your output     : "00032670-3.7i"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032670-3.7i"$
$
Test 335 (i_prec_width_fn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7i", -2375);}$
      expected output : "-0002375"$
      your output     : "-00023750-3.7i"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-00023750-3.7i"$
$
Test 336 (i_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3i", 6983);}$
      expected output : "6983"$
      your output     : "69830-3.3i"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69830-3.3i"$
$
Test 337 (i_prec_width_nn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3i", -8462);}$
      expected output : "-8462"$
      your output     : "-84620-3.3i"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-84620-3.3i"$
$
Test 338 (i_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0i", 0);}$
      expected output : ""$
      your output     : ".0i"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0i"$
$
Test 339 (i_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.i", 0);}$
      expected output : ""$
      your output     : ".i"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".i"$
$
Test 340 (i_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0i", 0);}$
      expected output : "     "$
      your output     : "     5.0i"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.0i"$
$
Test 341 (i_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.i", 0);}$
      expected output : "     "$
      your output     : "     5.i"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.i"$
$
Test 342 (i_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0i", 0);}$
      expected output : "     "$
      your output     : "     -5.0i"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.0i"$
$
Test 343 (i_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.i", 0);}$
      expected output : "     "$
      your output     : "     -5.i"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.i"$
$
Test 344 (u_basic_pos) : FAILED.$
    First line of code: {return test("this %u number", 17);}$
      expected output : "this 17 number"$
      your output     : "this 17u number"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this 17u number"$
$
Test 345 (u_basic_zero) : FAILED.$
    First line of code: {return test("this %u number", 0);}$
      expected output : "this 0 number"$
      your output     : "this 0u number"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0u number"$
$
Test 346 (u_basic_onlypos) : FAILED.$
    First line of code: {return test("%u", 3);}$
      expected output : "3"$
      your output     : "3u"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3u"$
$
Test 347 (u_uintmax) : FAILED.$
    First line of code: {return test("%u", 4294967295u);}$
      expected output : "4294967295"$
      your output     : "4294967295u"$
      expected (nonprintable as hex) : "4294967295"$
      actual   (nonprintable as hex) : "4294967295u"$
$
Test 348 (u_width_pos_fits) : FAILED.$
    First line of code: {return test("%7u", 33);}$
      expected output : "     33"$
      your output     : "     337u"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "     337u"$
$
Test 349 (u_width_zero_fits) : FAILED.$
    First line of code: {return test("%3u", 0);}$
      expected output : "  0"$
      your output     : "  03u"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "  03u"$
$
Test 350 (u_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5u", 52625);}$
      expected output : "52625"$
      your output     : "526255u"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "526255u"$
$
Test 351 (u_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4u", 94827);}$
      expected output : "94827"$
      your output     : "948274u"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "948274u"$
$
Test 352 (u_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7u", 33);}$
      expected output : "33     "$
      your output     : "33     -7u"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "33     -7u"$
$
Test 353 (u_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3u", 0);}$
      expected output : "0  "$
      your output     : "0  -3u"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "0  -3u"$
$
Test 354 (u_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5u", 52625);}$
      expected output : "52625"$
      your output     : "52625-5u"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "52625-5u"$
$
Test 355 (u_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4u", 94827);}$
      expected output : "94827"$
      your output     : "94827-4u"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827-4u"$
$
Test 356 (u_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5u", 2);}$
      expected output : "00002"$
      your output     : "00002.5u"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "00002.5u"$
$
Test 357 (u_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3u", 0);}$
      expected output : "000"$
      your output     : "000.3u"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "000.3u"$
$
Test 358 (u_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4u", 5263);}$
      expected output : "5263"$
      your output     : "5263.4u"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "5263.4u"$
$
Test 359 (u_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3u", 13862);}$
      expected output : "13862"$
      your output     : "13862.3u"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "13862.3u"$
$
Test 360 (u_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05u", 43);}$
      expected output : "00043"$
      your output     : "0004305u"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "0004305u"$
$
Test 361 (u_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03u", 0);}$
      expected output : "000"$
      your output     : "00003u"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "00003u"$
$
Test 362 (u_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03u", 634);}$
      expected output : "634"$
      your output     : "63403u"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "63403u"$
$
Test 363 (u_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5u", 34);}$
      expected output : "   00034"$
      your output     : "   000348.5u"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   000348.5u"$
$
Test 364 (u_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5u", 0);}$
      expected output : "   00000"$
      your output     : "   000008.5u"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   000008.5u"$
$
Test 365 (u_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3u", 8375);}$
      expected output : "    8375"$
      your output     : "    83758.3u"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    83758.3u"$
$
Test 366 (u_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7u", 3267);}$
      expected output : "0003267"$
      your output     : "00032673.7u"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032673.7u"$
$
Test 367 (u_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3u", 6983);}$
      expected output : "6983"$
      your output     : "69833.3u"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69833.3u"$
$
Test 368 (u_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5u", 34);}$
      expected output : "00034   "$
      your output     : "00034   -8.5u"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   -8.5u"$
$
Test 369 (u_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5u", 0);}$
      expected output : "00000   "$
      your output     : "00000   -8.5u"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   -8.5u"$
$
Test 370 (u_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3u", 8375);}$
      expected output : "8375    "$
      your output     : "8375    -8.3u"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    -8.3u"$
$
Test 371 (u_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7u", 3267);}$
      expected output : "0003267"$
      your output     : "0003267-3.7u"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267-3.7u"$
$
Test 372 (u_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3u", 6983);}$
      expected output : "6983"$
      your output     : "6983-3.3u"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983-3.3u"$
$
Test 373 (u_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5u", 34);}$
      expected output : "   00034"$
      your output     : "   0003408.5u"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   0003408.5u"$
$
Test 374 (u_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5u", 0);}$
      expected output : "   00000"$
      your output     : "   0000008.5u"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   0000008.5u"$
$
Test 375 (u_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3u", 8375);}$
      expected output : "    8375"$
      your output     : "    837508.3u"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    837508.3u"$
$
Test 376 (u_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7u", 3267);}$
      expected output : "0003267"$
      your output     : "000326703.7u"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "000326703.7u"$
$
Test 377 (u_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3u", 6983);}$
      expected output : "6983"$
      your output     : "698303.3u"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "698303.3u"$
$
Test 378 (u_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5u", 34);}$
      expected output : "00034   "$
      your output     : "00034   0-8.5u"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   0-8.5u"$
$
Test 379 (u_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5u", 0);}$
      expected output : "00000   "$
      your output     : "00000   0-8.5u"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   0-8.5u"$
$
Test 380 (u_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3u", 8375);}$
      expected output : "8375    "$
      your output     : "8375    0-8.3u"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    0-8.3u"$
$
Test 381 (u_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7u", 3267);}$
      expected output : "0003267"$
      your output     : "00032670-3.7u"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032670-3.7u"$
$
Test 382 (u_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3u", 6983);}$
      expected output : "6983"$
      your output     : "69830-3.3u"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69830-3.3u"$
$
Test 383 (u_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0u", 0);}$
      expected output : ""$
      your output     : ".0u"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0u"$
$
Test 384 (u_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.u", 0);}$
      expected output : ""$
      your output     : ".u"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".u"$
$
Test 385 (u_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0u", 0);}$
      expected output : "     "$
      your output     : "     5.0u"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.0u"$
$
Test 386 (u_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.u", 0);}$
      expected output : "     "$
      your output     : "     5.u"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.u"$
$
Test 387 (u_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0u", 0);}$
      expected output : "     "$
      your output     : "     -5.0u"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.0u"$
$
Test 388 (u_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.u", 0);}$
      expected output : "     "$
      your output     : "     -5.u"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.u"$
$
Test 389 (x_basic_pos) : FAILED.$
    First line of code: {return test("this %x number", 17);}$
      expected output : "this 11 number"$
      your output     : "this 11x number"$
      expected (nonprintable as hex) : "this 11 number"$
      actual   (nonprintable as hex) : "this 11x number"$
$
Test 390 (x_basic_zero) : FAILED.$
    First line of code: {return test("this %x number", 0);}$
      expected output : "this 0 number"$
      your output     : "this 0x number"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0x number"$
$
Test 391 (x_basic_onlypos) : FAILED.$
    First line of code: {return test("%x", 3);}$
      expected output : "3"$
      your output     : "3x"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3x"$
$
Test 392 (x_hexlmax) : FAILED.$
    First line of code: {return test("%x", 4294967295u);}$
      expected output : "ffffffff"$
      your output     : "ffffffffx"$
      expected (nonprintable as hex) : "ffffffff"$
      actual   (nonprintable as hex) : "ffffffffx"$
$
Test 393 (x_width_pos_fits) : FAILED.$
    First line of code: {return test("%7x", 33);}$
      expected output : "     21"$
      your output     : "     217x"$
      expected (nonprintable as hex) : "     21"$
      actual   (nonprintable as hex) : "     217x"$
$
Test 394 (x_width_zero_fits) : FAILED.$
    First line of code: {return test("%3x", 0);}$
      expected output : "  0"$
      your output     : "  03x"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "  03x"$
$
Test 395 (x_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5x", 52625);}$
      expected output : " cd91"$
      your output     : " cd915x"$
      expected (nonprintable as hex) : " cd91"$
      actual   (nonprintable as hex) : " cd915x"$
$
Test 396 (x_width_pos_nofit) : FAILED.$
    First line of code: {return test("%2x", 94827);}$
      expected output : "1726b"$
      your output     : "1726b2x"$
      expected (nonprintable as hex) : "1726b"$
      actual   (nonprintable as hex) : "1726b2x"$
$
Test 397 (x_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7x", 33);}$
      expected output : "21     "$
      your output     : "21     -7x"$
      expected (nonprintable as hex) : "21     "$
      actual   (nonprintable as hex) : "21     -7x"$
$
Test 398 (x_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3x", 0);}$
      expected output : "0  "$
      your output     : "0  -3x"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "0  -3x"$
$
Test 399 (x_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5x", 52625);}$
      expected output : "cd91 "$
      your output     : "cd91 -5x"$
      expected (nonprintable as hex) : "cd91 "$
      actual   (nonprintable as hex) : "cd91 -5x"$
$
Test 400 (x_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4x", 9648627);}$
      expected output : "9339f3"$
      your output     : "9339f3-4x"$
      expected (nonprintable as hex) : "9339f3"$
      actual   (nonprintable as hex) : "9339f3-4x"$
$
Test 401 (x_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5x", 21);}$
      expected output : "00015"$
      your output     : "00015.5x"$
      expected (nonprintable as hex) : "00015"$
      actual   (nonprintable as hex) : "00015.5x"$
$
Test 402 (x_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3x", 0);}$
      expected output : "000"$
      your output     : "000.3x"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "000.3x"$
$
Test 403 (x_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4x", 5263);}$
      expected output : "148f"$
      your output     : "148f.4x"$
      expected (nonprintable as hex) : "148f"$
      actual   (nonprintable as hex) : "148f.4x"$
$
Test 404 (x_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3x", 938862);}$
      expected output : "e536e"$
      your output     : "e536e.3x"$
      expected (nonprintable as hex) : "e536e"$
      actual   (nonprintable as hex) : "e536e.3x"$
$
Test 405 (x_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05x", 43);}$
      expected output : "0002b"$
      your output     : "0002b05x"$
      expected (nonprintable as hex) : "0002b"$
      actual   (nonprintable as hex) : "0002b05x"$
$
Test 406 (x_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03x", 0);}$
      expected output : "000"$
      your output     : "00003x"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "00003x"$
$
Test 407 (x_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03x", 698334);}$
      expected output : "aa7de"$
      your output     : "aa7de03x"$
      expected (nonprintable as hex) : "aa7de"$
      actual   (nonprintable as hex) : "aa7de03x"$
$
Test 408 (x_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5x", 34);}$
      expected output : "   00022"$
      your output     : "   000228.5x"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "   000228.5x"$
$
Test 409 (x_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5x", 0);}$
      expected output : "   00000"$
      your output     : "   000008.5x"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   000008.5x"$
$
Test 410 (x_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3x", 8375);}$
      expected output : "    20b7"$
      your output     : "    20b78.3x"$
      expected (nonprintable as hex) : "    20b7"$
      actual   (nonprintable as hex) : "    20b78.3x"$
$
Test 411 (x_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%2.7x", 3267);}$
      expected output : "0000cc3"$
      your output     : "0000cc32.7x"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "0000cc32.7x"$
$
Test 412 (x_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3x", 6983);}$
      expected output : "1b47"$
      your output     : "1b473.3x"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "1b473.3x"$
$
Test 413 (x_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5x", 34);}$
      expected output : "00022   "$
      your output     : "00022   -8.5x"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "00022   -8.5x"$
$
Test 414 (x_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5x", 0);}$
      expected output : "00000   "$
      your output     : "00000   -8.5x"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   -8.5x"$
$
Test 415 (x_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3x", 8375);}$
      expected output : "20b7    "$
      your output     : "20b7    -8.3x"$
      expected (nonprintable as hex) : "20b7    "$
      actual   (nonprintable as hex) : "20b7    -8.3x"$
$
Test 416 (x_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-2.7x", 3267);}$
      expected output : "0000cc3"$
      your output     : "0000cc3-2.7x"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "0000cc3-2.7x"$
$
Test 417 (x_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3x", 6983);}$
      expected output : "1b47"$
      your output     : "1b47-3.3x"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "1b47-3.3x"$
$
Test 418 (x_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5x", 34);}$
      expected output : "   00022"$
      your output     : "   0002208.5x"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "   0002208.5x"$
$
Test 419 (x_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5x", 0);}$
      expected output : "   00000"$
      your output     : "   0000008.5x"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   0000008.5x"$
$
Test 420 (x_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3x", 8375);}$
      expected output : "    20b7"$
      your output     : "    20b708.3x"$
      expected (nonprintable as hex) : "    20b7"$
      actual   (nonprintable as hex) : "    20b708.3x"$
$
Test 421 (x_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%02.7x", 3267);}$
      expected output : "0000cc3"$
      your output     : "0000cc302.7x"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "0000cc302.7x"$
$
Test 422 (x_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3x", 6983);}$
      expected output : "1b47"$
      your output     : "1b4703.3x"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "1b4703.3x"$
$
Test 423 (x_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5x", 34);}$
      expected output : "00022   "$
      your output     : "00022   0-8.5x"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "00022   0-8.5x"$
$
Test 424 (x_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5x", 0);}$
      expected output : "00000   "$
      your output     : "00000   0-8.5x"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   0-8.5x"$
$
Test 425 (x_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3x", 8375);}$
      expected output : "20b7    "$
      your output     : "20b7    0-8.3x"$
      expected (nonprintable as hex) : "20b7    "$
      actual   (nonprintable as hex) : "20b7    0-8.3x"$
$
Test 426 (x_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-2.7x", 3267);}$
      expected output : "0000cc3"$
      your output     : "0000cc30-2.7x"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "0000cc30-2.7x"$
$
Test 427 (x_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3x", 6983);}$
      expected output : "1b47"$
      your output     : "1b470-3.3x"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "1b470-3.3x"$
$
Test 428 (x_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0x", 0);}$
      expected output : ""$
      your output     : ".0x"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0x"$
$
Test 429 (x_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.x", 0);}$
      expected output : ""$
      your output     : ".x"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".x"$
$
Test 430 (x_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0x", 0);}$
      expected output : "     "$
      your output     : "     5.0x"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.0x"$
$
Test 431 (x_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.x", 0);}$
      expected output : "     "$
      your output     : "     5.x"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.x"$
$
Test 432 (x_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0x", 0);}$
      expected output : "     "$
      your output     : "     -5.0x"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.0x"$
$
Test 433 (x_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.x", 0);}$
      expected output : "     "$
      your output     : "     -5.x"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.x"$
$
Test 434 (X_basic_hexu_pos) : FAILED.$
    First line of code: {return test("this %X number", 17);}$
      expected output : "this 11 number"$
      your output     : "this 11X number"$
      expected (nonprintable as hex) : "this 11 number"$
      actual   (nonprintable as hex) : "this 11X number"$
$
Test 435 (X_basic_hexu_zero) : FAILED.$
    First line of code: {return test("this %X number", 0);}$
      expected output : "this 0 number"$
      your output     : "this 0X number"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0X number"$
$
Test 436 (X_basic_hexu_onlypos) : FAILED.$
    First line of code: {return test("%X", 3);}$
      expected output : "3"$
      your output     : "3X"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3X"$
$
Test 437 (X_hexumax) : FAILED.$
    First line of code: {return test("%X", 4294967295u);}$
      expected output : "FFFFFFFF"$
      your output     : "FFFFFFFFX"$
      expected (nonprintable as hex) : "FFFFFFFF"$
      actual   (nonprintable as hex) : "FFFFFFFFX"$
$
Test 438 (X_width_pos_fits) : FAILED.$
    First line of code: {return test("%7X", 33);}$
      expected output : "     21"$
      your output     : "     217X"$
      expected (nonprintable as hex) : "     21"$
      actual   (nonprintable as hex) : "     217X"$
$
Test 439 (X_width_zero_fits) : FAILED.$
    First line of code: {return test("%3X", 0);}$
      expected output : "  0"$
      your output     : "  03X"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "  03X"$
$
Test 440 (X_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5X", 52625);}$
      expected output : " CD91"$
      your output     : " CD915X"$
      expected (nonprintable as hex) : " CD91"$
      actual   (nonprintable as hex) : " CD915X"$
$
Test 441 (X_width_pos_nofit) : FAILED.$
    First line of code: {return test("%2X", 94827);}$
      expected output : "1726B"$
      your output     : "1726B2X"$
      expected (nonprintable as hex) : "1726B"$
      actual   (nonprintable as hex) : "1726B2X"$
$
Test 442 (X_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7X", 33);}$
      expected output : "21     "$
      your output     : "21     -7X"$
      expected (nonprintable as hex) : "21     "$
      actual   (nonprintable as hex) : "21     -7X"$
$
Test 443 (X_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3X", 0);}$
      expected output : "0  "$
      your output     : "0  -3X"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "0  -3X"$
$
Test 444 (X_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5X", 52625);}$
      expected output : "CD91 "$
      your output     : "CD91 -5X"$
      expected (nonprintable as hex) : "CD91 "$
      actual   (nonprintable as hex) : "CD91 -5X"$
$
Test 445 (X_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4X", 9648627);}$
      expected output : "9339F3"$
      your output     : "9339F3-4X"$
      expected (nonprintable as hex) : "9339F3"$
      actual   (nonprintable as hex) : "9339F3-4X"$
$
Test 446 (X_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5X", 21);}$
      expected output : "00015"$
      your output     : "00015.5X"$
      expected (nonprintable as hex) : "00015"$
      actual   (nonprintable as hex) : "00015.5X"$
$
Test 447 (X_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3X", 0);}$
      expected output : "000"$
      your output     : "000.3X"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "000.3X"$
$
Test 448 (X_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4X", 5263);}$
      expected output : "148F"$
      your output     : "148F.4X"$
      expected (nonprintable as hex) : "148F"$
      actual   (nonprintable as hex) : "148F.4X"$
$
Test 449 (X_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3X", 938862);}$
      expected output : "E536E"$
      your output     : "E536E.3X"$
      expected (nonprintable as hex) : "E536E"$
      actual   (nonprintable as hex) : "E536E.3X"$
$
Test 450 (X_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05X", 43);}$
      expected output : "0002B"$
      your output     : "0002B05X"$
      expected (nonprintable as hex) : "0002B"$
      actual   (nonprintable as hex) : "0002B05X"$
$
Test 451 (X_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03X", 0);}$
      expected output : "000"$
      your output     : "00003X"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "00003X"$
$
Test 452 (X_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03X", 698334);}$
      expected output : "AA7DE"$
      your output     : "AA7DE03X"$
      expected (nonprintable as hex) : "AA7DE"$
      actual   (nonprintable as hex) : "AA7DE03X"$
$
Test 453 (X_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5X", 34);}$
      expected output : "   00022"$
      your output     : "   000228.5X"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "   000228.5X"$
$
Test 454 (X_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5X", 0);}$
      expected output : "   00000"$
      your output     : "   000008.5X"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   000008.5X"$
$
Test 455 (X_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3X", 8375);}$
      expected output : "    20B7"$
      your output     : "    20B78.3X"$
      expected (nonprintable as hex) : "    20B7"$
      actual   (nonprintable as hex) : "    20B78.3X"$
$
Test 456 (X_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%2.7X", 3267);}$
      expected output : "0000CC3"$
      your output     : "0000CC32.7X"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "0000CC32.7X"$
$
Test 457 (X_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3X", 6983);}$
      expected output : "1B47"$
      your output     : "1B473.3X"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "1B473.3X"$
$
Test 458 (X_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5X", 34);}$
      expected output : "00022   "$
      your output     : "00022   -8.5X"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "00022   -8.5X"$
$
Test 459 (X_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5X", 0);}$
      expected output : "00000   "$
      your output     : "00000   -8.5X"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   -8.5X"$
$
Test 460 (X_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3X", 8375);}$
      expected output : "20B7    "$
      your output     : "20B7    -8.3X"$
      expected (nonprintable as hex) : "20B7    "$
      actual   (nonprintable as hex) : "20B7    -8.3X"$
$
Test 461 (X_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-2.7X", 3267);}$
      expected output : "0000CC3"$
      your output     : "0000CC3-2.7X"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "0000CC3-2.7X"$
$
Test 462 (X_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3X", 6983);}$
      expected output : "1B47"$
      your output     : "1B47-3.3X"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "1B47-3.3X"$
$
Test 463 (X_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5X", 34);}$
      expected output : "   00022"$
      your output     : "   0002208.5X"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "   0002208.5X"$
$
Test 464 (X_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5X", 0);}$
      expected output : "   00000"$
      your output     : "   0000008.5X"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   0000008.5X"$
$
Test 465 (X_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3X", 8375);}$
      expected output : "    20B7"$
      your output     : "    20B708.3X"$
      expected (nonprintable as hex) : "    20B7"$
      actual   (nonprintable as hex) : "    20B708.3X"$
$
Test 466 (X_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%02.7X", 3267);}$
      expected output : "0000CC3"$
      your output     : "0000CC302.7X"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "0000CC302.7X"$
$
Test 467 (X_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3X", 6983);}$
      expected output : "1B47"$
      your output     : "1B4703.3X"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "1B4703.3X"$
$
Test 468 (X_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5X", 34);}$
      expected output : "00022   "$
      your output     : "00022   0-8.5X"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "00022   0-8.5X"$
$
Test 469 (X_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5X", 0);}$
      expected output : "00000   "$
      your output     : "00000   0-8.5X"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   0-8.5X"$
$
Test 470 (X_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3X", 8375);}$
      expected output : "20B7    "$
      your output     : "20B7    0-8.3X"$
      expected (nonprintable as hex) : "20B7    "$
      actual   (nonprintable as hex) : "20B7    0-8.3X"$
$
Test 471 (X_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-2.7X", 3267);}$
      expected output : "0000CC3"$
      your output     : "0000CC30-2.7X"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "0000CC30-2.7X"$
$
Test 472 (X_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3X", 6983);}$
      expected output : "1B47"$
      your output     : "1B470-3.3X"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "1B470-3.3X"$
$
Test 473 (X_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0X", 0);}$
      expected output : ""$
      your output     : ".0X"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0X"$
$
Test 474 (X_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.X", 0);}$
      expected output : ""$
      your output     : ".X"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".X"$
$
Test 475 (X_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0X", 0);}$
      expected output : "     "$
      your output     : "     5.0X"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.0X"$
$
Test 476 (X_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.X", 0);}$
      expected output : "     "$
      your output     : "     5.X"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.X"$
$
Test 477 (X_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0X", 0);}$
      expected output : "     "$
      your output     : "     -5.0X"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.0X"$
$
Test 478 (X_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.X", 0);}$
      expected output : "     "$
      your output     : "     -5.X"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.X"$
$
Test 479 (new2019_star_1) : FAILED.$
    First line of code: {return test("%*s", 32, "abc");}$
      expected output : "                             abc"$
      your output     : "                             abc*s"$
      expected (nonprintable as hex) : "                             abc"$
      actual   (nonprintable as hex) : "                             abc*s"$
$
Test 480 (new2019_star_2) : FAILED.$
    First line of code: {return test("%-*s", 32, "abc");}$
      expected output : "abc                             "$
      your output     : "abc                             -*s"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             -*s"$
$
Test 481 (new2019_star_3) : FAILED.$
    First line of code: {return test("%*s", 3, "hello");}$
      expected output : "hello"$
      your output     : "hello*s"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hello*s"$
$
Test 482 (new2019_star_4) : FAILED.$
    First line of code: {return test("%.*s", 3, "hello");}$
      expected output : "hel"$
      your output     : "hel.*s"$
      expected (nonprintable as hex) : "hel"$
      actual   (nonprintable as hex) : "hel.*s"$
$
Test 483 (new2019_star_5) : FAILED.$
    First line of code: {return test("%.*s", 0, "hello");}$
      expected output : ""$
      your output     : ".*s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".*s"$
$
Test 484 (new2019_star_6) : FAILED.$
    First line of code: {return test("%-*.*s", 7, 3, "yolo");}$
      expected output : "yol    "$
      your output     : "yol    -*.*s"$
      expected (nonprintable as hex) : "yol    "$
      actual   (nonprintable as hex) : "yol    -*.*s"$
$
Test 485 (new2019_star_7) : FAILED.$
    First line of code: {return test("%*i", 4, 94827);}$
      expected output : "94827"$
      your output     : "94827*i"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827*i"$
$
Test 486 (new2019_star_8) : FAILED.$
    First line of code: {return test("%*i", 14, 94827);}$
      expected output : "         94827"$
      your output     : "         94827*i"$
      expected (nonprintable as hex) : "         94827"$
      actual   (nonprintable as hex) : "         94827*i"$
$
Test 487 (new2019_star_9) : FAILED.$
    First line of code: {return test("%.*i", 6, -3);}$
      expected output : "-000003"$
      your output     : "-000003.*i"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "-000003.*i"$
$
Test 488 (new2019_star_10) : FAILED.$
    First line of code: {return test("%0*i", 7, -54);}$
      expected output : "-000054"$
      your output     : "-0000540*i"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "-0000540*i"$
$
Test 489 (new2019_negstar_1) : FAILED.$
    First line of code: {return test("%*s", -32, "abc");}$
      expected output : "abc                             "$
      your output     : "abc                             *s"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             *s"$
$
Test 490 (new2019_negstar_2) : FAILED.$
    First line of code: {return test("%-*s", -32, "abc");}$
      expected output : "abc                             "$
      your output     : "abc                             -*s"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             -*s"$
$
Test 491 (new2019_negstar_3) : FAILED.$
    First line of code: {return test("%*s", -3, "hello");}$
      expected output : "hello"$
      your output     : "hello*s"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hello*s"$
$
Test 492 (new2019_negstar_4) : FAILED.$
    First line of code: {return test("%.*s", -3, "hello");}$
      expected output : "hello"$
      your output     : "hello.*s"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hello.*s"$
$
Test 493 (new2019_negstar_5) : FAILED.$
    First line of code: {return test("%-*.*s", -7, -3, "yolo");}$
      expected output : "yolo   "$
      your output     : "yolo   -*.*s"$
      expected (nonprintable as hex) : "yolo   "$
      actual   (nonprintable as hex) : "yolo   -*.*s"$
$
Test 494 (new2019_negstar_6) : FAILED.$
    First line of code: {return test("%*i", -4, 94827);}$
      expected output : "94827"$
      your output     : "94827*i"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827*i"$
$
Test 495 (new2019_negstar_7) : FAILED.$
    First line of code: {return test("%*i", -14, 94827);}$
      expected output : "94827         "$
      your output     : "94827         *i"$
      expected (nonprintable as hex) : "94827         "$
      actual   (nonprintable as hex) : "94827         *i"$
$
Test 496 (new2019_negstar_8) : FAILED.$
    First line of code: {return test("%.*i", -6, -3);}$
      expected output : "-3"$
      your output     : "-3.*i"$
      expected (nonprintable as hex) : "-3"$
      actual   (nonprintable as hex) : "-3.*i"$
$
Test 497 (new2019_negstar_9) : FAILED.$
    First line of code: {return test("%0*i", -7, -54);}$
      expected output : "-54    "$
      your output     : "-54    0*i"$
      expected (nonprintable as hex) : "-54    "$
      actual   (nonprintable as hex) : "-54    0*i"$
$
Test 548 (moul_c_1) : FAILED.$
    First line of code: {return test("%c", 42);}$
      expected output : "*"$
      your output     : "*c"$
      expected (nonprintable as hex) : "*"$
      actual   (nonprintable as hex) : "*c"$
$
Test 549 (moul_c_2) : FAILED.$
    First line of code: {return test("Kashim a %c histoires Ã  raconter", 1001);}$
      expected output : "Kashim a é histoires Ã  raconter"$
      your output     : "Kashim a éc histoires Ã  raconter"$
      expected (nonprintable as hex) : "Kashim a \xe9 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a \xe9c histoires \xc3\xa0 raconter"$
$
Test 550 (moul_c_3) : FAILED.$
    First line of code: {return test("Il fait au moins %c$
", -8000);}$
      expected output : "Il fait au moins À$
"$
      your output     : "Il fait au moins Àc$
"$
      expected (nonprintable as hex) : "Il fait au moins \xc0\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins \xc0c\x0a"$
$
Test 551 (moul_c_4) : FAILED.$
    First line of code: {return test("%c", -0);}$
      expected output : "^@"$
      your output     : "^@c"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00c"$
$
Test 552 (moul_c_5) : FAILED.$
    First line of code: {return test("%c", 0);}$
      expected output : "^@"$
      your output     : "^@c"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00c"$
$
Test 553 (moul_c_5b) : FAILED.$
    First line of code: {return test("%c$
", INT_MAX);}$
      expected output : "ÿ$
"$
      your output     : "ÿc$
"$
      expected (nonprintable as hex) : "\xff\x0a"$
      actual   (nonprintable as hex) : "\xffc\x0a"$
$
Test 554 (moul_c_6) : FAILED.$
    First line of code: {return test("%c$
", 'c');}$
      expected output : "c$
"$
      your output     : "cc$
"$
      expected (nonprintable as hex) : "c\x0a"$
      actual   (nonprintable as hex) : "cc\x0a"$
$
Test 555 (moul_c_7) : FAILED.$
    First line of code: {return test("%c$
", '$
');}$
      expected output : "$
$
"$
      your output     : "$
c$
"$
      expected (nonprintable as hex) : "\x0a\x0a"$
      actual   (nonprintable as hex) : "\x0ac\x0a"$
$
Test 556 (moul_c_8) : FAILED.$
    First line of code: {return test("%c", 'l');}$
      expected output : "l"$
      your output     : "lc"$
      expected (nonprintable as hex) : "l"$
      actual   (nonprintable as hex) : "lc"$
$
Test 557 (moul_c_9) : FAILED.$
    First line of code: {return test("%c", 'y');}$
      expected output : "y"$
      your output     : "yc"$
      expected (nonprintable as hex) : "y"$
      actual   (nonprintable as hex) : "yc"$
$
Test 558 (moul_c_10) : FAILED.$
    First line of code: {return test("%c", ' ');}$
      expected output : " "$
      your output     : " c"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " c"$
$
Test 559 (moul_c_11) : FAILED.$
    First line of code: {return test("%c", 'e');}$
      expected output : "e"$
      your output     : "ec"$
      expected (nonprintable as hex) : "e"$
      actual   (nonprintable as hex) : "ec"$
$
Test 560 (moul_c_12) : FAILED.$
    First line of code: {return test("%c", 's');}$
      expected output : "s"$
      your output     : "sc"$
      expected (nonprintable as hex) : "s"$
      actual   (nonprintable as hex) : "sc"$
$
Test 561 (moul_c_13) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected output : "t"$
      your output     : "tc"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "tc"$
$
Test 562 (moul_c_14) : FAILED.$
    First line of code: {return test("%c", ' ');}$
      expected output : " "$
      your output     : " c"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " c"$
$
Test 563 (moul_c_15) : FAILED.$
    First line of code: {return test("%c", 'f');}$
      expected output : "f"$
      your output     : "fc"$
      expected (nonprintable as hex) : "f"$
      actual   (nonprintable as hex) : "fc"$
$
Test 564 (moul_c_16) : FAILED.$
    First line of code: {return test("%c", 'a');}$
      expected output : "a"$
      your output     : "ac"$
      expected (nonprintable as hex) : "a"$
      actual   (nonprintable as hex) : "ac"$
$
Test 565 (moul_c_17) : FAILED.$
    First line of code: {return test("%c", 'n');}$
      expected output : "n"$
      your output     : "nc"$
      expected (nonprintable as hex) : "n"$
      actual   (nonprintable as hex) : "nc"$
$
Test 566 (moul_c_18) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected output : "t"$
      your output     : "tc"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "tc"$
$
Test 567 (moul_c_19) : FAILED.$
    First line of code: {return test("%c", 'a');}$
      expected output : "a"$
      your output     : "ac"$
      expected (nonprintable as hex) : "a"$
      actual   (nonprintable as hex) : "ac"$
$
Test 568 (moul_c_20) : FAILED.$
    First line of code: {return test("%c", 's');}$
      expected output : "s"$
      your output     : "sc"$
      expected (nonprintable as hex) : "s"$
      actual   (nonprintable as hex) : "sc"$
$
Test 569 (moul_c_21) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected output : "t"$
      your output     : "tc"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "tc"$
$
Test 570 (moul_c_22) : FAILED.$
    First line of code: {return test("%c", 'i');}$
      expected output : "i"$
      your output     : "ic"$
      expected (nonprintable as hex) : "i"$
      actual   (nonprintable as hex) : "ic"$
$
Test 571 (moul_c_23) : FAILED.$
    First line of code: {return test("%c", 'q');}$
      expected output : "q"$
      your output     : "qc"$
      expected (nonprintable as hex) : "q"$
      actual   (nonprintable as hex) : "qc"$
$
Test 572 (moul_c_24) : FAILED.$
    First line of code: {return test("%c", 'u');}$
      expected output : "u"$
      your output     : "uc"$
      expected (nonprintable as hex) : "u"$
      actual   (nonprintable as hex) : "uc"$
$
Test 573 (moul_c_25) : FAILED.$
    First line of code: {return test("%c", 'e');}$
      expected output : "e"$
      your output     : "ec"$
      expected (nonprintable as hex) : "e"$
      actual   (nonprintable as hex) : "ec"$
$
Test 574 (moul_c_26) : FAILED.$
    First line of code: {return test("%c$
", '!');}$
      expected output : "!$
"$
      your output     : "!c$
"$
      expected (nonprintable as hex) : "!\x0a"$
      actual   (nonprintable as hex) : "!c\x0a"$
$
Test 575 (moul_c_27) : FAILED.$
    First line of code: {return test("%c$
", '^M');}$
      expected output : "^M$
"$
      your output     : "^Mc$
"$
      expected (nonprintable as hex) : "\x0d\x0a"$
      actual   (nonprintable as hex) : "\x0dc\x0a"$
$
Test 576 (moul_c_28) : FAILED.$
    First line of code: {return test("%c$
", '	');}$
      expected output : "	$
"$
      your output     : "	c$
"$
      expected (nonprintable as hex) : "\x09\x0a"$
      actual   (nonprintable as hex) : "\x09c\x0a"$
$
Test 577 (moul_s_1) : FAILED.$
    First line of code: {return test(" pouet %s !!", "camembert");}$
      expected output : " pouet camembert !!"$
      your output     : " pouet camemberts !!"$
      expected (nonprintable as hex) : " pouet camembert !!"$
      actual   (nonprintable as hex) : " pouet camemberts !!"$
$
Test 578 (moul_s_2) : FAILED.$
    First line of code: {return test("%s !", "Ceci n'est pas un $
      expected output : "Ceci n'est pas un  !"$
      your output     : "Ceci n'est pas un s !"$
      expected (nonprintable as hex) : "Ceci n'est pas un  !"$
      actual   (nonprintable as hex) : "Ceci n'est pas un s !"$
$
Test 579 (moul_s_3) : FAILED.$
    First line of code: {return test("%s!", "Ceci n'est toujours pas un exercice !");}$
      expected output : "Ceci n'est toujours pas un exercice !!"$
      your output     : "Ceci n'est toujours pas un exercice !s!"$
      expected (nonprintable as hex) : "Ceci n'est toujours pas un exercice !!"$
      actual   (nonprintable as hex) : "Ceci n'est toujours pas un exercice !s!"$
$
Test 580 (moul_s_4) : FAILED.$
    First line of code: {char *str = NULL; return test("%s!", str);}$
      expected output : "(null)!"$
      your output     : "(null)s!"$
      expected (nonprintable as hex) : "(null)!"$
      actual   (nonprintable as hex) : "(null)s!"$
$
Test 581 (moul_s_5_this_ones_a_doozy) : FAILED.$
    First line of code: {return test("%s",$
      expected output : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdecÅM-^Surc'Ã©taitunsoir"$
      your output     : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdecÅM-^Surc'Ã©taitunsoir"$
      expected (nonprintable as hex) : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdec\xc5\x93urc'\xc3\xa9taitunsoir"$
      actual   (nonprintable as hex) : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdec\xc5\x93urc'\xc3\xa9taitunsoir"$
$
Test 582 (moul_d_1) : FAILED.$
    First line of code: {return test("%d", 42);}$
      expected output : "42"$
      your output     : "42d"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "42d"$
$
Test 583 (moul_d_2) : FAILED.$
    First line of code: {return test("Kashim a %d histoires Ã  raconter", 1001);}$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a 1001d histoires Ã  raconter"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a 1001d histoires \xc3\xa0 raconter"$
$
Test 584 (moul_d_3) : FAILED.$
    First line of code: {return test("Il fait au moins %d$
", -8000);}$
      expected output : "Il fait au moins -8000$
"$
      your output     : "Il fait au moins -8000d$
"$
      expected (nonprintable as hex) : "Il fait au moins -8000\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins -8000d\x0a"$
$
Test 585 (moul_d_4) : FAILED.$
    First line of code: {return test("%d", -0);}$
      expected output : "0"$
      your output     : "0d"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0d"$
$
Test 586 (moul_d_5) : FAILED.$
    First line of code: {return test("%d", 0);}$
      expected output : "0"$
      your output     : "0d"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0d"$
$
Test 587 (moul_d_6) : FAILED.$
    First line of code: {return test("%d", INT_MAX);}$
      expected output : "2147483647"$
      your output     : "2147483647d"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647d"$
$
Test 588 (moul_d_7) : FAILED.$
    First line of code: {return test("%d", INT_MIN);}$
      expected output : "-2147483648"$
      your output     : "-2147483648d"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648d"$
$
Test 589 (moul_d_8) : FAILED.$
    First line of code: {return test("%d", INT_MIN - 1);}$
      expected output : "2147483647"$
      your output     : "2147483647d"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647d"$
$
Test 590 (moul_d_9) : FAILED.$
    First line of code: {return test("%d", INT_MAX + 1);}$
      expected output : "-2147483648"$
      your output     : "-2147483648d"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648d"$
$
Test 591 (moul_d_10) : FAILED.$
    First line of code: {return test("%%d 0000042 == |%d|$
", 0000042);}$
      expected output : "%d 0000042 == |34|$
"$
      your output     : "%34d 0000042 == |0d|$
"$
      expected (nonprintable as hex) : "%d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "%34d 0000042 == |0d|\x0a"$
$
Test 592 (moul_d_11) : FAILED.$
    First line of code: {return test("%%d 	 == |%d|$
", '	');}$
      expected output : "%d 	 == |9|$
"$
      your output     : "%9d 	 == |0d|$
"$
      expected (nonprintable as hex) : "%d \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "%9d \x09 == |0d|\x0a"$
$
Test 593 (moul_d_12) : FAILED.$
    First line of code: {return test("%%d Lydie == |%d|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%d Lydie == |503|$
"$
      your output     : "%503d Lydie == |0d|$
"$
      expected (nonprintable as hex) : "%d Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "%503d Lydie == |0d|\x0a"$
$
Test 594 (moul_mix_1) : FAILED.$
    First line of code: {int r00 = 0; return test("Lalalala, %d%% des gens qui parlent Ã  Ly adorent %s. Ou Presque. %p", 100, "Ly", &r00);}$
      expected output : "Lalalala, 100% des gens qui parlent Ã  Ly adorent Ly. Ou Presque. 0x7ffee03f84fc"$
      your output     : "Lalalala, 100d%260497014 des gens qui parlent Ã  Ly adorent s. Ou Presque. 0x130a8p"$
      expected (nonprintable as hex) : "Lalalala, 100% des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. 0x7ffee03f84fc"$
      actual   (nonprintable as hex) : "Lalalala, 100d%260497014 des gens qui parlent \xc3\xa0 Ly adorent s. Ou Presque. 0x130a8p"$
$
Test 595 (moul_i_1) : FAILED.$
    First line of code: {return test("%i", 42);}$
      expected output : "42"$
      your output     : "42i"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "42i"$
$
Test 596 (moul_i_2) : FAILED.$
    First line of code: {return test("Kashim a %i histoires Ã  raconter", 1001);}$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a 1001i histoires Ã  raconter"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a 1001i histoires \xc3\xa0 raconter"$
$
Test 597 (moul_i_3) : FAILED.$
    First line of code: {return test("Il fait au moins %i$
", -8000);}$
      expected output : "Il fait au moins -8000$
"$
      your output     : "Il fait au moins -8000i$
"$
      expected (nonprintable as hex) : "Il fait au moins -8000\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins -8000i\x0a"$
$
Test 598 (moul_i_4) : FAILED.$
    First line of code: {return test("%i", -0);}$
      expected output : "0"$
      your output     : "0i"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0i"$
$
Test 599 (moul_i_5) : FAILED.$
    First line of code: {return test("%i", 0);}$
      expected output : "0"$
      your output     : "0i"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0i"$
$
Test 600 (moul_i_6) : FAILED.$
    First line of code: {return test("%i", INT_MAX);}$
      expected output : "2147483647"$
      your output     : "2147483647i"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647i"$
$
Test 601 (moul_i_7) : FAILED.$
    First line of code: {return test("%i", INT_MIN);}$
      expected output : "-2147483648"$
      your output     : "-2147483648i"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648i"$
$
Test 602 (moul_i_8) : FAILED.$
    First line of code: {return test("%i", INT_MIN - 1);}$
      expected output : "2147483647"$
      your output     : "2147483647i"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647i"$
$
Test 603 (moul_i_9) : FAILED.$
    First line of code: {return test("%i", INT_MAX + 1);}$
      expected output : "-2147483648"$
      your output     : "-2147483648i"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648i"$
$
Test 604 (moul_i_10) : FAILED.$
    First line of code: {return test("%%i 0000042 == |%i|$
", 0000042);}$
      expected output : "%i 0000042 == |34|$
"$
      your output     : "%34i 0000042 == |0i|$
"$
      expected (nonprintable as hex) : "%i 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "%34i 0000042 == |0i|\x0a"$
$
Test 605 (moul_i_11) : FAILED.$
    First line of code: {return test("%%i 	 == |%i|$
", '	');}$
      expected output : "%i 	 == |9|$
"$
      your output     : "%9i 	 == |0i|$
"$
      expected (nonprintable as hex) : "%i \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "%9i \x09 == |0i|\x0a"$
$
Test 606 (moul_i_12) : FAILED.$
    First line of code: {return test("%%i Lydie == |%i|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%i Lydie == |503|$
"$
      your output     : "%503i Lydie == |0i|$
"$
      expected (nonprintable as hex) : "%i Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "%503i Lydie == |0i|\x0a"$
$
Test 607 (moul_u_1) : FAILED.$
    First line of code: {return test("%u", 42);}$
      expected output : "42"$
      your output     : "42u"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "42u"$
$
Test 608 (moul_u_2) : FAILED.$
    First line of code: {return test("Kashim a %u histoires Ã  raconter", 1001);}$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a 1001u histoires Ã  raconter"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a 1001u histoires \xc3\xa0 raconter"$
$
Test 609 (moul_u_3) : FAILED.$
    First line of code: {return test("Il fait au moins %u$
", -8000);}$
      expected output : "Il fait au moins 4294959296$
"$
      your output     : "Il fait au moins 4294959296u$
"$
      expected (nonprintable as hex) : "Il fait au moins 4294959296\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins 4294959296u\x0a"$
$
Test 610 (moul_u_4) : FAILED.$
    First line of code: {return test("%u", -0);}$
      expected output : "0"$
      your output     : "0u"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0u"$
$
Test 611 (moul_u_5) : FAILED.$
    First line of code: {return test("%u", 0);}$
      expected output : "0"$
      your output     : "0u"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0u"$
$
Test 612 (moul_u_6) : FAILED.$
    First line of code: {return test("%u", INT_MAX);}$
      expected output : "2147483647"$
      your output     : "2147483647u"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647u"$
$
Test 613 (moul_u_7) : FAILED.$
    First line of code: {return test("%u", INT_MIN);}$
      expected output : "2147483648"$
      your output     : "2147483648u"$
      expected (nonprintable as hex) : "2147483648"$
      actual   (nonprintable as hex) : "2147483648u"$
$
Test 614 (moul_u_8) : FAILED.$
    First line of code: {return test("%u", INT_MIN - 1);}$
      expected output : "2147483647"$
      your output     : "2147483647u"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647u"$
$
Test 615 (moul_u_9) : FAILED.$
    First line of code: {return test("%u", INT_MAX + 1);}$
      expected output : "2147483648"$
      your output     : "2147483648u"$
      expected (nonprintable as hex) : "2147483648"$
      actual   (nonprintable as hex) : "2147483648u"$
$
Test 616 (moul_u_10) : FAILED.$
    First line of code: {return test("%%u 0000042 == |%u|$
", 0000042);}$
      expected output : "%u 0000042 == |34|$
"$
      your output     : "%34u 0000042 == |0u|$
"$
      expected (nonprintable as hex) : "%u 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "%34u 0000042 == |0u|\x0a"$
$
Test 617 (moul_u_11) : FAILED.$
    First line of code: {return test("%%u 	 == |%u|$
", '	');}$
      expected output : "%u 	 == |9|$
"$
      your output     : "%9u 	 == |0u|$
"$
      expected (nonprintable as hex) : "%u \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "%9u \x09 == |0u|\x0a"$
$
Test 618 (moul_u_12) : FAILED.$
    First line of code: {return test("%%u Lydie == |%u|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%u Lydie == |503|$
"$
      your output     : "%503u Lydie == |0u|$
"$
      expected (nonprintable as hex) : "%u Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "%503u Lydie == |0u|\x0a"$
$
Test 619 (moul_x_1) : FAILED.$
    First line of code: {return test("%x", 42);}$
      expected output : "2a"$
      your output     : "2ax"$
      expected (nonprintable as hex) : "2a"$
      actual   (nonprintable as hex) : "2ax"$
$
Test 620 (moul_x_2) : FAILED.$
    First line of code: {return test("Kashim a %x histoires Ã  raconter", 1001);}$
      expected output : "Kashim a 3e9 histoires Ã  raconter"$
      your output     : "Kashim a 3e9x histoires Ã  raconter"$
      expected (nonprintable as hex) : "Kashim a 3e9 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a 3e9x histoires \xc3\xa0 raconter"$
$
Test 621 (moul_x_3) : FAILED.$
    First line of code: {return test("Il fait au moins %x$
", -8000);}$
      expected output : "Il fait au moins ffffe0c0$
"$
      your output     : "Il fait au moins ffffe0c0x$
"$
      expected (nonprintable as hex) : "Il fait au moins ffffe0c0\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins ffffe0c0x\x0a"$
$
Test 622 (moul_x_4) : FAILED.$
    First line of code: {return test("%x", -0);}$
      expected output : "0"$
      your output     : "0x"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0x"$
$
Test 623 (moul_x_5) : FAILED.$
    First line of code: {return test("%x", 0);}$
      expected output : "0"$
      your output     : "0x"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0x"$
$
Test 624 (moul_x_6) : FAILED.$
    First line of code: {return test("%x", INT_MAX);}$
      expected output : "7fffffff"$
      your output     : "7fffffffx"$
      expected (nonprintable as hex) : "7fffffff"$
      actual   (nonprintable as hex) : "7fffffffx"$
$
Test 625 (moul_x_7) : FAILED.$
    First line of code: {return test("%x", INT_MIN);}$
      expected output : "80000000"$
      your output     : "80000000x"$
      expected (nonprintable as hex) : "80000000"$
      actual   (nonprintable as hex) : "80000000x"$
$
Test 626 (moul_x_8) : FAILED.$
    First line of code: {return test("%x", INT_MIN - 1);}$
      expected output : "7fffffff"$
      your output     : "7fffffffx"$
      expected (nonprintable as hex) : "7fffffff"$
      actual   (nonprintable as hex) : "7fffffffx"$
$
Test 627 (moul_x_9) : FAILED.$
    First line of code: {return test("%x", INT_MAX + 1);}$
      expected output : "80000000"$
      your output     : "80000000x"$
      expected (nonprintable as hex) : "80000000"$
      actual   (nonprintable as hex) : "80000000x"$
$
Test 628 (moul_x_10) : FAILED.$
    First line of code: {return test("%%x 0000042 == |%x|$
", 0000042);}$
      expected output : "%x 0000042 == |22|$
"$
      your output     : "%22x 0000042 == |0x|$
"$
      expected (nonprintable as hex) : "%x 0000042 == |22|\x0a"$
      actual   (nonprintable as hex) : "%22x 0000042 == |0x|\x0a"$
$
Test 629 (moul_x_11) : FAILED.$
    First line of code: {return test("%%x 	 == |%x|$
", '	');}$
      expected output : "%x 	 == |9|$
"$
      your output     : "%9x 	 == |0x|$
"$
      expected (nonprintable as hex) : "%x \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "%9x \x09 == |0x|\x0a"$
$
Test 630 (moul_x_12) : FAILED.$
    First line of code: {return test("%%x Lydie == |%x|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%x Lydie == |1f7|$
"$
      your output     : "%1f7x Lydie == |0x|$
"$
      expected (nonprintable as hex) : "%x Lydie == |1f7|\x0a"$
      actual   (nonprintable as hex) : "%1f7x Lydie == |0x|\x0a"$
$
Test 631 (moul_prec_1) : FAILED.$
    First line of code: {return test("%%-5.3s LYDI == |%-5.3s|$
", "LYDI");}$
      expected output : "%-5.3s LYDI == |LYD  |$
"$
      your output     : "%LYD  -5.3s LYDI == |(nu  -5.3s|$
"$
      expected (nonprintable as hex) : "%-5.3s LYDI == |LYD  |\x0a"$
      actual   (nonprintable as hex) : "%LYD  -5.3s LYDI == |(nu  -5.3s|\x0a"$
$
Test 632 (moul_prec_3) : FAILED.$
    First line of code: {return test("%%04.5i 42 == |%04.5i|$
", 42);}$
      expected output : "%04.5i 42 == |00042|$
"$
      your output     : "%0004204.5i 42 == |0000004.5i|$
"$
      expected (nonprintable as hex) : "%04.5i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "%0004204.5i 42 == |0000004.5i|\x0a"$
$
Test 633 (moul_prec_4) : FAILED.$
    First line of code: {return test("%%04.3i 42 == |%04.3i|$
", 42);}$
      expected output : "%04.3i 42 == | 042|$
"$
      your output     : "% 04204.3i 42 == | 00004.3i|$
"$
      expected (nonprintable as hex) : "%04.3i 42 == | 042|\x0a"$
      actual   (nonprintable as hex) : "% 04204.3i 42 == | 00004.3i|\x0a"$
$
Test 634 (moul_prec_5) : FAILED.$
    First line of code: {return test("%%04.2i 42 == |%04.2i|$
", 42);}$
      expected output : "%04.2i 42 == |  42|$
"$
      your output     : "%  4204.2i 42 == |  0004.2i|$
"$
      expected (nonprintable as hex) : "%04.2i 42 == |  42|\x0a"$
      actual   (nonprintable as hex) : "%  4204.2i 42 == |  0004.2i|\x0a"$
$
Test 635 (moul_zeropad_1) : FAILED.$
    First line of code: {return test("%%04i 42 == |%04i|$
", 42);}$
      expected output : "%04i 42 == |0042|$
"$
      your output     : "%004204i 42 == |000004i|$
"$
      expected (nonprintable as hex) : "%04i 42 == |0042|\x0a"$
      actual   (nonprintable as hex) : "%004204i 42 == |000004i|\x0a"$
$
Test 636 (moul_zeropad_2) : FAILED.$
    First line of code: {return test("%%05i 42 == |%05i|$
", 42);}$
      expected output : "%05i 42 == |00042|$
"$
      your output     : "%0004205i 42 == |0000005i|$
"$
      expected (nonprintable as hex) : "%05i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "%0004205i 42 == |0000005i|\x0a"$
$
Test 637 (moul_zeropad_3) : FAILED.$
    First line of code: {return test("%%0i 42 == |%0i|$
", 42);}$
      expected output : "%0i 42 == |42|$
"$
      your output     : "%420i 42 == |00i|$
"$
      expected (nonprintable as hex) : "%0i 42 == |42|\x0a"$
      actual   (nonprintable as hex) : "%420i 42 == |00i|\x0a"$
$
Test 638 (moul_zeropad_4) : FAILED.$
    First line of code: {return test("%%0d 0000042 == |%0d|$
", 0000042);}$
      expected output : "%0d 0000042 == |34|$
"$
      your output     : "%340d 0000042 == |00d|$
"$
      expected (nonprintable as hex) : "%0d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "%340d 0000042 == |00d|\x0a"$
$
Test 639 (moul_leftjusty_1) : FAILED.$
    First line of code: {return test("%%-i 42 == %-i$
", 42);}$
      expected output : "%-i 42 == 42$
"$
      your output     : "%42-i 42 == 0-i$
"$
      expected (nonprintable as hex) : "%-i 42 == 42\x0a"$
      actual   (nonprintable as hex) : "%42-i 42 == 0-i\x0a"$
$
Test 640 (moul_leftjusty_2) : FAILED.$
    First line of code: {return test("%%-d 42 == %-d$
", INT_MIN);}$
      expected output : "%-d 42 == -2147483648$
"$
      your output     : "%-2147483648-d 42 == 0-d$
"$
      expected (nonprintable as hex) : "%-d 42 == -2147483648\x0a"$
      actual   (nonprintable as hex) : "%-2147483648-d 42 == 0-d\x0a"$
$
Test 641 (moul_leftjusty_3) : FAILED.$
    First line of code: {return test("%%-i -42 == %-i$
", -42);}$
      expected output : "%-i -42 == -42$
"$
      your output     : "%-42-i -42 == 0-i$
"$
      expected (nonprintable as hex) : "%-i -42 == -42\x0a"$
      actual   (nonprintable as hex) : "%-42-i -42 == 0-i\x0a"$
$
Test 642 (moul_leftjusty_4) : FAILED.$
    First line of code: {return test("%%-4d 42 == |%-4d|$
", 42);}$
      expected output : "%-4d 42 == |42  |$
"$
      your output     : "%42  -4d 42 == |0   -4d|$
"$
      expected (nonprintable as hex) : "%-4d 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "%42  -4d 42 == |0   -4d|\x0a"$
$
Test 643 (moul_leftjusty_5) : FAILED.$
    First line of code: {return test("%%-5d -42 == |%-5d|$
", -42);}$
      expected output : "%-5d -42 == |-42  |$
"$
      your output     : "%-42  -5d -42 == |0    -5d|$
"$
      expected (nonprintable as hex) : "%-5d -42 == |-42  |\x0a"$
      actual   (nonprintable as hex) : "%-42  -5d -42 == |0    -5d|\x0a"$
$
Test 644 (moul_leftjusty_6) : FAILED.$
    First line of code: {return test("|%3i|%-3i|$
", 42, 42);}$
      expected output : "| 42|42 |$
"$
      your output     : "| 423i|42 -3i|$
"$
      expected (nonprintable as hex) : "| 42|42 |\x0a"$
      actual   (nonprintable as hex) : "| 423i|42 -3i|\x0a"$
$
Test 645 (moul_leftjusty_7) : FAILED.$
    First line of code: {return test("%%-4i 42 == |%-4i|$
", 42);}$
      expected output : "%-4i 42 == |42  |$
"$
      your output     : "%42  -4i 42 == |0   -4i|$
"$
      expected (nonprintable as hex) : "%-4i 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "%42  -4i 42 == |0   -4i|\x0a"$
$
Test 646 (moul_star_1) : FAILED.$
    First line of code: {return test("%%-*.3s LYDI == |%-*.3s|$
", 5, "LYDI");}$
    SEGFAULT$
$
Test 647 (moul_star_2) : FAILED.$
    First line of code: {return test("%% *.5i 42 == |% *.5i|$
", 4, 42);}$
    Timed out$
$
Test 648 (moul_star_3) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 5, 42);}$
    Timed out$
$
Test 649 (moul_star_4) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 3, 42);}$
    Timed out$
$
Test 650 (moul_star_5) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 2, 42);}$
    Timed out$
$
Test 651 (mix_test_0) : FAILED.$
    First line of code: {return test($
      expected output : "  235    %    0x10f8df310    eb    Hello, World!    42  "$
      your output     : "  235u    %%    0x10f8df310p    ebx    Hello, World!s    42i  "$
      expected (nonprintable as hex) : "  235    %    0x10f8df310    eb    Hello, World!    42  "$
      actual   (nonprintable as hex) : "  235u    %%    0x10f8df310p    ebx    Hello, World!s    42i  "$
$
Test 652 (mix_test_1) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    G    EB    Hello, World!    235    0x10f8df310  "$
      your output     : "  ebx    Gc    EBX    Hello, World!s    235u    0x10f8df310p  "$
      expected (nonprintable as hex) : "  eb    G    EB    Hello, World!    235    0x10f8df310  "$
      actual   (nonprintable as hex) : "  ebx    Gc    EBX    Hello, World!s    235u    0x10f8df310p  "$
$
Test 653 (mix_test_2) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    EB    0x10f8df310    G    Hello, World!  "$
      your output     : "  %%    42i    EBX    0x10f8df310p    Gc    Hello, World!s  "$
      expected (nonprintable as hex) : "  %    42    EB    0x10f8df310    G    Hello, World!  "$
      actual   (nonprintable as hex) : "  %%    42i    EBX    0x10f8df310p    Gc    Hello, World!s  "$
$
Test 654 (mix_test_3) : FAILED.$
    First line of code: {return test($
      expected output : "  235    %    Hello, World!    G    eb    EB  "$
      your output     : "  235u    %%    Hello, World!s    Gc    ebx    EBX  "$
      expected (nonprintable as hex) : "  235    %    Hello, World!    G    eb    EB  "$
      actual   (nonprintable as hex) : "  235u    %%    Hello, World!s    Gc    ebx    EBX  "$
$
Test 655 (mix_test_4) : FAILED.$
    First line of code: {return test($
      expected output : "  42    G    eb    235    %    EB  "$
      your output     : "  42i    Gc    ebx    235u    %%    EBX  "$
      expected (nonprintable as hex) : "  42    G    eb    235    %    EB  "$
      actual   (nonprintable as hex) : "  42i    Gc    ebx    235u    %%    EBX  "$
$
Test 656 (mix_test_5) : FAILED.$
    First line of code: {return test($
      expected output : "  G    EB    42    %    Hello, World!    0x10f8df310  "$
      your output     : "  Gc    EBX    42i    %%    Hello, World!s    0x10f8df310p  "$
      expected (nonprintable as hex) : "  G    EB    42    %    Hello, World!    0x10f8df310  "$
      actual   (nonprintable as hex) : "  Gc    EBX    42i    %%    Hello, World!s    0x10f8df310p  "$
$
Test 657 (mix_test_6) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10f8df310    eb    42    G    Hello, World!    235  "$
      your output     : "  0x10f8df310p    ebx    42i    Gc    Hello, World!s    235u  "$
      expected (nonprintable as hex) : "  0x10f8df310    eb    42    G    Hello, World!    235  "$
      actual   (nonprintable as hex) : "  0x10f8df310p    ebx    42i    Gc    Hello, World!s    235u  "$
$
Test 658 (mix_test_7) : FAILED.$
    First line of code: {return test($
      expected output : "  42    Hello, World!    %    235    G    eb  "$
      your output     : "  42i    Hello, World!s    %%    235u    Gc    ebx  "$
      expected (nonprintable as hex) : "  42    Hello, World!    %    235    G    eb  "$
      actual   (nonprintable as hex) : "  42i    Hello, World!s    %%    235u    Gc    ebx  "$
$
Test 659 (mix_test_8) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    0x10f8df310    Hello, World!    %    235    eb  "$
      your output     : "  EBX    0x10f8df310p    Hello, World!s    %%    235u    ebx  "$
      expected (nonprintable as hex) : "  EB    0x10f8df310    Hello, World!    %    235    eb  "$
      actual   (nonprintable as hex) : "  EBX    0x10f8df310p    Hello, World!s    %%    235u    ebx  "$
$
Test 660 (mix_test_9) : FAILED.$
    First line of code: {return test($
      expected output : "  G    %    235    42    eb    EB  "$
      your output     : "  Gc    %%    235u    42i    ebx    EBX  "$
      expected (nonprintable as hex) : "  G    %    235    42    eb    EB  "$
      actual   (nonprintable as hex) : "  Gc    %%    235u    42i    ebx    EBX  "$
$
Test 661 (mix_test_10) : FAILED.$
    First line of code: {return test($
      expected output : "  42    0x10f8df310    EB    235    Hello, World!    eb  "$
      your output     : "  42i    0x10f8df310p    EBX    235u    Hello, World!s    ebx  "$
      expected (nonprintable as hex) : "  42    0x10f8df310    EB    235    Hello, World!    eb  "$
      actual   (nonprintable as hex) : "  42i    0x10f8df310p    EBX    235u    Hello, World!s    ebx  "$
$
Test 662 (mix_test_11) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    G    0x10f8df310    eb    42    235  "$
      your output     : "  EBX    Gc    0x10f8df310p    ebx    42i    235u  "$
      expected (nonprintable as hex) : "  EB    G    0x10f8df310    eb    42    235  "$
      actual   (nonprintable as hex) : "  EBX    Gc    0x10f8df310p    ebx    42i    235u  "$
$
Test 663 (mix_test_12) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    235    Hello, World!    G    EB  "$
      your output     : "  %%    42i    235u    Hello, World!s    Gc    EBX  "$
      expected (nonprintable as hex) : "  %    42    235    Hello, World!    G    EB  "$
      actual   (nonprintable as hex) : "  %%    42i    235u    Hello, World!s    Gc    EBX  "$
$
Test 664 (mix_test_13) : FAILED.$
    First line of code: {return test($
      expected output : "  235    G    eb    Hello, World!    EB    42  "$
      your output     : "  235u    Gc    ebx    Hello, World!s    EBX    42i  "$
      expected (nonprintable as hex) : "  235    G    eb    Hello, World!    EB    42  "$
      actual   (nonprintable as hex) : "  235u    Gc    ebx    Hello, World!s    EBX    42i  "$
$
Test 665 (mix_test_14) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    0x10f8df310    EB    G    42    eb  "$
      your output     : "  Hello, World!s    0x10f8df310p    EBX    Gc    42i    ebx  "$
      expected (nonprintable as hex) : "  Hello, World!    0x10f8df310    EB    G    42    eb  "$
      actual   (nonprintable as hex) : "  Hello, World!s    0x10f8df310p    EBX    Gc    42i    ebx  "$
$
Test 666 (mix_test_15) : FAILED.$
    First line of code: {return test($
      expected output : "  235    G    EB    eb    0x10f8df310    Hello, World!  "$
      your output     : "  235u    Gc    EBX    ebx    0x10f8df310p    Hello, World!s  "$
      expected (nonprintable as hex) : "  235    G    EB    eb    0x10f8df310    Hello, World!  "$
      actual   (nonprintable as hex) : "  235u    Gc    EBX    ebx    0x10f8df310p    Hello, World!s  "$
$
Test 667 (mix_test_16) : FAILED.$
    First line of code: {return test($
      expected output : "  G    %    42    EB    235    eb  "$
      your output     : "  Gc    %%    42i    EBX    235u    ebx  "$
      expected (nonprintable as hex) : "  G    %    42    EB    235    eb  "$
      actual   (nonprintable as hex) : "  Gc    %%    42i    EBX    235u    ebx  "$
$
Test 668 (mix_test_17) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    %    eb    EB    G    235  "$
      your output     : "  Hello, World!s    %%    ebx    EBX    Gc    235u  "$
      expected (nonprintable as hex) : "  Hello, World!    %    eb    EB    G    235  "$
      actual   (nonprintable as hex) : "  Hello, World!s    %%    ebx    EBX    Gc    235u  "$
$
Test 669 (mix_test_18) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    Hello, World!    EB    %    0x10f8df310    42  "$
      your output     : "  ebx    Hello, World!s    EBX    %%    0x10f8df310p    42i  "$
      expected (nonprintable as hex) : "  eb    Hello, World!    EB    %    0x10f8df310    42  "$
      actual   (nonprintable as hex) : "  ebx    Hello, World!s    EBX    %%    0x10f8df310p    42i  "$
$
Test 670 (mix_test_19) : FAILED.$
    First line of code: {return test($
      expected output : "  %    0x10f8df310    42    G    eb    EB  "$
      your output     : "  %%    0x10f8df310p    42i    Gc    ebx    EBX  "$
      expected (nonprintable as hex) : "  %    0x10f8df310    42    G    eb    EB  "$
      actual   (nonprintable as hex) : "  %%    0x10f8df310p    42i    Gc    ebx    EBX  "$
$
Test 671 (mix_test_20) : FAILED.$
    First line of code: {return test($
      expected output : "  G    Hello, World!    %    235    0x10f8df310    eb  "$
      your output     : "  Gc    Hello, World!s    %%    235u    0x10f8df310p    ebx  "$
      expected (nonprintable as hex) : "  G    Hello, World!    %    235    0x10f8df310    eb  "$
      actual   (nonprintable as hex) : "  Gc    Hello, World!s    %%    235u    0x10f8df310p    ebx  "$
$
Test 672 (mix_test_21) : FAILED.$
    First line of code: {return test($
      expected output : "  G    42    235    Hello, World!    0x10f8df310    eb  "$
      your output     : "  Gc    42i    235u    Hello, World!s    0x10f8df310p    ebx  "$
      expected (nonprintable as hex) : "  G    42    235    Hello, World!    0x10f8df310    eb  "$
      actual   (nonprintable as hex) : "  Gc    42i    235u    Hello, World!s    0x10f8df310p    ebx  "$
$
Test 673 (mix_test_22) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    eb    Hello, World!    G    42    235  "$
      your output     : "  EBX    ebx    Hello, World!s    Gc    42i    235u  "$
      expected (nonprintable as hex) : "  EB    eb    Hello, World!    G    42    235  "$
      actual   (nonprintable as hex) : "  EBX    ebx    Hello, World!s    Gc    42i    235u  "$
$
Test 674 (mix_test_23) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    G    EB    0x10f8df310    Hello, World!    0x10f8df310  "$
      your output     : "  ebx    Gc    EBX    0x10f8df310p    Hello, World!s    0x10f8df310p  "$
      expected (nonprintable as hex) : "  eb    G    EB    0x10f8df310    Hello, World!    0x10f8df310  "$
      actual   (nonprintable as hex) : "  ebx    Gc    EBX    0x10f8df310p    Hello, World!s    0x10f8df310p  "$
$
Test 675 (mix_test_24) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    %    42    Hello, World!    0x10f8df310    eb  "$
      your output     : "  EBX    %%    42i    Hello, World!s    0x10f8df310p    ebx  "$
      expected (nonprintable as hex) : "  EB    %    42    Hello, World!    0x10f8df310    eb  "$
      actual   (nonprintable as hex) : "  EBX    %%    42i    Hello, World!s    0x10f8df310p    ebx  "$
$
Test 676 (mix_test_25) : FAILED.$
    First line of code: {return test($
      expected output : "  42    0x10f8df310    eb    G    EB    0x10f8df310  "$
      your output     : "  42i    0x10f8df310p    ebx    Gc    EBX    0x10f8df310p  "$
      expected (nonprintable as hex) : "  42    0x10f8df310    eb    G    EB    0x10f8df310  "$
      actual   (nonprintable as hex) : "  42i    0x10f8df310p    ebx    Gc    EBX    0x10f8df310p  "$
$
Test 677 (mix_test_26) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    G    42    235    eb    0x10f8df310  "$
      your output     : "  EBX    Gc    42i    235u    ebx    0x10f8df310p  "$
      expected (nonprintable as hex) : "  EB    G    42    235    eb    0x10f8df310  "$
      actual   (nonprintable as hex) : "  EBX    Gc    42i    235u    ebx    0x10f8df310p  "$
$
Test 678 (mix_test_27) : FAILED.$
    First line of code: {return test($
      expected output : "  42    235    G    %    EB    0x10f8df310  "$
      your output     : "  42i    235u    Gc    %%    EBX    0x10f8df310p  "$
      expected (nonprintable as hex) : "  42    235    G    %    EB    0x10f8df310  "$
      actual   (nonprintable as hex) : "  42i    235u    Gc    %%    EBX    0x10f8df310p  "$
$
Test 679 (mix_test_28) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    42    G    0x10f8df310    eb    235  "$
      your output     : "  Hello, World!s    42i    Gc    0x10f8df310p    ebx    235u  "$
      expected (nonprintable as hex) : "  Hello, World!    42    G    0x10f8df310    eb    235  "$
      actual   (nonprintable as hex) : "  Hello, World!s    42i    Gc    0x10f8df310p    ebx    235u  "$
$
Test 680 (mix_test_29) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10f8df310    %    eb    EB    42    G  "$
      your output     : "  0x10f8df310p    %%    ebx    EBX    42i    Gc  "$
      expected (nonprintable as hex) : "  0x10f8df310    %    eb    EB    42    G  "$
      actual   (nonprintable as hex) : "  0x10f8df310p    %%    ebx    EBX    42i    Gc  "$
$
Test 681 (mix_test_30) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    42    Hello, World!    %    235    0x10f8df310  "$
      your output     : "  EBX    42i    Hello, World!s    %%    235u    0x10f8df310p  "$
      expected (nonprintable as hex) : "  EB    42    Hello, World!    %    235    0x10f8df310  "$
      actual   (nonprintable as hex) : "  EBX    42i    Hello, World!s    %%    235u    0x10f8df310p  "$
$
Test 682 (mix_test_31) : FAILED.$
    First line of code: {return test($
      expected output : "  %    235    0x10f8df310    42    EB    G  "$
      your output     : "  %%    235u    0x10f8df310p    42i    EBX    Gc  "$
      expected (nonprintable as hex) : "  %    235    0x10f8df310    42    EB    G  "$
      actual   (nonprintable as hex) : "  %%    235u    0x10f8df310p    42i    EBX    Gc  "$
$
Test 683 (mix_test_32) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    EB    0x10f8df310    Hello, World!    42    G  "$
      your output     : "  ebx    EBX    0x10f8df310p    Hello, World!s    42i    Gc  "$
      expected (nonprintable as hex) : "  eb    EB    0x10f8df310    Hello, World!    42    G  "$
      actual   (nonprintable as hex) : "  ebx    EBX    0x10f8df310p    Hello, World!s    42i    Gc  "$
$
Test 684 (mix_test_33) : FAILED.$
    First line of code: {return test($
      expected output : "  G    %    Hello, World!    EB    eb    0x10f8df310  "$
      your output     : "  Gc    %%    Hello, World!s    EBX    ebx    0x10f8df310p  "$
      expected (nonprintable as hex) : "  G    %    Hello, World!    EB    eb    0x10f8df310  "$
      actual   (nonprintable as hex) : "  Gc    %%    Hello, World!s    EBX    ebx    0x10f8df310p  "$
$
Test 685 (mix_test_34) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    EB    0x10f8df310    Hello, World!    42    235  "$
      your output     : "  ebx    EBX    0x10f8df310p    Hello, World!s    42i    235u  "$
      expected (nonprintable as hex) : "  eb    EB    0x10f8df310    Hello, World!    42    235  "$
      actual   (nonprintable as hex) : "  ebx    EBX    0x10f8df310p    Hello, World!s    42i    235u  "$
$
Test 686 (mix_test_35) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10f8df310    235    Hello, World!    EB    G    0x10f8df310  "$
      your output     : "  0x10f8df310p    235u    Hello, World!s    EBX    Gc    0x10f8df310p  "$
      expected (nonprintable as hex) : "  0x10f8df310    235    Hello, World!    EB    G    0x10f8df310  "$
      actual   (nonprintable as hex) : "  0x10f8df310p    235u    Hello, World!s    EBX    Gc    0x10f8df310p  "$
$
Test 687 (mix_test_36) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    Hello, World!    eb    0x10f8df310    %    42  "$
      your output     : "  EBX    Hello, World!s    ebx    0x10f8df310p    %%    42i  "$
      expected (nonprintable as hex) : "  EB    Hello, World!    eb    0x10f8df310    %    42  "$
      actual   (nonprintable as hex) : "  EBX    Hello, World!s    ebx    0x10f8df310p    %%    42i  "$
$
Test 688 (mix_test_37) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    Hello, World!    %    0x10f8df310    42    G  "$
      your output     : "  ebx    Hello, World!s    %%    0x10f8df310p    42i    Gc  "$
      expected (nonprintable as hex) : "  eb    Hello, World!    %    0x10f8df310    42    G  "$
      actual   (nonprintable as hex) : "  ebx    Hello, World!s    %%    0x10f8df310p    42i    Gc  "$
$
Test 689 (mix_test_38) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    235    eb    %    42    G  "$
      your output     : "  Hello, World!s    235u    ebx    %%    42i    Gc  "$
      expected (nonprintable as hex) : "  Hello, World!    235    eb    %    42    G  "$
      actual   (nonprintable as hex) : "  Hello, World!s    235u    ebx    %%    42i    Gc  "$
$
Test 690 (mix_test_39) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10f8df310    42    eb    %    235    EB  "$
      your output     : "  0x10f8df310p    42i    ebx    %%    235u    EBX  "$
      expected (nonprintable as hex) : "  0x10f8df310    42    eb    %    235    EB  "$
      actual   (nonprintable as hex) : "  0x10f8df310p    42i    ebx    %%    235u    EBX  "$
$
Test 691 (mix_test_40) : FAILED.$
    First line of code: {return test($
      expected output : "  %    G    EB    0x10f8df310    235    eb  "$
      your output     : "  %%    Gc    EBX    0x10f8df310p    235u    ebx  "$
      expected (nonprintable as hex) : "  %    G    EB    0x10f8df310    235    eb  "$
      actual   (nonprintable as hex) : "  %%    Gc    EBX    0x10f8df310p    235u    ebx  "$
$
Test 692 (mix_test_41) : FAILED.$
    First line of code: {return test($
      expected output : "  235    G    %    0x10f8df310    42    Hello, World!  "$
      your output     : "  235u    Gc    %%    0x10f8df310p    42i    Hello, World!s  "$
      expected (nonprintable as hex) : "  235    G    %    0x10f8df310    42    Hello, World!  "$
      actual   (nonprintable as hex) : "  235u    Gc    %%    0x10f8df310p    42i    Hello, World!s  "$
$
Test 693 (mix_test_42) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    Hello, World!    235    G    EB  "$
      your output     : "  %%    42i    Hello, World!s    235u    Gc    EBX  "$
      expected (nonprintable as hex) : "  %    42    Hello, World!    235    G    EB  "$
      actual   (nonprintable as hex) : "  %%    42i    Hello, World!s    235u    Gc    EBX  "$
$
Test 694 (mix_test_43) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    235    Hello, World!    EB    0x10f8df310  "$
      your output     : "  %%    42i    235u    Hello, World!s    EBX    0x10f8df310p  "$
      expected (nonprintable as hex) : "  %    42    235    Hello, World!    EB    0x10f8df310  "$
      actual   (nonprintable as hex) : "  %%    42i    235u    Hello, World!s    EBX    0x10f8df310p  "$
$
Test 695 (mix_test_44) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    G    EB    %    42    0x10f8df310  "$
      your output     : "  Hello, World!s    Gc    EBX    %%    42i    0x10f8df310p  "$
      expected (nonprintable as hex) : "  Hello, World!    G    EB    %    42    0x10f8df310  "$
      actual   (nonprintable as hex) : "  Hello, World!s    Gc    EBX    %%    42i    0x10f8df310p  "$
$
Test 696 (mix_test_45) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    EB    235    42    %    Hello, World!  "$
      your output     : "  ebx    EBX    235u    42i    %%    Hello, World!s  "$
      expected (nonprintable as hex) : "  eb    EB    235    42    %    Hello, World!  "$
      actual   (nonprintable as hex) : "  ebx    EBX    235u    42i    %%    Hello, World!s  "$
$
Test 697 (mix_test_46) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    235    Hello, World!    42    0x10f8df310    0x10f8df310  "$
      your output     : "  ebx    235u    Hello, World!s    42i    0x10f8df310p    0x10f8df310p  "$
      expected (nonprintable as hex) : "  eb    235    Hello, World!    42    0x10f8df310    0x10f8df310  "$
      actual   (nonprintable as hex) : "  ebx    235u    Hello, World!s    42i    0x10f8df310p    0x10f8df310p  "$
$
Test 698 (mix_test_47) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    42    Hello, World!    eb    235    0x10f8df310  "$
      your output     : "  EBX    42i    Hello, World!s    ebx    235u    0x10f8df310p  "$
      expected (nonprintable as hex) : "  EB    42    Hello, World!    eb    235    0x10f8df310  "$
      actual   (nonprintable as hex) : "  EBX    42i    Hello, World!s    ebx    235u    0x10f8df310p  "$
$
Test 699 (mix_test_48) : FAILED.$
    First line of code: {return test($
      expected output : "  G    42    %    EB    0x10f8df310    235  "$
      your output     : "  Gc    42i    %%    EBX    0x10f8df310p    235u  "$
      expected (nonprintable as hex) : "  G    42    %    EB    0x10f8df310    235  "$
      actual   (nonprintable as hex) : "  Gc    42i    %%    EBX    0x10f8df310p    235u  "$
$
Test 700 (mix_test_49) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    235    42    EB    %    G  "$
      your output     : "  Hello, World!s    235u    42i    EBX    %%    Gc  "$
      expected (nonprintable as hex) : "  Hello, World!    235    42    EB    %    G  "$
      actual   (nonprintable as hex) : "  Hello, World!s    235u    42i    EBX    %%    Gc  "$
$
Test 701 (mix_test_50) : FAILED.$
    First line of code: {return test($
      expected output : "  %    0x10f8df310    EB    42    Hello, World!    eb  "$
      your output     : "  %%    0x10f8df310p    EBX    42i    Hello, World!s    ebx  "$
      expected (nonprintable as hex) : "  %    0x10f8df310    EB    42    Hello, World!    eb  "$
      actual   (nonprintable as hex) : "  %%    0x10f8df310p    EBX    42i    Hello, World!s    ebx  "$
$
Test 702 (mix_test_51) : FAILED.$
    First line of code: {return test($
      expected output : "  42    eb    0x10f8df310    G    235    EB  "$
      your output     : "  42i    ebx    0x10f8df310p    Gc    235u    EBX  "$
      expected (nonprintable as hex) : "  42    eb    0x10f8df310    G    235    EB  "$
      actual   (nonprintable as hex) : "  42i    ebx    0x10f8df310p    Gc    235u    EBX  "$
$
Test 703 (mix_test_52) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    G    %    42    eb    Hello, World!  "$
      your output     : "  EBX    Gc    %%    42i    ebx    Hello, World!s  "$
      expected (nonprintable as hex) : "  EB    G    %    42    eb    Hello, World!  "$
      actual   (nonprintable as hex) : "  EBX    Gc    %%    42i    ebx    Hello, World!s  "$
$
Test 704 (mix_test_53) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    G    235    EB    0x10f8df310    0x10f8df310  "$
      your output     : "  ebx    Gc    235u    EBX    0x10f8df310p    0x10f8df310p  "$
      expected (nonprintable as hex) : "  eb    G    235    EB    0x10f8df310    0x10f8df310  "$
      actual   (nonprintable as hex) : "  ebx    Gc    235u    EBX    0x10f8df310p    0x10f8df310p  "$
$
Test 705 (mix_test_54) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10f8df310    235    G    Hello, World!    42    0x10f8df310  "$
      your output     : "  0x10f8df310p    235u    Gc    Hello, World!s    42i    0x10f8df310p  "$
      expected (nonprintable as hex) : "  0x10f8df310    235    G    Hello, World!    42    0x10f8df310  "$
      actual   (nonprintable as hex) : "  0x10f8df310p    235u    Gc    Hello, World!s    42i    0x10f8df310p  "$
$
Test 706 (mix_test_55) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    0x10f8df310    Hello, World!    235    %    G  "$
      your output     : "  ebx    0x10f8df310p    Hello, World!s    235u    %%    Gc  "$
      expected (nonprintable as hex) : "  eb    0x10f8df310    Hello, World!    235    %    G  "$
      actual   (nonprintable as hex) : "  ebx    0x10f8df310p    Hello, World!s    235u    %%    Gc  "$
$
Test 707 (mix_test_56) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    EB    0x10f8df310    235    Hello, World!  "$
      your output     : "  %%    42i    EBX    0x10f8df310p    235u    Hello, World!s  "$
      expected (nonprintable as hex) : "  %    42    EB    0x10f8df310    235    Hello, World!  "$
      actual   (nonprintable as hex) : "  %%    42i    EBX    0x10f8df310p    235u    Hello, World!s  "$
$
Test 708 (mix_test_57) : FAILED.$
    First line of code: {return test($
      expected output : "  %    235    G    Hello, World!    42    eb  "$
      your output     : "  %%    235u    Gc    Hello, World!s    42i    ebx  "$
      expected (nonprintable as hex) : "  %    235    G    Hello, World!    42    eb  "$
      actual   (nonprintable as hex) : "  %%    235u    Gc    Hello, World!s    42i    ebx  "$
$
Test 709 (mix_test_58) : FAILED.$
    First line of code: {return test($
      expected output : "  G    42    235    eb    Hello, World!    0x10f8df310  "$
      your output     : "  Gc    42i    235u    ebx    Hello, World!s    0x10f8df310p  "$
      expected (nonprintable as hex) : "  G    42    235    eb    Hello, World!    0x10f8df310  "$
      actual   (nonprintable as hex) : "  Gc    42i    235u    ebx    Hello, World!s    0x10f8df310p  "$
$
Test 710 (mix_test_59) : FAILED.$
    First line of code: {return test($
      expected output : "  G    42    Hello, World!    235    eb    0x10f8df310  "$
      your output     : "  Gc    42i    Hello, World!s    235u    ebx    0x10f8df310p  "$
      expected (nonprintable as hex) : "  G    42    Hello, World!    235    eb    0x10f8df310  "$
      actual   (nonprintable as hex) : "  Gc    42i    Hello, World!s    235u    ebx    0x10f8df310p  "$
$
Test 711 (mix_test_60) : FAILED.$
    First line of code: {return test($
      expected output : "  235    %    eb    42    EB    G  "$
      your output     : "  235u    %%    ebx    42i    EBX    Gc  "$
      expected (nonprintable as hex) : "  235    %    eb    42    EB    G  "$
      actual   (nonprintable as hex) : "  235u    %%    ebx    42i    EBX    Gc  "$
$
Test 712 (mix_test_61) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    Hello, World!    235    42    G    EB  "$
      your output     : "  ebx    Hello, World!s    235u    42i    Gc    EBX  "$
      expected (nonprintable as hex) : "  eb    Hello, World!    235    42    G    EB  "$
      actual   (nonprintable as hex) : "  ebx    Hello, World!s    235u    42i    Gc    EBX  "$
$
Test 713 (mix_test_62) : FAILED.$
    First line of code: {return test($
      expected output : "  %    G    42    0x10f8df310    Hello, World!    EB  "$
      your output     : "  %%    Gc    42i    0x10f8df310p    Hello, World!s    EBX  "$
      expected (nonprintable as hex) : "  %    G    42    0x10f8df310    Hello, World!    EB  "$
      actual   (nonprintable as hex) : "  %%    Gc    42i    0x10f8df310p    Hello, World!s    EBX  "$
$
Test 714 (mix_test_63) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    eb    %    EB    42    G  "$
      your output     : "  Hello, World!s    ebx    %%    EBX    42i    Gc  "$
      expected (nonprintable as hex) : "  Hello, World!    eb    %    EB    42    G  "$
      actual   (nonprintable as hex) : "  Hello, World!s    ebx    %%    EBX    42i    Gc  "$
$
Test 715 (mix_test_64) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    EB    235    G    %    42  "$
      your output     : "  ebx    EBX    235u    Gc    %%    42i  "$
      expected (nonprintable as hex) : "  eb    EB    235    G    %    42  "$
      actual   (nonprintable as hex) : "  ebx    EBX    235u    Gc    %%    42i  "$
$
Test 716 (mix_test_65) : FAILED.$
    First line of code: {return test($
      expected output : "  G    %    42    0x10f8df310    235    EB  "$
      your output     : "  Gc    %%    42i    0x10f8df310p    235u    EBX  "$
      expected (nonprintable as hex) : "  G    %    42    0x10f8df310    235    EB  "$
      actual   (nonprintable as hex) : "  Gc    %%    42i    0x10f8df310p    235u    EBX  "$
$
Test 717 (mix_test_66) : FAILED.$
    First line of code: {return test($
      expected output : "  42    G    %    235    EB    0x10f8df310  "$
      your output     : "  42i    Gc    %%    235u    EBX    0x10f8df310p  "$
      expected (nonprintable as hex) : "  42    G    %    235    EB    0x10f8df310  "$
      actual   (nonprintable as hex) : "  42i    Gc    %%    235u    EBX    0x10f8df310p  "$
$
Test 718 (mix_test_67) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    42    eb    235    G    0x10f8df310  "$
      your output     : "  Hello, World!s    42i    ebx    235u    Gc    0x10f8df310p  "$
      expected (nonprintable as hex) : "  Hello, World!    42    eb    235    G    0x10f8df310  "$
      actual   (nonprintable as hex) : "  Hello, World!s    42i    ebx    235u    Gc    0x10f8df310p  "$
$
Test 719 (mix_test_68) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    eb    G    0x10f8df310    235    EB  "$
      your output     : "  Hello, World!s    ebx    Gc    0x10f8df310p    235u    EBX  "$
      expected (nonprintable as hex) : "  Hello, World!    eb    G    0x10f8df310    235    EB  "$
      actual   (nonprintable as hex) : "  Hello, World!s    ebx    Gc    0x10f8df310p    235u    EBX  "$
$
Test 720 (mix_test_69) : FAILED.$
    First line of code: {return test($
      expected output : "  %    Hello, World!    0x10f8df310    42    EB    G  "$
      your output     : "  %%    Hello, World!s    0x10f8df310p    42i    EBX    Gc  "$
      expected (nonprintable as hex) : "  %    Hello, World!    0x10f8df310    42    EB    G  "$
      actual   (nonprintable as hex) : "  %%    Hello, World!s    0x10f8df310p    42i    EBX    Gc  "$
$
Test 721 (mix_test_70) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    EB    42    %    Hello, World!    235  "$
      your output     : "  ebx    EBX    42i    %%    Hello, World!s    235u  "$
      expected (nonprintable as hex) : "  eb    EB    42    %    Hello, World!    235  "$
      actual   (nonprintable as hex) : "  ebx    EBX    42i    %%    Hello, World!s    235u  "$
$
Test 722 (mix_test_71) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    42    EB    G    %    0x10f8df310  "$
      your output     : "  Hello, World!s    42i    EBX    Gc    %%    0x10f8df310p  "$
      expected (nonprintable as hex) : "  Hello, World!    42    EB    G    %    0x10f8df310  "$
      actual   (nonprintable as hex) : "  Hello, World!s    42i    EBX    Gc    %%    0x10f8df310p  "$
$
Test 723 (mix_test_72) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    0x10f8df310    G    Hello, World!    EB    235  "$
      your output     : "  ebx    0x10f8df310p    Gc    Hello, World!s    EBX    235u  "$
      expected (nonprintable as hex) : "  eb    0x10f8df310    G    Hello, World!    EB    235  "$
      actual   (nonprintable as hex) : "  ebx    0x10f8df310p    Gc    Hello, World!s    EBX    235u  "$
$
Test 724 (mix_test_73) : FAILED.$
    First line of code: {return test($
      expected output : "  %    EB    235    eb    0x10f8df310    G  "$
      your output     : "  %%    EBX    235u    ebx    0x10f8df310p    Gc  "$
      expected (nonprintable as hex) : "  %    EB    235    eb    0x10f8df310    G  "$
      actual   (nonprintable as hex) : "  %%    EBX    235u    ebx    0x10f8df310p    Gc  "$
$
Test 725 (mix_test_74) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10f8df310    G    Hello, World!    235    42    eb  "$
      your output     : "  0x10f8df310p    Gc    Hello, World!s    235u    42i    ebx  "$
      expected (nonprintable as hex) : "  0x10f8df310    G    Hello, World!    235    42    eb  "$
      actual   (nonprintable as hex) : "  0x10f8df310p    Gc    Hello, World!s    235u    42i    ebx  "$
$
Test 726 (mix_test_75) : FAILED.$
    First line of code: {return test($
      expected output : "  42    G    %    0x10f8df310    235    eb  "$
      your output     : "  42i    Gc    %%    0x10f8df310p    235u    ebx  "$
      expected (nonprintable as hex) : "  42    G    %    0x10f8df310    235    eb  "$
      actual   (nonprintable as hex) : "  42i    Gc    %%    0x10f8df310p    235u    ebx  "$
$
Test 727 (mix_test_76) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    %    235    G    0x10f8df310    Hello, World!  "$
      your output     : "  EBX    %%    235u    Gc    0x10f8df310p    Hello, World!s  "$
      expected (nonprintable as hex) : "  EB    %    235    G    0x10f8df310    Hello, World!  "$
      actual   (nonprintable as hex) : "  EBX    %%    235u    Gc    0x10f8df310p    Hello, World!s  "$
$
Test 728 (mix_test_77) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    42    G    235    0x10f8df310    Hello, World!  "$
      your output     : "  EBX    42i    Gc    235u    0x10f8df310p    Hello, World!s  "$
      expected (nonprintable as hex) : "  EB    42    G    235    0x10f8df310    Hello, World!  "$
      actual   (nonprintable as hex) : "  EBX    42i    Gc    235u    0x10f8df310p    Hello, World!s  "$
$
Test 729 (mix_test_78) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10f8df310    %    G    EB    235    42  "$
      your output     : "  0x10f8df310p    %%    Gc    EBX    235u    42i  "$
      expected (nonprintable as hex) : "  0x10f8df310    %    G    EB    235    42  "$
      actual   (nonprintable as hex) : "  0x10f8df310p    %%    Gc    EBX    235u    42i  "$
$
Test 730 (mix_test_79) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    G    42    %    0x10f8df310    EB  "$
      your output     : "  Hello, World!s    Gc    42i    %%    0x10f8df310p    EBX  "$
      expected (nonprintable as hex) : "  Hello, World!    G    42    %    0x10f8df310    EB  "$
      actual   (nonprintable as hex) : "  Hello, World!s    Gc    42i    %%    0x10f8df310p    EBX  "$
$
Test 731 (mix_test_80) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10f8df310    %    G    235    Hello, World!    EB  "$
      your output     : "  0x10f8df310p    %%    Gc    235u    Hello, World!s    EBX  "$
      expected (nonprintable as hex) : "  0x10f8df310    %    G    235    Hello, World!    EB  "$
      actual   (nonprintable as hex) : "  0x10f8df310p    %%    Gc    235u    Hello, World!s    EBX  "$
$
Test 732 (mix_test_81) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    G    %    Hello, World!    EB    42  "$
      your output     : "  ebx    Gc    %%    Hello, World!s    EBX    42i  "$
      expected (nonprintable as hex) : "  eb    G    %    Hello, World!    EB    42  "$
      actual   (nonprintable as hex) : "  ebx    Gc    %%    Hello, World!s    EBX    42i  "$
$
Test 733 (mix_test_82) : FAILED.$
    First line of code: {return test($
      expected output : "  %    G    42    EB    Hello, World!    eb  "$
      your output     : "  %%    Gc    42i    EBX    Hello, World!s    ebx  "$
      expected (nonprintable as hex) : "  %    G    42    EB    Hello, World!    eb  "$
      actual   (nonprintable as hex) : "  %%    Gc    42i    EBX    Hello, World!s    ebx  "$
$
Test 734 (mix_test_83) : FAILED.$
    First line of code: {return test($
      expected output : "  42    EB    %    G    235    Hello, World!  "$
      your output     : "  42i    EBX    %%    Gc    235u    Hello, World!s  "$
      expected (nonprintable as hex) : "  42    EB    %    G    235    Hello, World!  "$
      actual   (nonprintable as hex) : "  42i    EBX    %%    Gc    235u    Hello, World!s  "$
$
Test 735 (mix_test_84) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10f8df310    eb    G    Hello, World!    235    0x10f8df310  "$
      your output     : "  0x10f8df310p    ebx    Gc    Hello, World!s    235u    0x10f8df310p  "$
      expected (nonprintable as hex) : "  0x10f8df310    eb    G    Hello, World!    235    0x10f8df310  "$
      actual   (nonprintable as hex) : "  0x10f8df310p    ebx    Gc    Hello, World!s    235u    0x10f8df310p  "$
$
Test 736 (mix_test_85) : FAILED.$
    First line of code: {return test($
      expected output : "  235    0x10f8df310    G    EB    Hello, World!    0x10f8df310  "$
      your output     : "  235u    0x10f8df310p    Gc    EBX    Hello, World!s    0x10f8df310p  "$
      expected (nonprintable as hex) : "  235    0x10f8df310    G    EB    Hello, World!    0x10f8df310  "$
      actual   (nonprintable as hex) : "  235u    0x10f8df310p    Gc    EBX    Hello, World!s    0x10f8df310p  "$
$
Test 737 (mix_test_86) : FAILED.$
    First line of code: {return test($
      expected output : "  0x10f8df310    G    235    EB    Hello, World!    0x10f8df310  "$
      your output     : "  0x10f8df310p    Gc    235u    EBX    Hello, World!s    0x10f8df310p  "$
      expected (nonprintable as hex) : "  0x10f8df310    G    235    EB    Hello, World!    0x10f8df310  "$
      actual   (nonprintable as hex) : "  0x10f8df310p    Gc    235u    EBX    Hello, World!s    0x10f8df310p  "$
$
Test 738 (mix_test_87) : FAILED.$
    First line of code: {return test($
      expected output : "  42    235    EB    0x10f8df310    G    0x10f8df310  "$
      your output     : "  42i    235u    EBX    0x10f8df310p    Gc    0x10f8df310p  "$
      expected (nonprintable as hex) : "  42    235    EB    0x10f8df310    G    0x10f8df310  "$
      actual   (nonprintable as hex) : "  42i    235u    EBX    0x10f8df310p    Gc    0x10f8df310p  "$
$
Test 739 (mix_test_88) : FAILED.$
    First line of code: {return test($
      expected output : "  42    G    0x10f8df310    %    EB    235  "$
      your output     : "  42i    Gc    0x10f8df310p    %%    EBX    235u  "$
      expected (nonprintable as hex) : "  42    G    0x10f8df310    %    EB    235  "$
      actual   (nonprintable as hex) : "  42i    Gc    0x10f8df310p    %%    EBX    235u  "$
$
Test 740 (mix_test_89) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    G    42    eb    0x10f8df310    235  "$
      your output     : "  Hello, World!s    Gc    42i    ebx    0x10f8df310p    235u  "$
      expected (nonprintable as hex) : "  Hello, World!    G    42    eb    0x10f8df310    235  "$
      actual   (nonprintable as hex) : "  Hello, World!s    Gc    42i    ebx    0x10f8df310p    235u  "$
$
Test 741 (mix_test_90) : FAILED.$
    First line of code: {return test($
      expected output : "  235    Hello, World!    eb    0x10f8df310    42    G  "$
      your output     : "  235u    Hello, World!s    ebx    0x10f8df310p    42i    Gc  "$
      expected (nonprintable as hex) : "  235    Hello, World!    eb    0x10f8df310    42    G  "$
      actual   (nonprintable as hex) : "  235u    Hello, World!s    ebx    0x10f8df310p    42i    Gc  "$
$
Test 742 (mix_test_91) : FAILED.$
    First line of code: {return test($
      expected output : "  235    0x10f8df310    EB    G    %    eb  "$
      your output     : "  235u    0x10f8df310p    EBX    Gc    %%    ebx  "$
      expected (nonprintable as hex) : "  235    0x10f8df310    EB    G    %    eb  "$
      actual   (nonprintable as hex) : "  235u    0x10f8df310p    EBX    Gc    %%    ebx  "$
$
Test 743 (mix_test_92) : FAILED.$
    First line of code: {return test($
      expected output : "  G    0x10f8df310    EB    eb    %    Hello, World!  "$
      your output     : "  Gc    0x10f8df310p    EBX    ebx    %%    Hello, World!s  "$
      expected (nonprintable as hex) : "  G    0x10f8df310    EB    eb    %    Hello, World!  "$
      actual   (nonprintable as hex) : "  Gc    0x10f8df310p    EBX    ebx    %%    Hello, World!s  "$
$
Test 744 (mix_test_93) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    G    Hello, World!    0x10f8df310    235    42  "$
      your output     : "  ebx    Gc    Hello, World!s    0x10f8df310p    235u    42i  "$
      expected (nonprintable as hex) : "  eb    G    Hello, World!    0x10f8df310    235    42  "$
      actual   (nonprintable as hex) : "  ebx    Gc    Hello, World!s    0x10f8df310p    235u    42i  "$
$
Test 745 (mix_test_94) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    0x10f8df310    G    %    235    42  "$
      your output     : "  EBX    0x10f8df310p    Gc    %%    235u    42i  "$
      expected (nonprintable as hex) : "  EB    0x10f8df310    G    %    235    42  "$
      actual   (nonprintable as hex) : "  EBX    0x10f8df310p    Gc    %%    235u    42i  "$
$
Test 746 (mix_test_95) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    eb    0x10f8df310    G    Hello, World!  "$
      your output     : "  %%    42i    ebx    0x10f8df310p    Gc    Hello, World!s  "$
      expected (nonprintable as hex) : "  %    42    eb    0x10f8df310    G    Hello, World!  "$
      actual   (nonprintable as hex) : "  %%    42i    ebx    0x10f8df310p    Gc    Hello, World!s  "$
$
Test 747 (mix_test_96) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    0x10f8df310    G    Hello, World!    42    235  "$
      your output     : "  EBX    0x10f8df310p    Gc    Hello, World!s    42i    235u  "$
      expected (nonprintable as hex) : "  EB    0x10f8df310    G    Hello, World!    42    235  "$
      actual   (nonprintable as hex) : "  EBX    0x10f8df310p    Gc    Hello, World!s    42i    235u  "$
$
Test 748 (mix_test_97) : FAILED.$
    First line of code: {return test($
      expected output : "  235    42    0x10f8df310    eb    Hello, World!    EB  "$
      your output     : "  235u    42i    0x10f8df310p    ebx    Hello, World!s    EBX  "$
      expected (nonprintable as hex) : "  235    42    0x10f8df310    eb    Hello, World!    EB  "$
      actual   (nonprintable as hex) : "  235u    42i    0x10f8df310p    ebx    Hello, World!s    EBX  "$
$
Test 749 (mix_test_98) : FAILED.$
    First line of code: {return test($
      expected output : "  42    Hello, World!    %    0x10f8df310    EB    G  "$
      your output     : "  42i    Hello, World!s    %%    0x10f8df310p    EBX    Gc  "$
      expected (nonprintable as hex) : "  42    Hello, World!    %    0x10f8df310    EB    G  "$
      actual   (nonprintable as hex) : "  42i    Hello, World!s    %%    0x10f8df310p    EBX    Gc  "$
$
Test 750 (mix_test_99) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    0x10f8df310    G    235    eb    42  "$
      your output     : "  EBX    0x10f8df310p    Gc    235u    ebx    42i  "$
      expected (nonprintable as hex) : "  EB    0x10f8df310    G    235    eb    42  "$
      actual   (nonprintable as hex) : "  EBX    0x10f8df310p    Gc    235u    ebx    42i  "$
$
Test 751 (mix_successive_0) : FAILED.$
    First line of code: {return ( test("%c", mx_c) + test("%u", mx_u));}$
      expected output : "G235"$
      your output     : "Gc235u"$
      expected (nonprintable as hex) : "G235"$
      actual   (nonprintable as hex) : "Gc235u"$
$
Test 752 (mix_successive_4) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%i", mx_i));}$
      expected output : "eb42"$
      your output     : "ebx42i"$
      expected (nonprintable as hex) : "eb42"$
      actual   (nonprintable as hex) : "ebx42i"$
$
Test 753 (mix_successive_6) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!sGc"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!sGc"$
$
Test 754 (mix_successive_10) : FAILED.$
    First line of code: {return ( test("%u", mx_u) + test("%s", mx_s));}$
      expected output : "235Hello, World!"$
      your output     : "235uHello, World!s"$
      expected (nonprintable as hex) : "235Hello, World!"$
      actual   (nonprintable as hex) : "235uHello, World!s"$
$
Test 755 (mix_successive_16) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%x", mx_u));}$
      expected output : "Hello, World!eb"$
      your output     : "Hello, World!sebx"$
      expected (nonprintable as hex) : "Hello, World!eb"$
      actual   (nonprintable as hex) : "Hello, World!sebx"$
$
Test 756 (mix_successive_20) : FAILED.$
    First line of code: {return ( test("%p", &mx_i) + test("%s", mx_s));}$
      expected output : "0x10f8df310Hello, World!"$
      your output     : "0x10f8df310pHello, World!s"$
      expected (nonprintable as hex) : "0x10f8df310Hello, World!"$
      actual   (nonprintable as hex) : "0x10f8df310pHello, World!s"$
$
Test 757 (mix_successive_21) : FAILED.$
    First line of code: {return ( test("%X", mx_u) + test("%x", mx_u));}$
      expected output : "EBeb"$
      your output     : "EBXebx"$
      expected (nonprintable as hex) : "EBeb"$
      actual   (nonprintable as hex) : "EBXebx"$
$
Test 758 (mix_successive_28) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%u", mx_u));}$
      expected output : "42235"$
      your output     : "42i235u"$
      expected (nonprintable as hex) : "42235"$
      actual   (nonprintable as hex) : "42i235u"$
$
Test 759 (mix_successive_30) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%u", mx_u));}$
      expected output : "Hello, World!235"$
      your output     : "Hello, World!s235u"$
      expected (nonprintable as hex) : "Hello, World!235"$
      actual   (nonprintable as hex) : "Hello, World!s235u"$
$
Test 760 (mix_successive_31) : FAILED.$
    First line of code: {return ( test("%X", mx_u) + test("%c", mx_c));}$
      expected output : "EBG"$
      your output     : "EBXGc"$
      expected (nonprintable as hex) : "EBG"$
      actual   (nonprintable as hex) : "EBXGc"$
$
Test 761 (mix_successive_32) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%u", mx_u));}$
      expected output : "eb235"$
      your output     : "ebx235u"$
      expected (nonprintable as hex) : "eb235"$
      actual   (nonprintable as hex) : "ebx235u"$
$
Test 762 (mix_successive_39) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%c", mx_c));}$
      expected output : "42G"$
      your output     : "42iGc"$
      expected (nonprintable as hex) : "42G"$
      actual   (nonprintable as hex) : "42iGc"$
$
Test 763 (mix_successive_40) : FAILED.$
    First line of code: {return ( test("%c", mx_c) + test("%x", mx_u));}$
      expected output : "Geb"$
      your output     : "Gcebx"$
      expected (nonprintable as hex) : "Geb"$
      actual   (nonprintable as hex) : "Gcebx"$
$
Test 764 (mix_successive_42) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%s", mx_s));}$
      expected output : "ebHello, World!"$
      your output     : "ebxHello, World!s"$
      expected (nonprintable as hex) : "ebHello, World!"$
      actual   (nonprintable as hex) : "ebxHello, World!s"$
$
Test 765 (mix_successive_43) : FAILED.$
    First line of code: {return ( test("%u", mx_u) + test("%x", mx_u));}$
      expected output : "235eb"$
      your output     : "235uebx"$
      expected (nonprintable as hex) : "235eb"$
      actual   (nonprintable as hex) : "235uebx"$
$
Test 766 (mix_successive_45) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!sGc"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!sGc"$
$
Test 767 (mix_successive_46) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%s", mx_s));}$
      expected output : "42Hello, World!"$
      your output     : "42iHello, World!s"$
      expected (nonprintable as hex) : "42Hello, World!"$
      actual   (nonprintable as hex) : "42iHello, World!s"$
$
Test 768 (mix_successive_61) : FAILED.$
    First line of code: {return ( test("%p", &mx_i) + test("%c", mx_c));}$
      expected output : "0x10f8df310G"$
      your output     : "0x10f8df310pGc"$
      expected (nonprintable as hex) : "0x10f8df310G"$
      actual   (nonprintable as hex) : "0x10f8df310pGc"$
$
Test 769 (mix_successive_64) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!sGc"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!sGc"$
$
Test 4186 (d_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*d", -3, 12345);}$
      expected output : "12345"$
      your output     : "12345.*d"$
      expected (nonprintable as hex) : "12345"$
      actual   (nonprintable as hex) : "12345.*d"$
$
Test 4187 (d_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*d", -1, 12345);}$
      expected output : "12345"$
      your output     : "12345.*d"$
      expected (nonprintable as hex) : "12345"$
      actual   (nonprintable as hex) : "12345.*d"$
$
Test 4188 (d_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*d", -1, 0);}$
      expected output : "0"$
      your output     : "0.*d"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0.*d"$
$
Test 4189 (u_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*u", -3, 12345);}$
      expected output : "12345"$
      your output     : "12345.*u"$
      expected (nonprintable as hex) : "12345"$
      actual   (nonprintable as hex) : "12345.*u"$
$
Test 4190 (u_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*u", -1, 12345);}$
      expected output : "12345"$
      your output     : "12345.*u"$
      expected (nonprintable as hex) : "12345"$
      actual   (nonprintable as hex) : "12345.*u"$
$
Test 4191 (u_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*u", -1, 0);}$
      expected output : "0"$
      your output     : "0.*u"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0.*u"$
$
Test 4192 (notintsubject_o_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*o", -3, 12345);}$
      expected output : "30071"$
      your output     : ".*o"$
      expected (nonprintable as hex) : "30071"$
      actual   (nonprintable as hex) : ".*o"$
$
Test 4193 (notintsubject_o_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*o", -1, 12345);}$
      expected output : "30071"$
      your output     : ".*o"$
      expected (nonprintable as hex) : "30071"$
      actual   (nonprintable as hex) : ".*o"$
$
Test 4194 (notintsubject_o_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*o", -1, 0);}$
      expected output : "0"$
      your output     : ".*o"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : ".*o"$
$
Test 4195 (x_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*x", -3, 12345);}$
      expected output : "3039"$
      your output     : "3039.*x"$
      expected (nonprintable as hex) : "3039"$
      actual   (nonprintable as hex) : "3039.*x"$
$
Test 4196 (x_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*x", -1, 12345);}$
      expected output : "3039"$
      your output     : "3039.*x"$
      expected (nonprintable as hex) : "3039"$
      actual   (nonprintable as hex) : "3039.*x"$
$
Test 4197 (x_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*x", -1, 0);}$
      expected output : "0"$
      your output     : "0.*x"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0.*x"$
$
Test 4198 (X_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*X", -3, 12345);}$
      expected output : "3039"$
      your output     : "3039.*X"$
      expected (nonprintable as hex) : "3039"$
      actual   (nonprintable as hex) : "3039.*X"$
$
Test 4199 (X_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*X", -1, 12345);}$
      expected output : "3039"$
      your output     : "3039.*X"$
      expected (nonprintable as hex) : "3039"$
      actual   (nonprintable as hex) : "3039.*X"$
$
Test 4200 (X_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*X", -1, 0);}$
      expected output : "0"$
      your output     : "0.*X"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0.*X"$
$
Test 4201 (s_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*s", -3, 0);}$
      expected output : "(null)"$
      your output     : "(null).*s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null).*s"$
$
Test 4202 (s_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*s", -1, 0);}$
      expected output : "(null)"$
      your output     : "(null).*s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null).*s"$
$
Test 4203 (p_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*p", -3, s_hello);}$
      expected output : "0x10f8b242e"$
      your output     : "0x10f8b242e.*p"$
      expected (nonprintable as hex) : "0x10f8b242e"$
      actual   (nonprintable as hex) : "0x10f8b242e.*p"$
$
Test 4204 (p_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*p", -1, s_hello);}$
      expected output : "0x10f8b242e"$
      your output     : "0x10f8b242e.*p"$
      expected (nonprintable as hex) : "0x10f8b242e"$
      actual   (nonprintable as hex) : "0x10f8b242e.*p"$
$
Test 4205 (p_neg_prec_star_03) : FAILED.$
    First line of code: {return test("%.*p", -3, 0);}$
      expected output : "0x0"$
      your output     : "0x0.*p"$
      expected (nonprintable as hex) : "0x0"$
      actual   (nonprintable as hex) : "0x0.*p"$
$
Test 4206 (p_neg_prec_star_04) : FAILED.$
    First line of code: {return test("%.*p", -1, 0);}$
      expected output : "0x0"$
      your output     : "0x0.*p"$
      expected (nonprintable as hex) : "0x0"$
      actual   (nonprintable as hex) : "0x0.*p"$
$
#########PFT_2019##########
WARNING: The return values reported here may be bugged on some systems.$
          See https://github.com/gavinfielder/pft/issues/11$
          Run in non-fork mode (-X) to ensure accurate return value$
          reporting, set IGNORE_RETURN_VALUE=1 in options-config.ini,$
          or run test_pipes.sh to see if your system has this bug.$
          This bug does not affect the pass/fail result of a test, nor$
          the function output--only the reported return value.$
$
$
Test   7 (pct_5w) : FAILED.$
    First line of code: {return test("%5%");}$
      expected return value : 5$
      your return value     : 6$
      expected output : "    %"$
      your output     : "    %5"$
      expected (nonprintable as hex) : "    %"$
      actual   (nonprintable as hex) : "    %5"$
$
Test   8 (pct_5wlj) : FAILED.$
    First line of code: {return test("%-5%");}$
      expected return value : 5$
      your return value     : 7$
      expected output : "%    "$
      your output     : "%    -5"$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "%    -5"$
$
Test   9 (pct_5wzp) : FAILED.$
    First line of code: {return test("%05%");}$
      expected return value : 5$
      your return value     : 7$
      expected output : "0000%"$
      your output     : "0000%05"$
      expected (nonprintable as hex) : "0000%"$
      actual   (nonprintable as hex) : "0000%05"$
$
Test  10 (pct_5wljzp) : FAILED.$
    First line of code: {return test("%-05%");}$
      expected return value : 5$
      your return value     : 8$
      expected output : "%    "$
      your output     : "%    -05"$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "%    -05"$
$
Test  16 (s_basic_string_expansion) : FAILED.$
    First line of code: {return test("hello, %s.", "gavin");}$
      expected return value : 14$
      your return value     : 15$
      expected output : "hello, gavin."$
      your output     : "hello, gavins."$
      expected (nonprintable as hex) : "hello, gavin."$
      actual   (nonprintable as hex) : "hello, gavins."$
$
Test  17 (s_only_string_expansion) : FAILED.$
    First line of code: {return test("%s", "testing testing");}$
      expected return value : 16$
      your return value     : 17$
      expected output : "testing testing"$
      your output     : "testing testings"$
      expected (nonprintable as hex) : "testing testing"$
      actual   (nonprintable as hex) : "testing testings"$
$
Test  18 (s_two_string_expansions) : FAILED.$
    First line of code: {return test("%s%s", "hello", "world");}$
      expected return value : 11$
      your return value     : 13$
      expected output : "helloworld"$
      your output     : "hellosworlds"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "hellosworlds"$
$
Test  19 (s_two_string_expansions2) : FAILED.$
    First line of code: {return test("..%s stuff %s", "a", "b");}$
      expected return value : 12$
      your return value     : 14$
      expected output : "..a stuff b"$
      your output     : "..as stuff bs"$
      expected (nonprintable as hex) : "..a stuff b"$
      actual   (nonprintable as hex) : "..as stuff bs"$
$
Test  20 (s_empty_string_expansion) : FAILED.$
    First line of code: {return test("this %s is empty", "");}$
      expected return value : 15$
      your return value     : 16$
      expected output : "this  is empty"$
      your output     : "this s is empty"$
      expected (nonprintable as hex) : "this  is empty"$
      actual   (nonprintable as hex) : "this s is empty"$
$
Test  21 (s_full_then_empty_string) : FAILED.$
    First line of code: {return test("this %s is %s", "hello", "");}$
      expected return value : 15$
      your return value     : 17$
      expected output : "this hello is "$
      your output     : "this hellos is s"$
      expected (nonprintable as hex) : "this hello is "$
      actual   (nonprintable as hex) : "this hellos is s"$
$
Test  22 (s_empty_then_full_string) : FAILED.$
    First line of code: {return test("this %s is %s", "", "hello");}$
      expected return value : 15$
      your return value     : 17$
      expected output : "this  is hello"$
      your output     : "this s is hellos"$
      expected (nonprintable as hex) : "this  is hello"$
      actual   (nonprintable as hex) : "this s is hellos"$
$
Test  23 (s_three_strings) : FAILED.$
    First line of code: {return test("%s%s%s", "1", "2", "3's a charm");}$
      expected return value : 14$
      your return value     : 17$
      expected output : "123's a charm"$
      your output     : "1s2s3's a charms"$
      expected (nonprintable as hex) : "123's a charm"$
      actual   (nonprintable as hex) : "1s2s3's a charms"$
$
Test  24 (s_space_padded_field_width) : FAILED.$
    First line of code: {return test("%32s", "abc");}$
      expected return value : 35$
      your return value     : 38$
      expected output : "                             abc"$
      your output     : "                             abc32s"$
      expected (nonprintable as hex) : "                             abc"$
      actual   (nonprintable as hex) : "                             abc32s"$
$
Test  25 (s_space_padded_field_width2) : FAILED.$
    First line of code: {return test("%16s", "nark nark");}$
      expected return value : 17$
      your return value     : 20$
      expected output : "       nark nark"$
      your output     : "       nark nark16s"$
      expected (nonprintable as hex) : "       nark nark"$
      actual   (nonprintable as hex) : "       nark nark16s"$
$
Test  26 (s_space_padded_over_field_width) : FAILED.$
    First line of code: {return test("%5s", "goes over");}$
      expected return value : 9$
      your return value     : 12$
      expected output : "goes over"$
      your output     : "goes over5s"$
      expected (nonprintable as hex) : "goes over"$
      actual   (nonprintable as hex) : "goes over5s"$
$
Test  27 (s_space_padded_field_width_lj) : FAILED.$
    First line of code: {return test("%-32s", "abc");}$
      expected return value : 35$
      your return value     : 39$
      expected output : "abc                             "$
      your output     : "abc                             -32s"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             -32s"$
$
Test  28 (s_space_padded_field_width2_lj) : FAILED.$
    First line of code: {return test("%-16s", "nark nark");}$
      expected return value : 17$
      your return value     : 22$
      expected output : "nark nark       "$
      your output     : "nark nark       -16s"$
      expected (nonprintable as hex) : "nark nark       "$
      actual   (nonprintable as hex) : "nark nark       -16s"$
$
Test  29 (s_space_padded_over_field_width_lj) : FAILED.$
    First line of code: {return test("%-5s", "goes over");}$
      expected return value : 9$
      your return value     : 13$
      expected output : "goes over"$
      your output     : "goes over-5s"$
      expected (nonprintable as hex) : "goes over"$
      actual   (nonprintable as hex) : "goes over-5s"$
$
Test  30 (s_string_prec_notrunc) : FAILED.$
    First line of code: {return test("%.7s", "hello");}$
      expected return value : 5$
      your return value     : 8$
      expected output : "hello"$
      your output     : "hello.7s"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hello.7s"$
$
Test  31 (s_string_prec_trunc) : FAILED.$
    First line of code: {return test("%.3s", "hello");}$
      expected return value : 3$
      your return value     : 6$
      expected output : "hel"$
      your output     : "hel.3s"$
      expected (nonprintable as hex) : "hel"$
      actual   (nonprintable as hex) : "hel.3s"$
$
Test  32 (s_string_prec_default) : FAILED.$
    First line of code: {return test("%.s", "hello");}$
      expected return value : 0$
      your return value     : 2$
      expected output : ""$
      your output     : ".s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".s"$
$
Test  33 (s_string_prec_zero) : FAILED.$
    First line of code: {return test("%.0s", "hello");}$
      expected return value : 0$
      your return value     : 3$
      expected output : ""$
      your output     : ".0s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0s"$
$
Test  34 (s_two_strings_prec_2trunc) : FAILED.$
    First line of code: {return test("%.3s%.2s", "holla", "bitch");}$
      expected return value : 5$
      your return value     : 12$
      expected output : "holbi"$
      your output     : "hol.3sbi.2s"$
      expected (nonprintable as hex) : "holbi"$
      actual   (nonprintable as hex) : "hol.3sbi.2s"$
$
Test  35 (s_two_strings_prec_1trunc_a) : FAILED.$
    First line of code: {return test("%.2s%.7s", "hello", "world");}$
      expected return value : 7$
      your return value     : 14$
      expected output : "heworld"$
      your output     : "he.2sworld.7s"$
      expected (nonprintable as hex) : "heworld"$
      actual   (nonprintable as hex) : "he.2sworld.7s"$
$
Test  36 (s_two_strings_prec_1trunc_b) : FAILED.$
    First line of code: {return test("%.7s%.2s", "hello", "world");}$
      expected return value : 7$
      your return value     : 14$
      expected output : "hellowo"$
      your output     : "hello.7swo.2s"$
      expected (nonprintable as hex) : "hellowo"$
      actual   (nonprintable as hex) : "hello.7swo.2s"$
$
Test  37 (s_two_strings_prec_0trunc) : FAILED.$
    First line of code: {return test("%.5s%7s", "yo", "boi");}$
      expected return value : 9$
      your return value     : 15$
      expected output : "yo    boi"$
      your output     : "yo.5s    boi7s"$
      expected (nonprintable as hex) : "yo    boi"$
      actual   (nonprintable as hex) : "yo.5s    boi7s"$
$
Test  38 (s_string_prec_width_notrunc) : FAILED.$
    First line of code: {return test("%7.5s", "yolo");}$
      expected return value : 7$
      your return value     : 12$
      expected output : "   yolo"$
      your output     : "   yolo7.5s"$
      expected (nonprintable as hex) : "   yolo"$
      actual   (nonprintable as hex) : "   yolo7.5s"$
$
Test  39 (s_string_prec_width_trunc) : FAILED.$
    First line of code: {return test("%7.5s", "bombastic");}$
      expected return value : 7$
      your return value     : 12$
      expected output : "  bomba"$
      your output     : "  bomba7.5s"$
      expected (nonprintable as hex) : "  bomba"$
      actual   (nonprintable as hex) : "  bomba7.5s"$
$
Test  40 (s_string_prec_width_notrunc_lj) : FAILED.$
    First line of code: {return test("%-7.5s", "yolo");}$
      expected return value : 7$
      your return value     : 13$
      expected output : "yolo   "$
      your output     : "yolo   -7.5s"$
      expected (nonprintable as hex) : "yolo   "$
      actual   (nonprintable as hex) : "yolo   -7.5s"$
$
Test  41 (s_string_prec_width_trunc_lj) : FAILED.$
    First line of code: {return test("%-7.5s", "tubular");}$
      expected return value : 7$
      your return value     : 13$
      expected output : "tubul  "$
      your output     : "tubul  -7.5s"$
      expected (nonprintable as hex) : "tubul  "$
      actual   (nonprintable as hex) : "tubul  -7.5s"$
$
Test  42 (s_two_s_prec_width_2fit_0trunc) : FAILED.$
    First line of code: {return test("%7.7s%7.7s", "hello", "world");}$
      expected return value : 15$
      your return value     : 24$
      expected output : "  hello  world"$
      your output     : "  hello7.7s  world7.7s"$
      expected (nonprintable as hex) : "  hello  world"$
      actual   (nonprintable as hex) : "  hello7.7s  world7.7s"$
$
Test  43 (s_two_s_prec_width_1fit_a_0trunc) : FAILED.$
    First line of code: {return test("%3.7s%7.7s", "hello", "world");}$
      expected return value : 13$
      your return value     : 22$
      expected output : "hello  world"$
      your output     : "hello3.7s  world7.7s"$
      expected (nonprintable as hex) : "hello  world"$
      actual   (nonprintable as hex) : "hello3.7s  world7.7s"$
$
Test  44 (s_two_s_prec_width_1fit_b_0trunc) : FAILED.$
    First line of code: {return test("%7.7s%3.7s", "hello", "world");}$
      expected return value : 13$
      your return value     : 22$
      expected output : "  helloworld"$
      your output     : "  hello7.7sworld3.7s"$
      expected (nonprintable as hex) : "  helloworld"$
      actual   (nonprintable as hex) : "  hello7.7sworld3.7s"$
$
Test  45 (s_two_s_prec_width_0fit_0trunc) : FAILED.$
    First line of code: {return test("%3.7s%3.7s", "hello", "world");}$
      expected return value : 11$
      your return value     : 19$
      expected output : "helloworld"$
      your output     : "hello3.7sworld3.7s"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "hello3.7sworld3.7s"$
$
Test  46 (s_two_s_prec_width_2fit_1trunc_a) : FAILED.$
    First line of code: {return test("%7.3s%7.7s", "hello", "world");}$
      expected return value : 15$
      your return value     : 24$
      expected output : "    hel  world"$
      your output     : "    hel7.3s  world7.7s"$
      expected (nonprintable as hex) : "    hel  world"$
      actual   (nonprintable as hex) : "    hel7.3s  world7.7s"$
$
Test  47 (s_two_s_prec_width_1fit_a_1trunc_a) : FAILED.$
    First line of code: {return test("%3.3s%7.7s", "hello", "world");}$
      expected return value : 11$
      your return value     : 19$
      expected output : "hel  world"$
      your output     : "hel3.3s  world7.7s"$
      expected (nonprintable as hex) : "hel  world"$
      actual   (nonprintable as hex) : "hel3.3s  world7.7s"$
$
Test  48 (s_two_s_prec_width_1fit_b_1trunc_a) : FAILED.$
    First line of code: {return test("%7.3s%3.7s", "hello", "world");}$
      expected return value : 13$
      your return value     : 22$
      expected output : "    helworld"$
      your output     : "    hel7.3sworld3.7s"$
      expected (nonprintable as hex) : "    helworld"$
      actual   (nonprintable as hex) : "    hel7.3sworld3.7s"$
$
Test  49 (s_two_s_prec_width_0fit_1trunc_a) : FAILED.$
    First line of code: {return test("%3.3s%3.7s", "hello", "world");}$
      expected return value : 8$
      your return value     : 17$
      expected output : "helworld"$
      your output     : "hel3.3sworld3.7s"$
      expected (nonprintable as hex) : "helworld"$
      actual   (nonprintable as hex) : "hel3.3sworld3.7s"$
$
Test  50 (s_two_s_prec_width_2fit_1trunc_b) : FAILED.$
    First line of code: {return test("%7.7s%7.3s", "hello", "world");}$
      expected return value : 15$
      your return value     : 24$
      expected output : "  hello    wor"$
      your output     : "  hello7.7s    wor7.3s"$
      expected (nonprintable as hex) : "  hello    wor"$
      actual   (nonprintable as hex) : "  hello7.7s    wor7.3s"$
$
Test  51 (s_two_s_prec_width_1fit_a_1trunc_b) : FAILED.$
    First line of code: {return test("%3.7s%7.3s", "hello", "world");}$
      expected return value : 13$
      your return value     : 22$
      expected output : "hello    wor"$
      your output     : "hello3.7s    wor7.3s"$
      expected (nonprintable as hex) : "hello    wor"$
      actual   (nonprintable as hex) : "hello3.7s    wor7.3s"$
$
Test  52 (s_two_s_prec_width_1fit_b_1trunc_b) : FAILED.$
    First line of code: {return test("%7.7s%3.3s", "hello", "world");}$
      expected return value : 11$
      your return value     : 19$
      expected output : "  hellowor"$
      your output     : "  hello7.7swor3.3s"$
      expected (nonprintable as hex) : "  hellowor"$
      actual   (nonprintable as hex) : "  hello7.7swor3.3s"$
$
Test  53 (s_two_s_prec_width_0fit_1trunc_b) : FAILED.$
    First line of code: {return test("%3.7s%3.3s", "hello", "world");}$
      expected return value : 8$
      your return value     : 17$
      expected output : "hellowor"$
      your output     : "hello3.7swor3.3s"$
      expected (nonprintable as hex) : "hellowor"$
      actual   (nonprintable as hex) : "hello3.7swor3.3s"$
$
Test  54 (s_two_s_prec_width_2fit_2trunc) : FAILED.$
    First line of code: {return test("%7.3s%7.3s", "hello", "world");}$
      expected return value : 15$
      your return value     : 24$
      expected output : "    hel    wor"$
      your output     : "    hel7.3s    wor7.3s"$
      expected (nonprintable as hex) : "    hel    wor"$
      actual   (nonprintable as hex) : "    hel7.3s    wor7.3s"$
$
Test  55 (s_two_s_prec_width_1fit_a_2trunc) : FAILED.$
    First line of code: {return test("%3.3s%7.3s", "hello", "world");}$
      expected return value : 11$
      your return value     : 19$
      expected output : "hel    wor"$
      your output     : "hel3.3s    wor7.3s"$
      expected (nonprintable as hex) : "hel    wor"$
      actual   (nonprintable as hex) : "hel3.3s    wor7.3s"$
$
Test  56 (s_two_s_prec_width_1fit_b_2trunc) : FAILED.$
    First line of code: {return test("%7.3s%3.3s", "hello", "world");}$
      expected return value : 11$
      your return value     : 19$
      expected output : "    helwor"$
      your output     : "    hel7.3swor3.3s"$
      expected (nonprintable as hex) : "    helwor"$
      actual   (nonprintable as hex) : "    hel7.3swor3.3s"$
$
Test  57 (s_two_s_prec_width_0fit_2trunc) : FAILED.$
    First line of code: {return test("%3.3s%3.3s", "hello", "world");}$
      expected return value : 6$
      your return value     : 15$
      expected output : "helwor"$
      your output     : "hel3.3swor3.3s"$
      expected (nonprintable as hex) : "helwor"$
      actual   (nonprintable as hex) : "hel3.3swor3.3s"$
$
Test  58 (s_two_s_prec_width_2trunc) : FAILED.$
    First line of code: {return test("%3s%3s", "hello", "world");}$
      expected return value : 11$
      your return value     : 15$
      expected output : "helloworld"$
      your output     : "hello3sworld3s"$
      expected (nonprintable as hex) : "helloworld"$
      actual   (nonprintable as hex) : "hello3sworld3s"$
$
Test  59 (s_two_strings_lj_and_rj) : FAILED.$
    First line of code: {return test("%-7s%5s", "hello", "world");}$
      expected return value : 13$
      your return value     : 18$
      expected output : "hello  world"$
      your output     : "hello  -7sworld5s"$
      expected (nonprintable as hex) : "hello  world"$
      actual   (nonprintable as hex) : "hello  -7sworld5s"$
$
Test  60 (s_two_strings_rj_and_lj) : FAILED.$
    First line of code: {return test("%7s%-5s", "hello", "world");}$
      expected return value : 13$
      your return value     : 18$
      expected output : "  helloworld"$
      your output     : "  hello7sworld-5s"$
      expected (nonprintable as hex) : "  helloworld"$
      actual   (nonprintable as hex) : "  hello7sworld-5s"$
$
Test  61 (s_null_basic_string_expansion) : FAILED.$
    First line of code: {return test("hello, %s.", NULL);}$
      expected return value : 15$
      your return value     : 16$
      expected output : "hello, (null)."$
      your output     : "hello, (null)s."$
      expected (nonprintable as hex) : "hello, (null)."$
      actual   (nonprintable as hex) : "hello, (null)s."$
$
Test  62 (s_null_only_string_expansion) : FAILED.$
    First line of code: {return test("%s", NULL);}$
      expected return value : 6$
      your return value     : 7$
      expected output : "(null)"$
      your output     : "(null)s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null)s"$
$
Test  63 (s_null_space_padded_field_width) : FAILED.$
    First line of code: {return test("%32s", NULL);}$
      expected return value : 35$
      your return value     : 38$
      expected output : "                          (null)"$
      your output     : "                          (null)32s"$
      expected (nonprintable as hex) : "                          (null)"$
      actual   (nonprintable as hex) : "                          (null)32s"$
$
Test  64 (s_null_space_padded_over_field_width) : FAILED.$
    First line of code: {return test("%2s", NULL);}$
      expected return value : 6$
      your return value     : 8$
      expected output : "(null)"$
      your output     : "(null)2s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null)2s"$
$
Test  65 (s_null_space_padded_field_width_lj) : FAILED.$
    First line of code: {return test("%-32s", NULL);}$
      expected return value : 35$
      your return value     : 39$
      expected output : "(null)                          "$
      your output     : "(null)                          -32s"$
      expected (nonprintable as hex) : "(null)                          "$
      actual   (nonprintable as hex) : "(null)                          -32s"$
$
Test  66 (s_null_space_padded_field_width2_lj) : FAILED.$
    First line of code: {return test("%-16s", NULL);}$
      expected return value : 17$
      your return value     : 22$
      expected output : "(null)          "$
      your output     : "(null)          -16s"$
      expected (nonprintable as hex) : "(null)          "$
      actual   (nonprintable as hex) : "(null)          -16s"$
$
Test  67 (s_null_space_padded_over_field_width_lj) : FAILED.$
    First line of code: {return test("%-3s", NULL);}$
      expected return value : 6$
      your return value     : 9$
      expected output : "(null)"$
      your output     : "(null)-3s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null)-3s"$
$
Test  68 (s_null_string_prec_notrunc) : FAILED.$
    First line of code: {return test("%.9s", "NULL");}$
      expected return value : 4$
      your return value     : 7$
      expected output : "NULL"$
      your output     : "NULL.9s"$
      expected (nonprintable as hex) : "NULL"$
      actual   (nonprintable as hex) : "NULL.9s"$
$
Test  69 (s_null_string_prec_trunc) : FAILED.$
    First line of code: {return test("%.3s", "NULL");}$
      expected return value : 3$
      your return value     : 6$
      expected output : "NUL"$
      your output     : "NUL.3s"$
      expected (nonprintable as hex) : "NUL"$
      actual   (nonprintable as hex) : "NUL.3s"$
$
Test  70 (s_null_string_prec_default) : FAILED.$
    First line of code: {return test("%.s", "NULL");}$
      expected return value : 0$
      your return value     : 2$
      expected output : ""$
      your output     : ".s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".s"$
$
Test  71 (s_null_string_prec_zero) : FAILED.$
    First line of code: {return test("%.0s", "NULL");}$
      expected return value : 0$
      your return value     : 3$
      expected output : ""$
      your output     : ".0s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0s"$
$
Test  72 (s_basic_s_hidden) : FAILED.$
    First line of code: {return test("%s", s_hidden);}$
      expected return value : 6$
      your return value     : 7$
      expected output : "hi low"$
      your output     : "hi lows"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi lows"$
$
Test  73 (s_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3s", s_hidden);}$
      expected return value : 6$
      your return value     : 8$
      expected output : "hi low"$
      your output     : "hi low3s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low3s"$
$
Test  74 (s_width_9_s_hidden) : FAILED.$
    First line of code: {return test("%9s", s_hidden);}$
      expected return value : 9$
      your return value     : 12$
      expected output : "   hi low"$
      your output     : "   hi low9s"$
      expected (nonprintable as hex) : "   hi low"$
      actual   (nonprintable as hex) : "   hi low9s"$
$
Test  75 (s_prec_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.s", s_hidden);}$
      expected return value : 0$
      your return value     : 2$
      expected output : ""$
      your output     : ".s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".s"$
$
Test  76 (s_prec_9_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.9s", s_hidden);}$
      expected return value : 6$
      your return value     : 9$
      expected output : "hi low"$
      your output     : "hi low.9s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low.9s"$
$
Test  77 (s_prec_03_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.03s", s_hidden);}$
      expected return value : 3$
      your return value     : 7$
      expected output : "hi "$
      your output     : "hi .03s"$
      expected (nonprintable as hex) : "hi "$
      actual   (nonprintable as hex) : "hi .03s"$
$
Test  78 (s_prec_09_no_width_s_hidden) : FAILED.$
    First line of code: {return test("%.09s", s_hidden);}$
      expected return value : 6$
      your return value     : 11$
      expected output : "hi low"$
      your output     : "hi low.09s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low.09s"$
$
Test  79 (s_prec_03_no_width_s_null) : FAILED.$
    First line of code: {return test("%.03s", NULL);}$
      expected return value : 3$
      your return value     : 7$
      expected output : "(nu"$
      your output     : "(nu.03s"$
      expected (nonprintable as hex) : "(nu"$
      actual   (nonprintable as hex) : "(nu.03s"$
$
Test  80 (s_prec_09_no_width_s_null) : FAILED.$
    First line of code: {return test("%.09s", NULL);}$
      expected return value : 6$
      your return value     : 11$
      expected output : "(null)"$
      your output     : "(null).09s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null).09s"$
$
Test  81 (s_prec_00_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.00s", "$
      expected return value : 0$
      your return value     : 4$
      expected output : ""$
      your output     : ".00s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".00s"$
$
Test  82 (s_prec_01_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.01s", "$
      expected return value : 0$
      your return value     : 4$
      expected output : ""$
      your output     : ".01s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".01s"$
$
Test  83 (s_prec_03_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.03s", "$
      expected return value : 0$
      your return value     : 4$
      expected output : ""$
      your output     : ".03s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".03s"$
$
Test  84 (s_prec_09_no_width_s_nullchar) : FAILED.$
    First line of code: {return test("%.09s", "$
      expected return value : 0$
      your return value     : 4$
      expected output : ""$
      your output     : ".09s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".09s"$
$
Test  85 (s_prec_0_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.s", s_hidden);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "   "$
      your output     : "   3.s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   3.s"$
$
Test  86 (s_prec_0_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%10.s", s_hidden);}$
      expected return value : 11$
      your return value     : 15$
      expected output : "          "$
      your output     : "          10.s"$
      expected (nonprintable as hex) : "          "$
      actual   (nonprintable as hex) : "          10.s"$
$
Test  87 (s_prec_0_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.s", NULL);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "   "$
      your output     : "   3.s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   3.s"$
$
Test  88 (s_prec_0_width_10_s_null) : FAILED.$
    First line of code: {return test("%10.s", NULL);}$
      expected return value : 11$
      your return value     : 15$
      expected output : "          "$
      your output     : "          10.s"$
      expected (nonprintable as hex) : "          "$
      actual   (nonprintable as hex) : "          10.s"$
$
Test  89 (s_prec_0_width_1_s_nullchar) : FAILED.$
    First line of code: {return test("%1.s", "$
      expected return value : 1$
      your return value     : 4$
      expected output : " "$
      your output     : " 1.s"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " 1.s"$
$
Test  90 (s_prec_0_width_2_s_nullchar) : FAILED.$
    First line of code: {return test("%2.s", "$
      expected return value : 2$
      your return value     : 5$
      expected output : "  "$
      your output     : "  2.s"$
      expected (nonprintable as hex) : "  "$
      actual   (nonprintable as hex) : "  2.s"$
$
Test  91 (s_prec_0_width_9_s_nullchar) : FAILED.$
    First line of code: {return test("%9.s", "$
      expected return value : 9$
      your return value     : 13$
      expected output : "         "$
      your output     : "         9.s"$
      expected (nonprintable as hex) : "         "$
      actual   (nonprintable as hex) : "         9.s"$
$
Test  92 (s_prec_0_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.s", s_hidden);}$
      expected return value : 3$
      your return value     : 7$
      expected output : "   "$
      your output     : "   -3.s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   -3.s"$
$
Test  93 (s_prec_0_lj_width_8_s_hidden) : FAILED.$
    First line of code: {return test("%-8.s", s_hidden);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "        "$
      your output     : "        -8.s"$
      expected (nonprintable as hex) : "        "$
      actual   (nonprintable as hex) : "        -8.s"$
$
Test  94 (s_prec_0_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.s", NULL);}$
      expected return value : 3$
      your return value     : 7$
      expected output : "   "$
      your output     : "   -3.s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   -3.s"$
$
Test  95 (s_prec_0_lj_width_8_s_null) : FAILED.$
    First line of code: {return test("%-8.s", NULL);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "        "$
      your output     : "        -8.s"$
      expected (nonprintable as hex) : "        "$
      actual   (nonprintable as hex) : "        -8.s"$
$
Test  96 (s_prec_0_lj_width_1_s_nullchar) : FAILED.$
    First line of code: {return test("%-1.s", "$
      expected return value : 1$
      your return value     : 5$
      expected output : " "$
      your output     : " -1.s"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " -1.s"$
$
Test  97 (s_prec_0_lj_width_2_s_nullchar) : FAILED.$
    First line of code: {return test("%-2.s", "$
      expected return value : 2$
      your return value     : 6$
      expected output : "  "$
      your output     : "  -2.s"$
      expected (nonprintable as hex) : "  "$
      actual   (nonprintable as hex) : "  -2.s"$
$
Test  98 (s_prec_0_lj_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%-6.s", "$
      expected return value : 6$
      your return value     : 11$
      expected output : "      "$
      your output     : "      -6.s"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      -6.s"$
$
Test  99 (s_prec_1_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.1s", s_hidden);}$
      expected return value : 3$
      your return value     : 7$
      expected output : "  h"$
      your output     : "  h3.1s"$
      expected (nonprintable as hex) : "  h"$
      actual   (nonprintable as hex) : "  h3.1s"$
$
Test 100 (s_prec_1_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%10.1s", s_hidden);}$
      expected return value : 11$
      your return value     : 16$
      expected output : "         h"$
      your output     : "         h10.1s"$
      expected (nonprintable as hex) : "         h"$
      actual   (nonprintable as hex) : "         h10.1s"$
$
Test 101 (s_prec_1_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.1s", NULL);}$
      expected return value : 3$
      your return value     : 7$
      expected output : "  ("$
      your output     : "  (3.1s"$
      expected (nonprintable as hex) : "  ("$
      actual   (nonprintable as hex) : "  (3.1s"$
$
Test 102 (s_prec_1_width_9_s_null) : FAILED.$
    First line of code: {return test("%9.1s", NULL);}$
      expected return value : 9$
      your return value     : 14$
      expected output : "        ("$
      your output     : "        (9.1s"$
      expected (nonprintable as hex) : "        ("$
      actual   (nonprintable as hex) : "        (9.1s"$
$
Test 103 (s_prec_1_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.1s", s_hidden);}$
      expected return value : 3$
      your return value     : 8$
      expected output : "h  "$
      your output     : "h  -3.1s"$
      expected (nonprintable as hex) : "h  "$
      actual   (nonprintable as hex) : "h  -3.1s"$
$
Test 104 (s_prec_1_lj_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%-10.1s", s_hidden);}$
      expected return value : 11$
      your return value     : 17$
      expected output : "h         "$
      your output     : "h         -10.1s"$
      expected (nonprintable as hex) : "h         "$
      actual   (nonprintable as hex) : "h         -10.1s"$
$
Test 105 (s_prec_1_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.1s", NULL);}$
      expected return value : 3$
      your return value     : 8$
      expected output : "(  "$
      your output     : "(  -3.1s"$
      expected (nonprintable as hex) : "(  "$
      actual   (nonprintable as hex) : "(  -3.1s"$
$
Test 106 (s_prec_1_lj_width_9_s_null) : FAILED.$
    First line of code: {return test("%-9.1s", NULL);}$
      expected return value : 9$
      your return value     : 15$
      expected output : "(        "$
      your output     : "(        -9.1s"$
      expected (nonprintable as hex) : "(        "$
      actual   (nonprintable as hex) : "(        -9.1s"$
$
Test 107 (s_prec_1_lj_width_3_s_nullchar) : FAILED.$
    First line of code: {return test("%-3.1s", "$
      expected return value : 3$
      your return value     : 8$
      expected output : "   "$
      your output     : "   -3.1s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   -3.1s"$
$
Test 108 (s_prec_1_lj_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%-6.1s", "$
      expected return value : 6$
      your return value     : 12$
      expected output : "      "$
      your output     : "      -6.1s"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      -6.1s"$
$
Test 109 (s_prec_perfect_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%3.6s", s_hidden);}$
      expected return value : 6$
      your return value     : 11$
      expected output : "hi low"$
      your output     : "hi low3.6s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low3.6s"$
$
Test 110 (s_prec_perfect_width_20_s_hidden) : FAILED.$
    First line of code: {return test("%20.6s", s_hidden);}$
      expected return value : 22$
      your return value     : 27$
      expected output : "              hi low"$
      your output     : "              hi low20.6s"$
      expected (nonprintable as hex) : "              hi low"$
      actual   (nonprintable as hex) : "              hi low20.6s"$
$
Test 111 (s_prec_perfect_width_3_s_null) : FAILED.$
    First line of code: {return test("%3.6s", NULL);}$
      expected return value : 6$
      your return value     : 11$
      expected output : "(null)"$
      your output     : "(null)3.6s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null)3.6s"$
$
Test 112 (s_prec_perfect_width_20_s_null) : FAILED.$
    First line of code: {return test("%20.6s", NULL);}$
      expected return value : 22$
      your return value     : 27$
      expected output : "              (null)"$
      your output     : "              (null)20.6s"$
      expected (nonprintable as hex) : "              (null)"$
      actual   (nonprintable as hex) : "              (null)20.6s"$
$
Test 113 (s_prec_perfect_width_3_s_nullchar) : FAILED.$
    First line of code: {return test("%3.6s", "$
      expected return value : 3$
      your return value     : 7$
      expected output : "   "$
      your output     : "   3.6s"$
      expected (nonprintable as hex) : "   "$
      actual   (nonprintable as hex) : "   3.6s"$
$
Test 114 (s_prec_perfect_width_6_s_nullchar) : FAILED.$
    First line of code: {return test("%6.6s", "$
      expected return value : 6$
      your return value     : 11$
      expected output : "      "$
      your output     : "      6.6s"$
      expected (nonprintable as hex) : "      "$
      actual   (nonprintable as hex) : "      6.6s"$
$
Test 115 (s_prec_perfect_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.6s", s_hidden);}$
      expected return value : 6$
      your return value     : 12$
      expected output : "hi low"$
      your output     : "hi low-3.6s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low-3.6s"$
$
Test 116 (s_prec_perfect_lj_width_20_s_hidden) : FAILED.$
    First line of code: {return test("%-20.6s", s_hidden);}$
      expected return value : 22$
      your return value     : 28$
      expected output : "hi low              "$
      your output     : "hi low              -20.6s"$
      expected (nonprintable as hex) : "hi low              "$
      actual   (nonprintable as hex) : "hi low              -20.6s"$
$
Test 117 (s_prec_8_lj_width_3_s_hidden) : FAILED.$
    First line of code: {return test("%-3.8s", s_hidden);}$
      expected return value : 6$
      your return value     : 12$
      expected output : "hi low"$
      your output     : "hi low-3.8s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low-3.8s"$
$
Test 118 (s_prec_8_lj_width_10_s_hidden) : FAILED.$
    First line of code: {return test("%-10.8s", s_hidden);}$
      expected return value : 11$
      your return value     : 17$
      expected output : "hi low    "$
      your output     : "hi low    -10.8s"$
      expected (nonprintable as hex) : "hi low    "$
      actual   (nonprintable as hex) : "hi low    -10.8s"$
$
Test 119 (s_prec_8_lj_width_3_s_null) : FAILED.$
    First line of code: {return test("%-3.8s", NULL);}$
      expected return value : 6$
      your return value     : 12$
      expected output : "(null)"$
      your output     : "(null)-3.8s"$
      expected (nonprintable as hex) : "(null)"$
      actual   (nonprintable as hex) : "(null)-3.8s"$
$
Test 120 (s_prec_8_lj_width_10_s_null) : FAILED.$
    First line of code: {return test("%-10.8s", NULL);}$
      expected return value : 11$
      your return value     : 17$
      expected output : "(null)    "$
      your output     : "(null)    -10.8s"$
      expected (nonprintable as hex) : "(null)    "$
      actual   (nonprintable as hex) : "(null)    -10.8s"$
$
Test 121 (s_prec_00_lj_s_hidden_trunc) : FAILED.$
    First line of code: {return test("%-.00s", s_hidden);}$
      expected return value : 0$
      your return value     : 5$
      expected output : ""$
      your output     : "-.00s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : "-.00s"$
$
Test 122 (s_prec_09_lj_s_hidden_notrunc) : FAILED.$
    First line of code: {return test("%-.09s", s_hidden);}$
      expected return value : 6$
      your return value     : 12$
      expected output : "hi low"$
      your output     : "hi low-.09s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low-.09s"$
$
Test 123 (s_undefbehav_0_2zero) : FAILED.$
    First line of code: {return test("%00s", s_hidden);}$
      expected return value : 6$
      your return value     : 9$
      expected output : "hi low"$
      your output     : "hi low00s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low00s"$
$
Test 124 (s_undefbehav_0_3zero) : FAILED.$
    First line of code: {return test("%000s", s_hidden);}$
      expected return value : 6$
      your return value     : 11$
      expected output : "hi low"$
      your output     : "hi low000s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low000s"$
$
Test 125 (s_undefbehav_0_4zero) : FAILED.$
    First line of code: {return test("%0000s", s_hidden);}$
      expected return value : 6$
      your return value     : 12$
      expected output : "hi low"$
      your output     : "hi low0000s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low0000s"$
$
Test 126 (s_undefbehav_0_lj_2zero) : FAILED.$
    First line of code: {return test("%-00s", s_hidden);}$
      expected return value : 6$
      your return value     : 11$
      expected output : "hi low"$
      your output     : "hi low-00s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low-00s"$
$
Test 127 (s_undefbehav_0_zero_lj_zero) : FAILED.$
    First line of code: {return test("%0-0s", s_hidden);}$
      expected return value : 6$
      your return value     : 11$
      expected output : "hi low"$
      your output     : "hi low0-0s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low0-0s"$
$
Test 128 (s_undefbehav_0_2zero_lj) : FAILED.$
    First line of code: {return test("%00-s", s_hidden);}$
      expected return value : 6$
      your return value     : 11$
      expected output : "hi low"$
      your output     : "hi low00-s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low00-s"$
$
Test 129 (s_undefbehav_0_width_3) : FAILED.$
    First line of code: {return test("%03s", s_hidden);}$
      expected return value : 6$
      your return value     : 9$
      expected output : "hi low"$
      your output     : "hi low03s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low03s"$
$
Test 130 (s_undefbehav_0_width_9) : FAILED.$
    First line of code: {return test("%09s", s_hidden);}$
      expected return value : 9$
      your return value     : 13$
      expected output : "000hi low"$
      your output     : "   hi low09s"$
      expected (nonprintable as hex) : "000hi low"$
      actual   (nonprintable as hex) : "   hi low09s"$
$
Test 131 (s_undefbehav_lj_0_width_3) : FAILED.$
    First line of code: {return test("%-03s", s_hidden);}$
      expected return value : 6$
      your return value     : 11$
      expected output : "hi low"$
      your output     : "hi low-03s"$
      expected (nonprintable as hex) : "hi low"$
      actual   (nonprintable as hex) : "hi low-03s"$
$
Test 132 (s_undefbehav_lj_0_width_9) : FAILED.$
    First line of code: {return test("%-09s", s_hidden);}$
      expected return value : 9$
      your return value     : 14$
      expected output : "hi low   "$
      your output     : "hi low   -09s"$
      expected (nonprintable as hex) : "hi low   "$
      actual   (nonprintable as hex) : "hi low   -09s"$
$
Test 133 (i_basic_i_pos) : FAILED.$
    First line of code: {return test("this %i number", 17);}$
      expected return value : 15$
      your return value     : 16$
      expected output : "this 17 number"$
      your output     : "this 17i number"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this 17i number"$
$
Test 134 (i_basic_i_neg) : FAILED.$
    First line of code: {return test("this %i number", -267);}$
      expected return value : 17$
      your return value     : 18$
      expected output : "this -267 number"$
      your output     : "this -267i number"$
      expected (nonprintable as hex) : "this -267 number"$
      actual   (nonprintable as hex) : "this -267i number"$
$
Test 135 (i_basic_i_zero) : FAILED.$
    First line of code: {return test("this %i number", 0);}$
      expected return value : 14$
      your return value     : 15$
      expected output : "this 0 number"$
      your output     : "this 0i number"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0i number"$
$
Test 136 (i_basic_i_onlypos) : FAILED.$
    First line of code: {return test("%i", 3);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "3"$
      your output     : "3i"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3i"$
$
Test 137 (i_basic_i_onlyneg) : FAILED.$
    First line of code: {return test("%i", -1);}$
      expected return value : 2$
      your return value     : 3$
      expected output : "-1"$
      your output     : "-1i"$
      expected (nonprintable as hex) : "-1"$
      actual   (nonprintable as hex) : "-1i"$
$
Test 138 (i_basic_i_onlyzero) : FAILED.$
    First line of code: {return test("%i", 0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "0"$
      your output     : "0i"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0i"$
$
Test 139 (d_basic_pos) : FAILED.$
    First line of code: {return test("this %d number", 17);}$
      expected return value : 15$
      your return value     : 16$
      expected output : "this 17 number"$
      your output     : "this 17d number"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this 17d number"$
$
Test 140 (d_basic_neg) : FAILED.$
    First line of code: {return test("this %d number", -267);}$
      expected return value : 17$
      your return value     : 18$
      expected output : "this -267 number"$
      your output     : "this -267d number"$
      expected (nonprintable as hex) : "this -267 number"$
      actual   (nonprintable as hex) : "this -267d number"$
$
Test 141 (d_basic_zero) : FAILED.$
    First line of code: {return test("this %d number", 0);}$
      expected return value : 14$
      your return value     : 15$
      expected output : "this 0 number"$
      your output     : "this 0d number"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0d number"$
$
Test 142 (i_intmax) : FAILED.$
    First line of code: {return test("%i",  2147483647);}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483647"$
      your output     : "2147483647i"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647i"$
$
Test 143 (i_intmin) : FAILED.$
    First line of code: {return test("%i", (int)(-2147483678));}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483618"$
      your output     : "2147483618i"$
      expected (nonprintable as hex) : "2147483618"$
      actual   (nonprintable as hex) : "2147483618i"$
$
Test 144 (i_width_pos_fits) : FAILED.$
    First line of code: {return test("%7i", 33);}$
      expected return value : 7$
      your return value     : 9$
      expected output : "     33"$
      your output     : "     337i"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "     337i"$
$
Test 145 (i_width_neg_fits) : FAILED.$
    First line of code: {return test("%7i", -14);}$
      expected return value : 7$
      your return value     : 9$
      expected output : "    -14"$
      your output     : "    -147i"$
      expected (nonprintable as hex) : "    -14"$
      actual   (nonprintable as hex) : "    -147i"$
$
Test 146 (i_width_zero_fits) : FAILED.$
    First line of code: {return test("%3i", 0);}$
      expected return value : 3$
      your return value     : 5$
      expected output : "  0"$
      your output     : "  03i"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "  03i"$
$
Test 147 (i_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5i", 52625);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "52625"$
      your output     : "526255i"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "526255i"$
$
Test 148 (i_width_neg_exactfit) : FAILED.$
    First line of code: {return test("%5i", -2562);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "-2562"$
      your output     : "-25625i"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-25625i"$
$
Test 149 (i_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4i", 94827);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "94827"$
      your output     : "948274i"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "948274i"$
$
Test 150 (i_width_neg_nofit) : FAILED.$
    First line of code: {return test("%4i", -2464);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "-2464"$
      your output     : "-24644i"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-24644i"$
$
Test 151 (i_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7i", 33);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "33     "$
      your output     : "33     -7i"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "33     -7i"$
$
Test 152 (i_width_neg_fits_lj) : FAILED.$
    First line of code: {return test("%-7i", -14);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "-14    "$
      your output     : "-14    -7i"$
      expected (nonprintable as hex) : "-14    "$
      actual   (nonprintable as hex) : "-14    -7i"$
$
Test 153 (i_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3i", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "0  "$
      your output     : "0  -3i"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "0  -3i"$
$
Test 154 (i_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5i", 52625);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "52625"$
      your output     : "52625-5i"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "52625-5i"$
$
Test 155 (i_width_neg_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5i", -2562);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "-2562"$
      your output     : "-2562-5i"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-2562-5i"$
$
Test 156 (i_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4i", 94827);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "94827"$
      your output     : "94827-4i"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827-4i"$
$
Test 157 (i_width_neg_nofit_lj) : FAILED.$
    First line of code: {return test("%-4i", -2464);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "-2464"$
      your output     : "-2464-4i"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-2464-4i"$
$
Test 158 (i_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5i", 2);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "00002"$
      your output     : "00002.5i"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "00002.5i"$
$
Test 159 (i_prec_fits_neg) : FAILED.$
    First line of code: {return test("%.6i", -3);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "-000003"$
      your output     : "-000003.6i"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "-000003.6i"$
$
Test 160 (i_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3i", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "000"$
      your output     : "000.3i"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "000.3i"$
$
Test 161 (i_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4i", 5263);}$
      expected return value : 4$
      your return value     : 7$
      expected output : "5263"$
      your output     : "5263.4i"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "5263.4i"$
$
Test 162 (i_prec_exactfit_neg) : FAILED.$
    First line of code: {return test("%.4i", -2372);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "-2372"$
      your output     : "-2372.4i"$
      expected (nonprintable as hex) : "-2372"$
      actual   (nonprintable as hex) : "-2372.4i"$
$
Test 163 (i_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3i", 13862);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "13862"$
      your output     : "13862.3i"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "13862.3i"$
$
Test 164 (i_prec_nofit_neg) : FAILED.$
    First line of code: {return test("%.3i",-23646);}$
      expected return value : 6$
      your return value     : 9$
      expected output : "-23646"$
      your output     : "-23646.3i"$
      expected (nonprintable as hex) : "-23646"$
      actual   (nonprintable as hex) : "-23646.3i"$
$
Test 165 (i_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05i", 43);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "00043"$
      your output     : "0004305i"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "0004305i"$
$
Test 166 (i_zp_neg_fits) : FAILED.$
    First line of code: {return test("%07i", -54);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "-000054"$
      your output     : "-00005407i"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "-00005407i"$
$
Test 167 (i_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03i", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "000"$
      your output     : "00003i"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "00003i"$
$
Test 168 (i_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03i", 634);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "634"$
      your output     : "63403i"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "63403i"$
$
Test 169 (i_zp_neg_exactfit) : FAILED.$
    First line of code: {return test("%04i", -532);}$
      expected return value : 4$
      your return value     : 7$
      expected output : "-532"$
      your output     : "-53204i"$
      expected (nonprintable as hex) : "-532"$
      actual   (nonprintable as hex) : "-53204i"$
$
Test 170 (i_zp_neg_minus1fit) : FAILED.$
    First line of code: {return test("%04i", -4825);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "-4825"$
      your output     : "-482504i"$
      expected (nonprintable as hex) : "-4825"$
      actual   (nonprintable as hex) : "-482504i"$
$
Test 171 (i_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5i", 34);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   00034"$
      your output     : "   000348.5i"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   000348.5i"$
$
Test 172 (i_prec_width_fit_fit_neg) : FAILED.$
    First line of code: {return test("%10.5i", -216);}$
      expected return value : 11$
      your return value     : 16$
      expected output : "    -00216"$
      your output     : "    -0021610.5i"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -0021610.5i"$
$
Test 173 (i_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5i", 0);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   00000"$
      your output     : "   000008.5i"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   000008.5i"$
$
Test 174 (i_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3i", 8375);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "    8375"$
      your output     : "    83758.3i"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    83758.3i"$
$
Test 175 (i_prec_width_nofit_fit_neg) : FAILED.$
    First line of code: {return test("%8.3i", -8473);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   -8473"$
      your output     : "   -84738.3i"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -84738.3i"$
$
Test 176 (i_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7i", 3267);}$
      expected return value : 7$
      your return value     : 12$
      expected output : "0003267"$
      your output     : "00032673.7i"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032673.7i"$
$
Test 177 (i_prec_width_fit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.7i", -2375);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "-0002375"$
      your output     : "-00023753.7i"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-00023753.7i"$
$
Test 178 (i_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3i", 6983);}$
      expected return value : 4$
      your return value     : 8$
      expected output : "6983"$
      your output     : "69833.3i"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69833.3i"$
$
Test 179 (i_prec_width_nofit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.3i", -8462);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "-8462"$
      your output     : "-84623.3i"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-84623.3i"$
$
Test 180 (i_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5i", 34);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "00034   "$
      your output     : "00034   -8.5i"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   -8.5i"$
$
Test 181 (i_prec_width_fit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-10.5i", -216);}$
      expected return value : 11$
      your return value     : 17$
      expected output : "-00216    "$
      your output     : "-00216    -10.5i"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "-00216    -10.5i"$
$
Test 182 (i_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5i", 0);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "00000   "$
      your output     : "00000   -8.5i"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   -8.5i"$
$
Test 183 (i_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3i", 8375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "8375    "$
      your output     : "8375    -8.3i"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    -8.3i"$
$
Test 184 (i_prec_width_nofit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-8.3i", -8473);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "-8473   "$
      your output     : "-8473   -8.3i"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "-8473   -8.3i"$
$
Test 185 (i_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7i", 3267);}$
      expected return value : 7$
      your return value     : 13$
      expected output : "0003267"$
      your output     : "0003267-3.7i"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267-3.7i"$
$
Test 186 (i_prec_width_fit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.7i", -2375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "-0002375"$
      your output     : "-0002375-3.7i"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-0002375-3.7i"$
$
Test 187 (i_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3i", 6983);}$
      expected return value : 4$
      your return value     : 9$
      expected output : "6983"$
      your output     : "6983-3.3i"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983-3.3i"$
$
Test 188 (i_prec_width_nofit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.3i", -8462);}$
      expected return value : 5$
      your return value     : 11$
      expected output : "-8462"$
      your output     : "-8462-3.3i"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-8462-3.3i"$
$
Test 189 (i_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5i", 34);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   00034"$
      your output     : "   0003408.5i"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   0003408.5i"$
$
Test 190 (i_prec_width_ff_neg_zp) : FAILED.$
    First line of code: {return test("%010.5i", -216);}$
      expected return value : 11$
      your return value     : 17$
      expected output : "    -00216"$
      your output     : "    -00216010.5i"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -00216010.5i"$
$
Test 191 (i_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5i", 0);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   00000"$
      your output     : "   0000008.5i"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   0000008.5i"$
$
Test 192 (i_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3i", 8375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "    8375"$
      your output     : "    837508.3i"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    837508.3i"$
$
Test 193 (i_prec_width_nf_neg_zp) : FAILED.$
    First line of code: {return test("%08.3i", -8473);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   -8473"$
      your output     : "   -847308.3i"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -847308.3i"$
$
Test 194 (i_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7i", 3267);}$
      expected return value : 7$
      your return value     : 13$
      expected output : "0003267"$
      your output     : "000326703.7i"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "000326703.7i"$
$
Test 195 (i_prec_width_fn_neg_zp) : FAILED.$
    First line of code: {return test("%03.7i", -2375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "-0002375"$
      your output     : "-000237503.7i"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-000237503.7i"$
$
Test 196 (i_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3i", 6983);}$
      expected return value : 4$
      your return value     : 9$
      expected output : "6983"$
      your output     : "698303.3i"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "698303.3i"$
$
Test 197 (i_prec_width_nn_neg_zp) : FAILED.$
    First line of code: {return test("%03.3i", -8462);}$
      expected return value : 5$
      your return value     : 11$
      expected output : "-8462"$
      your output     : "-846203.3i"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-846203.3i"$
$
Test 198 (i_prec_width_ff_pos_lj_zp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5i", 34);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "00034   "$
      your output     : "00034   0-8.5i"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   0-8.5i"$
$
Test 199 (i_prec_width_ff_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-10.5i", -216);}$
      expected return value : 11$
      your return value     : 18$
      expected output : "-00216    "$
      your output     : "-00216    0-10.5i"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "-00216    0-10.5i"$
$
Test 200 (i_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5i", 0);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "00000   "$
      your output     : "00000   0-8.5i"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   0-8.5i"$
$
Test 201 (i_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3i", 8375);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "8375    "$
      your output     : "8375    0-8.3i"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    0-8.3i"$
$
Test 202 (i_prec_width_nf_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3i", -8473);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "-8473   "$
      your output     : "-8473   0-8.3i"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "-8473   0-8.3i"$
$
Test 203 (i_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7i", 3267);}$
      expected return value : 7$
      your return value     : 14$
      expected output : "0003267"$
      your output     : "00032670-3.7i"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032670-3.7i"$
$
Test 204 (i_prec_width_fn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7i", -2375);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "-0002375"$
      your output     : "-00023750-3.7i"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-00023750-3.7i"$
$
Test 205 (i_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3i", 6983);}$
      expected return value : 4$
      your return value     : 11$
      expected output : "6983"$
      your output     : "69830-3.3i"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69830-3.3i"$
$
Test 206 (i_prec_width_nn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3i", -8462);}$
      expected return value : 5$
      your return value     : 12$
      expected output : "-8462"$
      your output     : "-84620-3.3i"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-84620-3.3i"$
$
Test 207 (i_size_follows_i_i) : FAILED.$
    First line of code: {return test("[%i] [%i]", i_pos_1, i_pos_1);}$
      expected return value : 18$
      your return value     : 20$
      expected output : "[878023] [878023]"$
      your output     : "[878023i] [878023i]"$
      expected (nonprintable as hex) : "[878023] [878023]"$
      actual   (nonprintable as hex) : "[878023i] [878023i]"$
$
Test 208 (i_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0i", 0);}$
      expected return value : 0$
      your return value     : 3$
      expected output : ""$
      your output     : ".0i"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0i"$
$
Test 209 (i_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.i", 0);}$
      expected return value : 0$
      your return value     : 2$
      expected output : ""$
      your output     : ".i"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".i"$
$
Test 210 (i_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0i", 0);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "     "$
      your output     : "     5.0i"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.0i"$
$
Test 211 (i_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.i", 0);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "     "$
      your output     : "     5.i"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.i"$
$
Test 212 (i_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0i", 0);}$
      expected return value : 5$
      your return value     : 11$
      expected output : "     "$
      your output     : "     -5.0i"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.0i"$
$
Test 213 (i_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.i", 0);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "     "$
      your output     : "     -5.i"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.i"$
$
Test 214 (d_basic_i_pos) : FAILED.$
    First line of code: {return test("this %d number", 17);}$
      expected return value : 15$
      your return value     : 16$
      expected output : "this 17 number"$
      your output     : "this 17d number"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this 17d number"$
$
Test 215 (d_basic_i_neg) : FAILED.$
    First line of code: {return test("this %d number", -267);}$
      expected return value : 17$
      your return value     : 18$
      expected output : "this -267 number"$
      your output     : "this -267d number"$
      expected (nonprintable as hex) : "this -267 number"$
      actual   (nonprintable as hex) : "this -267d number"$
$
Test 216 (d_basic_i_zero) : FAILED.$
    First line of code: {return test("this %d number", 0);}$
      expected return value : 14$
      your return value     : 15$
      expected output : "this 0 number"$
      your output     : "this 0d number"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0d number"$
$
Test 217 (d_basic_i_onlypos) : FAILED.$
    First line of code: {return test("%d", 3);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "3"$
      your output     : "3d"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3d"$
$
Test 218 (d_basic_i_onlyneg) : FAILED.$
    First line of code: {return test("%d", -1);}$
      expected return value : 2$
      your return value     : 3$
      expected output : "-1"$
      your output     : "-1d"$
      expected (nonprintable as hex) : "-1"$
      actual   (nonprintable as hex) : "-1d"$
$
Test 219 (d_basic_i_onlyzero) : FAILED.$
    First line of code: {return test("%d", 0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "0"$
      your output     : "0d"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0d"$
$
Test 220 (d_intmax) : FAILED.$
    First line of code: {return test("%d",  2147483647);}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483647"$
      your output     : "2147483647d"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647d"$
$
Test 221 (d_intmin) : FAILED.$
    First line of code: {return test("%d", (int)(-2147483678));}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483618"$
      your output     : "2147483618d"$
      expected (nonprintable as hex) : "2147483618"$
      actual   (nonprintable as hex) : "2147483618d"$
$
Test 222 (d_width_pos_fits) : FAILED.$
    First line of code: {return test("%7d", 33);}$
      expected return value : 7$
      your return value     : 9$
      expected output : "     33"$
      your output     : "     337d"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "     337d"$
$
Test 223 (d_width_neg_fits) : FAILED.$
    First line of code: {return test("%7d", -14);}$
      expected return value : 7$
      your return value     : 9$
      expected output : "    -14"$
      your output     : "    -147d"$
      expected (nonprintable as hex) : "    -14"$
      actual   (nonprintable as hex) : "    -147d"$
$
Test 224 (d_width_zero_fits) : FAILED.$
    First line of code: {return test("%3d", 0);}$
      expected return value : 3$
      your return value     : 5$
      expected output : "  0"$
      your output     : "  03d"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "  03d"$
$
Test 225 (d_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5d", 52625);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "52625"$
      your output     : "526255d"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "526255d"$
$
Test 226 (d_width_neg_exactfit) : FAILED.$
    First line of code: {return test("%5d", -2562);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "-2562"$
      your output     : "-25625d"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-25625d"$
$
Test 227 (d_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4d", 94827);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "94827"$
      your output     : "948274d"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "948274d"$
$
Test 228 (d_width_neg_nofit) : FAILED.$
    First line of code: {return test("%4d", -2464);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "-2464"$
      your output     : "-24644d"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-24644d"$
$
Test 229 (d_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7d", 33);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "33     "$
      your output     : "33     -7d"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "33     -7d"$
$
Test 230 (d_width_neg_fits_lj) : FAILED.$
    First line of code: {return test("%-7d", -14);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "-14    "$
      your output     : "-14    -7d"$
      expected (nonprintable as hex) : "-14    "$
      actual   (nonprintable as hex) : "-14    -7d"$
$
Test 231 (d_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3d", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "0  "$
      your output     : "0  -3d"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "0  -3d"$
$
Test 232 (d_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5d", 52625);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "52625"$
      your output     : "52625-5d"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "52625-5d"$
$
Test 233 (d_width_neg_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5d", -2562);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "-2562"$
      your output     : "-2562-5d"$
      expected (nonprintable as hex) : "-2562"$
      actual   (nonprintable as hex) : "-2562-5d"$
$
Test 234 (d_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4d", 94827);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "94827"$
      your output     : "94827-4d"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827-4d"$
$
Test 235 (d_width_neg_nofit_lj) : FAILED.$
    First line of code: {return test("%-4d", -2464);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "-2464"$
      your output     : "-2464-4d"$
      expected (nonprintable as hex) : "-2464"$
      actual   (nonprintable as hex) : "-2464-4d"$
$
Test 236 (d_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5d", 2);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "00002"$
      your output     : "00002.5d"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "00002.5d"$
$
Test 237 (d_prec_fits_neg) : FAILED.$
    First line of code: {return test("%.6d", -3);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "-000003"$
      your output     : "-000003.6d"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "-000003.6d"$
$
Test 238 (d_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3d", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "000"$
      your output     : "000.3d"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "000.3d"$
$
Test 239 (d_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4d", 5263);}$
      expected return value : 4$
      your return value     : 7$
      expected output : "5263"$
      your output     : "5263.4d"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "5263.4d"$
$
Test 240 (d_prec_exactfit_neg) : FAILED.$
    First line of code: {return test("%.4d", -2372);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "-2372"$
      your output     : "-2372.4d"$
      expected (nonprintable as hex) : "-2372"$
      actual   (nonprintable as hex) : "-2372.4d"$
$
Test 241 (d_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3d", 13862);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "13862"$
      your output     : "13862.3d"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "13862.3d"$
$
Test 242 (d_prec_nofit_neg) : FAILED.$
    First line of code: {return test("%.3d",-23646);}$
      expected return value : 6$
      your return value     : 9$
      expected output : "-23646"$
      your output     : "-23646.3d"$
      expected (nonprintable as hex) : "-23646"$
      actual   (nonprintable as hex) : "-23646.3d"$
$
Test 243 (d_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05d", 43);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "00043"$
      your output     : "0004305d"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "0004305d"$
$
Test 244 (d_zp_neg_fits) : FAILED.$
    First line of code: {return test("%07d", -54);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "-000054"$
      your output     : "-00005407d"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "-00005407d"$
$
Test 245 (d_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03d", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "000"$
      your output     : "00003d"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "00003d"$
$
Test 246 (d_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03d", 634);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "634"$
      your output     : "63403d"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "63403d"$
$
Test 247 (d_zp_neg_exactfit) : FAILED.$
    First line of code: {return test("%04d", -532);}$
      expected return value : 4$
      your return value     : 7$
      expected output : "-532"$
      your output     : "-53204d"$
      expected (nonprintable as hex) : "-532"$
      actual   (nonprintable as hex) : "-53204d"$
$
Test 248 (d_zp_neg_minus1fit) : FAILED.$
    First line of code: {return test("%04d", -4825);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "-4825"$
      your output     : "-482504d"$
      expected (nonprintable as hex) : "-4825"$
      actual   (nonprintable as hex) : "-482504d"$
$
Test 249 (d_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5d", 34);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   00034"$
      your output     : "   000348.5d"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   000348.5d"$
$
Test 250 (d_prec_width_fit_fit_neg) : FAILED.$
    First line of code: {return test("%10.5d", -216);}$
      expected return value : 11$
      your return value     : 16$
      expected output : "    -00216"$
      your output     : "    -0021610.5d"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -0021610.5d"$
$
Test 251 (d_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5d", 0);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   00000"$
      your output     : "   000008.5d"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   000008.5d"$
$
Test 252 (d_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3d", 8375);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "    8375"$
      your output     : "    83758.3d"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    83758.3d"$
$
Test 253 (d_prec_width_nofit_fit_neg) : FAILED.$
    First line of code: {return test("%8.3d", -8473);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   -8473"$
      your output     : "   -84738.3d"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -84738.3d"$
$
Test 254 (d_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7d", 3267);}$
      expected return value : 7$
      your return value     : 12$
      expected output : "0003267"$
      your output     : "00032673.7d"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032673.7d"$
$
Test 255 (d_prec_width_fit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.7d", -2375);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "-0002375"$
      your output     : "-00023753.7d"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-00023753.7d"$
$
Test 256 (d_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3d", 6983);}$
      expected return value : 4$
      your return value     : 8$
      expected output : "6983"$
      your output     : "69833.3d"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69833.3d"$
$
Test 257 (d_prec_width_nofit_nofit_neg) : FAILED.$
    First line of code: {return test("%3.3d", -8462);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "-8462"$
      your output     : "-84623.3d"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-84623.3d"$
$
Test 258 (d_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5d", 34);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "00034   "$
      your output     : "00034   -8.5d"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   -8.5d"$
$
Test 259 (d_prec_width_fit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-10.5d", -216);}$
      expected return value : 11$
      your return value     : 17$
      expected output : "-00216    "$
      your output     : "-00216    -10.5d"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "-00216    -10.5d"$
$
Test 260 (d_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5d", 0);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "00000   "$
      your output     : "00000   -8.5d"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   -8.5d"$
$
Test 261 (d_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3d", 8375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "8375    "$
      your output     : "8375    -8.3d"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    -8.3d"$
$
Test 262 (d_prec_width_nofit_fit_neg_lj) : FAILED.$
    First line of code: {return test("%-8.3d", -8473);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "-8473   "$
      your output     : "-8473   -8.3d"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "-8473   -8.3d"$
$
Test 263 (d_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7d", 3267);}$
      expected return value : 7$
      your return value     : 13$
      expected output : "0003267"$
      your output     : "0003267-3.7d"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267-3.7d"$
$
Test 264 (d_prec_width_fit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.7d", -2375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "-0002375"$
      your output     : "-0002375-3.7d"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-0002375-3.7d"$
$
Test 265 (d_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3d", 6983);}$
      expected return value : 4$
      your return value     : 9$
      expected output : "6983"$
      your output     : "6983-3.3d"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983-3.3d"$
$
Test 266 (d_prec_width_nofit_nofit_neg_lj) : FAILED.$
    First line of code: {return test("%-3.3d", -8462);}$
      expected return value : 5$
      your return value     : 11$
      expected output : "-8462"$
      your output     : "-8462-3.3d"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-8462-3.3d"$
$
Test 267 (d_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5d", 34);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   00034"$
      your output     : "   0003408.5d"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   0003408.5d"$
$
Test 268 (d_prec_width_ff_neg_zp) : FAILED.$
    First line of code: {return test("%010.5d", -216);}$
      expected return value : 11$
      your return value     : 17$
      expected output : "    -00216"$
      your output     : "    -00216010.5d"$
      expected (nonprintable as hex) : "    -00216"$
      actual   (nonprintable as hex) : "    -00216010.5d"$
$
Test 269 (d_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5d", 0);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   00000"$
      your output     : "   0000008.5d"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   0000008.5d"$
$
Test 270 (d_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3d", 8375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "    8375"$
      your output     : "    837508.3d"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    837508.3d"$
$
Test 271 (d_prec_width_nf_neg_zp) : FAILED.$
    First line of code: {return test("%08.3d", -8473);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   -8473"$
      your output     : "   -847308.3d"$
      expected (nonprintable as hex) : "   -8473"$
      actual   (nonprintable as hex) : "   -847308.3d"$
$
Test 272 (d_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7d", 3267);}$
      expected return value : 7$
      your return value     : 13$
      expected output : "0003267"$
      your output     : "000326703.7d"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "000326703.7d"$
$
Test 273 (d_prec_width_fn_neg_zp) : FAILED.$
    First line of code: {return test("%03.7d", -2375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "-0002375"$
      your output     : "-000237503.7d"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-000237503.7d"$
$
Test 274 (d_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3d", 6983);}$
      expected return value : 4$
      your return value     : 9$
      expected output : "6983"$
      your output     : "698303.3d"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "698303.3d"$
$
Test 275 (d_prec_width_nn_neg_zp) : FAILED.$
    First line of code: {return test("%03.3d", -8462);}$
      expected return value : 5$
      your return value     : 11$
      expected output : "-8462"$
      your output     : "-846203.3d"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-846203.3d"$
$
Test 276 (d_prec_width_ff_pos_lj_zp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5d", 34);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "00034   "$
      your output     : "00034   0-8.5d"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   0-8.5d"$
$
Test 277 (d_prec_width_ff_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-10.5d", -216);}$
      expected return value : 11$
      your return value     : 18$
      expected output : "-00216    "$
      your output     : "-00216    0-10.5d"$
      expected (nonprintable as hex) : "-00216    "$
      actual   (nonprintable as hex) : "-00216    0-10.5d"$
$
Test 278 (d_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5d", 0);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "00000   "$
      your output     : "00000   0-8.5d"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   0-8.5d"$
$
Test 279 (d_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3d", 8375);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "8375    "$
      your output     : "8375    0-8.3d"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    0-8.3d"$
$
Test 280 (d_prec_width_nf_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3d", -8473);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "-8473   "$
      your output     : "-8473   0-8.3d"$
      expected (nonprintable as hex) : "-8473   "$
      actual   (nonprintable as hex) : "-8473   0-8.3d"$
$
Test 281 (d_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7d", 3267);}$
      expected return value : 7$
      your return value     : 14$
      expected output : "0003267"$
      your output     : "00032670-3.7d"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032670-3.7d"$
$
Test 282 (d_prec_width_fn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7d", -2375);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "-0002375"$
      your output     : "-00023750-3.7d"$
      expected (nonprintable as hex) : "-0002375"$
      actual   (nonprintable as hex) : "-00023750-3.7d"$
$
Test 283 (d_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3d", 6983);}$
      expected return value : 4$
      your return value     : 11$
      expected output : "6983"$
      your output     : "69830-3.3d"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69830-3.3d"$
$
Test 284 (d_prec_width_nn_neg_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3d", -8462);}$
      expected return value : 5$
      your return value     : 12$
      expected output : "-8462"$
      your output     : "-84620-3.3d"$
      expected (nonprintable as hex) : "-8462"$
      actual   (nonprintable as hex) : "-84620-3.3d"$
$
Test 285 (d_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0d", 0);}$
      expected return value : 0$
      your return value     : 3$
      expected output : ""$
      your output     : ".0d"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0d"$
$
Test 286 (d_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.d", 0);}$
      expected return value : 0$
      your return value     : 2$
      expected output : ""$
      your output     : ".d"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".d"$
$
Test 287 (d_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0d", 0);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "     "$
      your output     : "     5.0d"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.0d"$
$
Test 288 (d_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.d", 0);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "     "$
      your output     : "     5.d"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.d"$
$
Test 289 (d_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0d", 0);}$
      expected return value : 5$
      your return value     : 11$
      expected output : "     "$
      your output     : "     -5.0d"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.0d"$
$
Test 290 (d_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.d", 0);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "     "$
      your output     : "     -5.d"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.d"$
$
Test 291 (u_basic_u_pos) : FAILED.$
    First line of code: {return test("this %u number", 17);}$
      expected return value : 15$
      your return value     : 16$
      expected output : "this 17 number"$
      your output     : "this 17u number"$
      expected (nonprintable as hex) : "this 17 number"$
      actual   (nonprintable as hex) : "this 17u number"$
$
Test 292 (u_basic_u_zero) : FAILED.$
    First line of code: {return test("this %u number", 0);}$
      expected return value : 14$
      your return value     : 15$
      expected output : "this 0 number"$
      your output     : "this 0u number"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0u number"$
$
Test 293 (u_basic_u_onlypos) : FAILED.$
    First line of code: {return test("%u", 3);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "3"$
      your output     : "3u"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3u"$
$
Test 294 (u_uintmax) : FAILED.$
    First line of code: {return test("%u", 4294967295u);}$
      expected return value : 11$
      your return value     : 12$
      expected output : "4294967295"$
      your output     : "4294967295u"$
      expected (nonprintable as hex) : "4294967295"$
      actual   (nonprintable as hex) : "4294967295u"$
$
Test 295 (u_width_pos_fits) : FAILED.$
    First line of code: {return test("%7u", 33);}$
      expected return value : 7$
      your return value     : 9$
      expected output : "     33"$
      your output     : "     337u"$
      expected (nonprintable as hex) : "     33"$
      actual   (nonprintable as hex) : "     337u"$
$
Test 296 (u_width_zero_fits) : FAILED.$
    First line of code: {return test("%3u", 0);}$
      expected return value : 3$
      your return value     : 5$
      expected output : "  0"$
      your output     : "  03u"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "  03u"$
$
Test 297 (u_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5u", 52625);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "52625"$
      your output     : "526255u"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "526255u"$
$
Test 298 (u_width_pos_nofit) : FAILED.$
    First line of code: {return test("%4u", 94827);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "94827"$
      your output     : "948274u"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "948274u"$
$
Test 299 (u_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7u", 33);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "33     "$
      your output     : "33     -7u"$
      expected (nonprintable as hex) : "33     "$
      actual   (nonprintable as hex) : "33     -7u"$
$
Test 300 (u_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3u", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "0  "$
      your output     : "0  -3u"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "0  -3u"$
$
Test 301 (u_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5u", 52625);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "52625"$
      your output     : "52625-5u"$
      expected (nonprintable as hex) : "52625"$
      actual   (nonprintable as hex) : "52625-5u"$
$
Test 302 (u_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4u", 94827);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "94827"$
      your output     : "94827-4u"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827-4u"$
$
Test 303 (u_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5u", 2);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "00002"$
      your output     : "00002.5u"$
      expected (nonprintable as hex) : "00002"$
      actual   (nonprintable as hex) : "00002.5u"$
$
Test 304 (u_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3u", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "000"$
      your output     : "000.3u"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "000.3u"$
$
Test 305 (u_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4u", 5263);}$
      expected return value : 4$
      your return value     : 7$
      expected output : "5263"$
      your output     : "5263.4u"$
      expected (nonprintable as hex) : "5263"$
      actual   (nonprintable as hex) : "5263.4u"$
$
Test 306 (u_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3u", 13862);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "13862"$
      your output     : "13862.3u"$
      expected (nonprintable as hex) : "13862"$
      actual   (nonprintable as hex) : "13862.3u"$
$
Test 307 (u_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05u", 43);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "00043"$
      your output     : "0004305u"$
      expected (nonprintable as hex) : "00043"$
      actual   (nonprintable as hex) : "0004305u"$
$
Test 308 (u_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03u", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "000"$
      your output     : "00003u"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "00003u"$
$
Test 309 (u_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03u", 634);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "634"$
      your output     : "63403u"$
      expected (nonprintable as hex) : "634"$
      actual   (nonprintable as hex) : "63403u"$
$
Test 310 (u_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5u", 34);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   00034"$
      your output     : "   000348.5u"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   000348.5u"$
$
Test 311 (u_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5u", 0);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   00000"$
      your output     : "   000008.5u"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   000008.5u"$
$
Test 312 (u_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3u", 8375);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "    8375"$
      your output     : "    83758.3u"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    83758.3u"$
$
Test 313 (u_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.7u", 3267);}$
      expected return value : 7$
      your return value     : 12$
      expected output : "0003267"$
      your output     : "00032673.7u"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032673.7u"$
$
Test 314 (u_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3u", 6983);}$
      expected return value : 4$
      your return value     : 8$
      expected output : "6983"$
      your output     : "69833.3u"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69833.3u"$
$
Test 315 (u_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5u", 34);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "00034   "$
      your output     : "00034   -8.5u"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   -8.5u"$
$
Test 316 (u_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5u", 0);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "00000   "$
      your output     : "00000   -8.5u"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   -8.5u"$
$
Test 317 (u_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3u", 8375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "8375    "$
      your output     : "8375    -8.3u"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    -8.3u"$
$
Test 318 (u_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.7u", 3267);}$
      expected return value : 7$
      your return value     : 13$
      expected output : "0003267"$
      your output     : "0003267-3.7u"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "0003267-3.7u"$
$
Test 319 (u_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3u", 6983);}$
      expected return value : 4$
      your return value     : 9$
      expected output : "6983"$
      your output     : "6983-3.3u"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "6983-3.3u"$
$
Test 320 (u_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5u", 34);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   00034"$
      your output     : "   0003408.5u"$
      expected (nonprintable as hex) : "   00034"$
      actual   (nonprintable as hex) : "   0003408.5u"$
$
Test 321 (u_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5u", 0);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   00000"$
      your output     : "   0000008.5u"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   0000008.5u"$
$
Test 322 (u_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3u", 8375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "    8375"$
      your output     : "    837508.3u"$
      expected (nonprintable as hex) : "    8375"$
      actual   (nonprintable as hex) : "    837508.3u"$
$
Test 323 (u_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%03.7u", 3267);}$
      expected return value : 7$
      your return value     : 13$
      expected output : "0003267"$
      your output     : "000326703.7u"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "000326703.7u"$
$
Test 324 (u_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3u", 6983);}$
      expected return value : 4$
      your return value     : 9$
      expected output : "6983"$
      your output     : "698303.3u"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "698303.3u"$
$
Test 325 (u_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5u", 34);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "00034   "$
      your output     : "00034   0-8.5u"$
      expected (nonprintable as hex) : "00034   "$
      actual   (nonprintable as hex) : "00034   0-8.5u"$
$
Test 326 (u_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5u", 0);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "00000   "$
      your output     : "00000   0-8.5u"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   0-8.5u"$
$
Test 327 (u_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3u", 8375);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "8375    "$
      your output     : "8375    0-8.3u"$
      expected (nonprintable as hex) : "8375    "$
      actual   (nonprintable as hex) : "8375    0-8.3u"$
$
Test 328 (u_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.7u", 3267);}$
      expected return value : 7$
      your return value     : 14$
      expected output : "0003267"$
      your output     : "00032670-3.7u"$
      expected (nonprintable as hex) : "0003267"$
      actual   (nonprintable as hex) : "00032670-3.7u"$
$
Test 329 (u_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3u", 6983);}$
      expected return value : 4$
      your return value     : 11$
      expected output : "6983"$
      your output     : "69830-3.3u"$
      expected (nonprintable as hex) : "6983"$
      actual   (nonprintable as hex) : "69830-3.3u"$
$
Test 330 (u_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0u", 0);}$
      expected return value : 0$
      your return value     : 3$
      expected output : ""$
      your output     : ".0u"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0u"$
$
Test 331 (u_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.u", 0);}$
      expected return value : 0$
      your return value     : 2$
      expected output : ""$
      your output     : ".u"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".u"$
$
Test 332 (u_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0u", 0);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "     "$
      your output     : "     5.0u"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.0u"$
$
Test 333 (u_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.u", 0);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "     "$
      your output     : "     5.u"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.u"$
$
Test 334 (u_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0u", 0);}$
      expected return value : 5$
      your return value     : 11$
      expected output : "     "$
      your output     : "     -5.0u"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.0u"$
$
Test 335 (u_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.u", 0);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "     "$
      your output     : "     -5.u"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.u"$
$
Test 336 (x_basic_pos) : FAILED.$
    First line of code: {return test("this %x number", 17);}$
      expected return value : 15$
      your return value     : 16$
      expected output : "this 11 number"$
      your output     : "this 11x number"$
      expected (nonprintable as hex) : "this 11 number"$
      actual   (nonprintable as hex) : "this 11x number"$
$
Test 337 (x_basic_zero) : FAILED.$
    First line of code: {return test("this %x number", 0);}$
      expected return value : 14$
      your return value     : 15$
      expected output : "this 0 number"$
      your output     : "this 0x number"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0x number"$
$
Test 338 (x_basic_onlypos) : FAILED.$
    First line of code: {return test("%x", 3);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "3"$
      your output     : "3x"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3x"$
$
Test 339 (x_hexlmax) : FAILED.$
    First line of code: {return test("%x", 4294967295u);}$
      expected return value : 8$
      your return value     : 9$
      expected output : "ffffffff"$
      your output     : "ffffffffx"$
      expected (nonprintable as hex) : "ffffffff"$
      actual   (nonprintable as hex) : "ffffffffx"$
$
Test 340 (x_width_pos_fits) : FAILED.$
    First line of code: {return test("%7x", 33);}$
      expected return value : 7$
      your return value     : 9$
      expected output : "     21"$
      your output     : "     217x"$
      expected (nonprintable as hex) : "     21"$
      actual   (nonprintable as hex) : "     217x"$
$
Test 341 (x_width_zero_fits) : FAILED.$
    First line of code: {return test("%3x", 0);}$
      expected return value : 3$
      your return value     : 5$
      expected output : "  0"$
      your output     : "  03x"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "  03x"$
$
Test 342 (x_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5x", 52625);}$
      expected return value : 5$
      your return value     : 7$
      expected output : " cd91"$
      your output     : " cd915x"$
      expected (nonprintable as hex) : " cd91"$
      actual   (nonprintable as hex) : " cd915x"$
$
Test 343 (x_width_pos_nofit) : FAILED.$
    First line of code: {return test("%2x", 94827);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "1726b"$
      your output     : "1726b2x"$
      expected (nonprintable as hex) : "1726b"$
      actual   (nonprintable as hex) : "1726b2x"$
$
Test 344 (x_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7x", 33);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "21     "$
      your output     : "21     -7x"$
      expected (nonprintable as hex) : "21     "$
      actual   (nonprintable as hex) : "21     -7x"$
$
Test 345 (x_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3x", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "0  "$
      your output     : "0  -3x"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "0  -3x"$
$
Test 346 (x_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5x", 52625);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "cd91 "$
      your output     : "cd91 -5x"$
      expected (nonprintable as hex) : "cd91 "$
      actual   (nonprintable as hex) : "cd91 -5x"$
$
Test 347 (x_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4x", 9648627);}$
      expected return value : 6$
      your return value     : 9$
      expected output : "9339f3"$
      your output     : "9339f3-4x"$
      expected (nonprintable as hex) : "9339f3"$
      actual   (nonprintable as hex) : "9339f3-4x"$
$
Test 348 (x_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5x", 21);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "00015"$
      your output     : "00015.5x"$
      expected (nonprintable as hex) : "00015"$
      actual   (nonprintable as hex) : "00015.5x"$
$
Test 349 (x_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3x", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "000"$
      your output     : "000.3x"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "000.3x"$
$
Test 350 (x_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4x", 5263);}$
      expected return value : 4$
      your return value     : 7$
      expected output : "148f"$
      your output     : "148f.4x"$
      expected (nonprintable as hex) : "148f"$
      actual   (nonprintable as hex) : "148f.4x"$
$
Test 351 (x_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3x", 938862);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "e536e"$
      your output     : "e536e.3x"$
      expected (nonprintable as hex) : "e536e"$
      actual   (nonprintable as hex) : "e536e.3x"$
$
Test 352 (x_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05x", 43);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "0002b"$
      your output     : "0002b05x"$
      expected (nonprintable as hex) : "0002b"$
      actual   (nonprintable as hex) : "0002b05x"$
$
Test 353 (x_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03x", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "000"$
      your output     : "00003x"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "00003x"$
$
Test 354 (x_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03x", 698334);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "aa7de"$
      your output     : "aa7de03x"$
      expected (nonprintable as hex) : "aa7de"$
      actual   (nonprintable as hex) : "aa7de03x"$
$
Test 355 (x_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5x", 34);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   00022"$
      your output     : "   000228.5x"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "   000228.5x"$
$
Test 356 (x_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5x", 0);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   00000"$
      your output     : "   000008.5x"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   000008.5x"$
$
Test 357 (x_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3x", 8375);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "    20b7"$
      your output     : "    20b78.3x"$
      expected (nonprintable as hex) : "    20b7"$
      actual   (nonprintable as hex) : "    20b78.3x"$
$
Test 358 (x_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%2.7x", 3267);}$
      expected return value : 7$
      your return value     : 12$
      expected output : "0000cc3"$
      your output     : "0000cc32.7x"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "0000cc32.7x"$
$
Test 359 (x_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3x", 6983);}$
      expected return value : 4$
      your return value     : 8$
      expected output : "1b47"$
      your output     : "1b473.3x"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "1b473.3x"$
$
Test 360 (x_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5x", 34);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "00022   "$
      your output     : "00022   -8.5x"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "00022   -8.5x"$
$
Test 361 (x_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5x", 0);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "00000   "$
      your output     : "00000   -8.5x"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   -8.5x"$
$
Test 362 (x_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3x", 8375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "20b7    "$
      your output     : "20b7    -8.3x"$
      expected (nonprintable as hex) : "20b7    "$
      actual   (nonprintable as hex) : "20b7    -8.3x"$
$
Test 363 (x_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-2.7x", 3267);}$
      expected return value : 7$
      your return value     : 13$
      expected output : "0000cc3"$
      your output     : "0000cc3-2.7x"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "0000cc3-2.7x"$
$
Test 364 (x_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3x", 6983);}$
      expected return value : 4$
      your return value     : 9$
      expected output : "1b47"$
      your output     : "1b47-3.3x"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "1b47-3.3x"$
$
Test 365 (x_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5x", 34);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   00022"$
      your output     : "   0002208.5x"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "   0002208.5x"$
$
Test 366 (x_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5x", 0);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   00000"$
      your output     : "   0000008.5x"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   0000008.5x"$
$
Test 367 (x_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3x", 8375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "    20b7"$
      your output     : "    20b708.3x"$
      expected (nonprintable as hex) : "    20b7"$
      actual   (nonprintable as hex) : "    20b708.3x"$
$
Test 368 (x_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%02.7x", 3267);}$
      expected return value : 7$
      your return value     : 13$
      expected output : "0000cc3"$
      your output     : "0000cc302.7x"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "0000cc302.7x"$
$
Test 369 (x_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3x", 6983);}$
      expected return value : 4$
      your return value     : 9$
      expected output : "1b47"$
      your output     : "1b4703.3x"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "1b4703.3x"$
$
Test 370 (x_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5x", 34);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "00022   "$
      your output     : "00022   0-8.5x"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "00022   0-8.5x"$
$
Test 371 (x_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5x", 0);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "00000   "$
      your output     : "00000   0-8.5x"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   0-8.5x"$
$
Test 372 (x_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3x", 8375);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "20b7    "$
      your output     : "20b7    0-8.3x"$
      expected (nonprintable as hex) : "20b7    "$
      actual   (nonprintable as hex) : "20b7    0-8.3x"$
$
Test 373 (x_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-2.7x", 3267);}$
      expected return value : 7$
      your return value     : 14$
      expected output : "0000cc3"$
      your output     : "0000cc30-2.7x"$
      expected (nonprintable as hex) : "0000cc3"$
      actual   (nonprintable as hex) : "0000cc30-2.7x"$
$
Test 374 (x_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3x", 6983);}$
      expected return value : 4$
      your return value     : 11$
      expected output : "1b47"$
      your output     : "1b470-3.3x"$
      expected (nonprintable as hex) : "1b47"$
      actual   (nonprintable as hex) : "1b470-3.3x"$
$
Test 375 (x_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0x", 0);}$
      expected return value : 0$
      your return value     : 3$
      expected output : ""$
      your output     : ".0x"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0x"$
$
Test 376 (x_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.x", 0);}$
      expected return value : 0$
      your return value     : 2$
      expected output : ""$
      your output     : ".x"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".x"$
$
Test 377 (x_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0x", 0);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "     "$
      your output     : "     5.0x"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.0x"$
$
Test 378 (x_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.x", 0);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "     "$
      your output     : "     5.x"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.x"$
$
Test 379 (x_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0x", 0);}$
      expected return value : 5$
      your return value     : 11$
      expected output : "     "$
      your output     : "     -5.0x"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.0x"$
$
Test 380 (x_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.x", 0);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "     "$
      your output     : "     -5.x"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.x"$
$
Test 381 (X_basic_hexu_pos) : FAILED.$
    First line of code: {return test("this %X number", 17);}$
      expected return value : 15$
      your return value     : 16$
      expected output : "this 11 number"$
      your output     : "this 11X number"$
      expected (nonprintable as hex) : "this 11 number"$
      actual   (nonprintable as hex) : "this 11X number"$
$
Test 382 (X_basic_hexu_zero) : FAILED.$
    First line of code: {return test("this %X number", 0);}$
      expected return value : 14$
      your return value     : 15$
      expected output : "this 0 number"$
      your output     : "this 0X number"$
      expected (nonprintable as hex) : "this 0 number"$
      actual   (nonprintable as hex) : "this 0X number"$
$
Test 383 (X_basic_hexu_onlypos) : FAILED.$
    First line of code: {return test("%X", 3);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "3"$
      your output     : "3X"$
      expected (nonprintable as hex) : "3"$
      actual   (nonprintable as hex) : "3X"$
$
Test 384 (X_hexumax) : FAILED.$
    First line of code: {return test("%X", 4294967295u);}$
      expected return value : 8$
      your return value     : 9$
      expected output : "FFFFFFFF"$
      your output     : "FFFFFFFFX"$
      expected (nonprintable as hex) : "FFFFFFFF"$
      actual   (nonprintable as hex) : "FFFFFFFFX"$
$
Test 385 (X_width_pos_fits) : FAILED.$
    First line of code: {return test("%7X", 33);}$
      expected return value : 7$
      your return value     : 9$
      expected output : "     21"$
      your output     : "     217X"$
      expected (nonprintable as hex) : "     21"$
      actual   (nonprintable as hex) : "     217X"$
$
Test 386 (X_width_zero_fits) : FAILED.$
    First line of code: {return test("%3X", 0);}$
      expected return value : 3$
      your return value     : 5$
      expected output : "  0"$
      your output     : "  03X"$
      expected (nonprintable as hex) : "  0"$
      actual   (nonprintable as hex) : "  03X"$
$
Test 387 (X_width_pos_exactfit) : FAILED.$
    First line of code: {return test("%5X", 52625);}$
      expected return value : 5$
      your return value     : 7$
      expected output : " CD91"$
      your output     : " CD915X"$
      expected (nonprintable as hex) : " CD91"$
      actual   (nonprintable as hex) : " CD915X"$
$
Test 388 (X_width_pos_nofit) : FAILED.$
    First line of code: {return test("%2X", 94827);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "1726B"$
      your output     : "1726B2X"$
      expected (nonprintable as hex) : "1726B"$
      actual   (nonprintable as hex) : "1726B2X"$
$
Test 389 (X_width_pos_fits_lj) : FAILED.$
    First line of code: {return test("%-7X", 33);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "21     "$
      your output     : "21     -7X"$
      expected (nonprintable as hex) : "21     "$
      actual   (nonprintable as hex) : "21     -7X"$
$
Test 390 (X_width_zero_fits_lj) : FAILED.$
    First line of code: {return test("%-3X", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "0  "$
      your output     : "0  -3X"$
      expected (nonprintable as hex) : "0  "$
      actual   (nonprintable as hex) : "0  -3X"$
$
Test 391 (X_width_pos_exactfit_lj) : FAILED.$
    First line of code: {return test("%-5X", 52625);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "CD91 "$
      your output     : "CD91 -5X"$
      expected (nonprintable as hex) : "CD91 "$
      actual   (nonprintable as hex) : "CD91 -5X"$
$
Test 392 (X_width_pos_nofit_lj) : FAILED.$
    First line of code: {return test("%-4X", 9648627);}$
      expected return value : 6$
      your return value     : 9$
      expected output : "9339F3"$
      your output     : "9339F3-4X"$
      expected (nonprintable as hex) : "9339F3"$
      actual   (nonprintable as hex) : "9339F3-4X"$
$
Test 393 (X_prec_fits_pos) : FAILED.$
    First line of code: {return test("%.5X", 21);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "00015"$
      your output     : "00015.5X"$
      expected (nonprintable as hex) : "00015"$
      actual   (nonprintable as hex) : "00015.5X"$
$
Test 394 (X_prec_fits_zero) : FAILED.$
    First line of code: {return test("%.3X", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "000"$
      your output     : "000.3X"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "000.3X"$
$
Test 395 (X_prec_exactfit_pos) : FAILED.$
    First line of code: {return test("%.4X", 5263);}$
      expected return value : 4$
      your return value     : 7$
      expected output : "148F"$
      your output     : "148F.4X"$
      expected (nonprintable as hex) : "148F"$
      actual   (nonprintable as hex) : "148F.4X"$
$
Test 396 (X_prec_nofit_pos) : FAILED.$
    First line of code: {return test("%.3X", 938862);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "E536E"$
      your output     : "E536E.3X"$
      expected (nonprintable as hex) : "E536E"$
      actual   (nonprintable as hex) : "E536E.3X"$
$
Test 397 (X_zp_pos_fits) : FAILED.$
    First line of code: {return test("%05X", 43);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "0002B"$
      your output     : "0002B05X"$
      expected (nonprintable as hex) : "0002B"$
      actual   (nonprintable as hex) : "0002B05X"$
$
Test 398 (X_zp_zero_fits) : FAILED.$
    First line of code: {return test("%03X", 0);}$
      expected return value : 3$
      your return value     : 6$
      expected output : "000"$
      your output     : "00003X"$
      expected (nonprintable as hex) : "000"$
      actual   (nonprintable as hex) : "00003X"$
$
Test 399 (X_zp_pos_exactfit) : FAILED.$
    First line of code: {return test("%03X", 698334);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "AA7DE"$
      your output     : "AA7DE03X"$
      expected (nonprintable as hex) : "AA7DE"$
      actual   (nonprintable as hex) : "AA7DE03X"$
$
Test 400 (X_prec_width_fit_fit_pos) : FAILED.$
    First line of code: {return test("%8.5X", 34);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   00022"$
      your output     : "   000228.5X"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "   000228.5X"$
$
Test 401 (X_prec_width_fit_fit_zero) : FAILED.$
    First line of code: {return test("%8.5X", 0);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "   00000"$
      your output     : "   000008.5X"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   000008.5X"$
$
Test 402 (X_prec_width_nofit_fit_pos) : FAILED.$
    First line of code: {return test("%8.3X", 8375);}$
      expected return value : 8$
      your return value     : 13$
      expected output : "    20B7"$
      your output     : "    20B78.3X"$
      expected (nonprintable as hex) : "    20B7"$
      actual   (nonprintable as hex) : "    20B78.3X"$
$
Test 403 (X_prec_width_fit_nofit_pos) : FAILED.$
    First line of code: {return test("%2.7X", 3267);}$
      expected return value : 7$
      your return value     : 12$
      expected output : "0000CC3"$
      your output     : "0000CC32.7X"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "0000CC32.7X"$
$
Test 404 (X_prec_width_nofit_nofit_pos) : FAILED.$
    First line of code: {return test("%3.3X", 6983);}$
      expected return value : 4$
      your return value     : 8$
      expected output : "1B47"$
      your output     : "1B473.3X"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "1B473.3X"$
$
Test 405 (X_prec_width_fit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.5X", 34);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "00022   "$
      your output     : "00022   -8.5X"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "00022   -8.5X"$
$
Test 406 (X_prec_width_fit_fit_zero_lj) : FAILED.$
    First line of code: {return test("%-8.5X", 0);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "00000   "$
      your output     : "00000   -8.5X"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   -8.5X"$
$
Test 407 (X_prec_width_nofit_fit_pos_lj) : FAILED.$
    First line of code: {return test("%-8.3X", 8375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "20B7    "$
      your output     : "20B7    -8.3X"$
      expected (nonprintable as hex) : "20B7    "$
      actual   (nonprintable as hex) : "20B7    -8.3X"$
$
Test 408 (X_prec_width_fit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-2.7X", 3267);}$
      expected return value : 7$
      your return value     : 13$
      expected output : "0000CC3"$
      your output     : "0000CC3-2.7X"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "0000CC3-2.7X"$
$
Test 409 (X_prec_width_nofit_nofit_pos_lj) : FAILED.$
    First line of code: {return test("%-3.3X", 6983);}$
      expected return value : 4$
      your return value     : 9$
      expected output : "1B47"$
      your output     : "1B47-3.3X"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "1B47-3.3X"$
$
Test 410 (X_prec_width_ff_pos_zp) : FAILED.$
    First line of code: {return test("%08.5X", 34);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   00022"$
      your output     : "   0002208.5X"$
      expected (nonprintable as hex) : "   00022"$
      actual   (nonprintable as hex) : "   0002208.5X"$
$
Test 411 (X_prec_width_ff_zero_zp) : FAILED.$
    First line of code: {return test("%08.5X", 0);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "   00000"$
      your output     : "   0000008.5X"$
      expected (nonprintable as hex) : "   00000"$
      actual   (nonprintable as hex) : "   0000008.5X"$
$
Test 412 (X_prec_width_nf_pos_zp) : FAILED.$
    First line of code: {return test("%08.3X", 8375);}$
      expected return value : 8$
      your return value     : 14$
      expected output : "    20B7"$
      your output     : "    20B708.3X"$
      expected (nonprintable as hex) : "    20B7"$
      actual   (nonprintable as hex) : "    20B708.3X"$
$
Test 413 (X_prec_width_fn_pos_zp) : FAILED.$
    First line of code: {return test("%02.7X", 3267);}$
      expected return value : 7$
      your return value     : 13$
      expected output : "0000CC3"$
      your output     : "0000CC302.7X"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "0000CC302.7X"$
$
Test 414 (X_prec_width_nn_pos_zp) : FAILED.$
    First line of code: {return test("%03.3X", 6983);}$
      expected return value : 4$
      your return value     : 9$
      expected output : "1B47"$
      your output     : "1B4703.3X"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "1B4703.3X"$
$
Test 415 (X_prec_width_ff_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5X", 34);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "00022   "$
      your output     : "00022   0-8.5X"$
      expected (nonprintable as hex) : "00022   "$
      actual   (nonprintable as hex) : "00022   0-8.5X"$
$
Test 416 (X_prec_width_ff_zero_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.5X", 0);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "00000   "$
      your output     : "00000   0-8.5X"$
      expected (nonprintable as hex) : "00000   "$
      actual   (nonprintable as hex) : "00000   0-8.5X"$
$
Test 417 (X_prec_width_nf_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-8.3X", 8375);}$
      expected return value : 8$
      your return value     : 15$
      expected output : "20B7    "$
      your output     : "20B7    0-8.3X"$
      expected (nonprintable as hex) : "20B7    "$
      actual   (nonprintable as hex) : "20B7    0-8.3X"$
$
Test 418 (X_prec_width_fn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-2.7X", 3267);}$
      expected return value : 7$
      your return value     : 14$
      expected output : "0000CC3"$
      your output     : "0000CC30-2.7X"$
      expected (nonprintable as hex) : "0000CC3"$
      actual   (nonprintable as hex) : "0000CC30-2.7X"$
$
Test 419 (X_prec_width_nn_pos_ljzp_ignoreflag) : FAILED.$
    First line of code: {return test("%0-3.3X", 6983);}$
      expected return value : 4$
      your return value     : 11$
      expected output : "1B47"$
      your output     : "1B470-3.3X"$
      expected (nonprintable as hex) : "1B47"$
      actual   (nonprintable as hex) : "1B470-3.3X"$
$
Test 420 (X_prec0val0_basic) : FAILED.$
    First line of code: {return test("%.0X", 0);}$
      expected return value : 0$
      your return value     : 3$
      expected output : ""$
      your output     : ".0X"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".0X"$
$
Test 421 (X_prec0val0_implicit) : FAILED.$
    First line of code: {return test("%.X", 0);}$
      expected return value : 0$
      your return value     : 2$
      expected output : ""$
      your output     : ".X"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".X"$
$
Test 422 (X_prec0val0_w) : FAILED.$
    First line of code: {return test("%5.0X", 0);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "     "$
      your output     : "     5.0X"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.0X"$
$
Test 423 (X_prec0val0_w_impl) : FAILED.$
    First line of code: {return test("%5.X", 0);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "     "$
      your output     : "     5.X"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     5.X"$
$
Test 424 (X_prec0val0_wlj) : FAILED.$
    First line of code: {return test("%-5.0X", 0);}$
      expected return value : 5$
      your return value     : 11$
      expected output : "     "$
      your output     : "     -5.0X"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.0X"$
$
Test 425 (X_prec0val0_wlj_impl) : FAILED.$
    First line of code: {return test("%-5.X", 0);}$
      expected return value : 5$
      your return value     : 9$
      expected output : "     "$
      your output     : "     -5.X"$
      expected (nonprintable as hex) : "     "$
      actual   (nonprintable as hex) : "     -5.X"$
$
Test 426 (p_null) : FAILED.$
    First line of code: {return test("%p", NULL);}$
      expected return value : 3$
      your return value     : 4$
      expected output : "0x0"$
      your output     : "0x0p"$
      expected (nonprintable as hex) : "0x0"$
      actual   (nonprintable as hex) : "0x0p"$
$
Test 427 (p_null_width_fit) : FAILED.$
    First line of code: {return test("%5p", NULL);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "  0x0"$
      your output     : "  0x05p"$
      expected (nonprintable as hex) : "  0x0"$
      actual   (nonprintable as hex) : "  0x05p"$
$
Test 428 (p_null_width_nofit) : FAILED.$
    First line of code: {return test("%2p", NULL);}$
      expected return value : 3$
      your return value     : 5$
      expected output : "0x0"$
      your output     : "0x02p"$
      expected (nonprintable as hex) : "0x0"$
      actual   (nonprintable as hex) : "0x02p"$
$
Test 429 (p_void) : FAILED.$
    First line of code: {return test("%.p", NULL);}$
      expected return value : 2$
      your return value     : 4$
      expected output : "0x"$
      your output     : "0x.p"$
      expected (nonprintable as hex) : "0x"$
      actual   (nonprintable as hex) : "0x.p"$
$
Test 430 (p_void_width_fit) : FAILED.$
    First line of code: {return test("%5.p", NULL);}$
      expected return value : 5$
      your return value     : 8$
      expected output : "   0x"$
      your output     : "   0x5.p"$
      expected (nonprintable as hex) : "   0x"$
      actual   (nonprintable as hex) : "   0x5.p"$
$
Test 431 (p_void_width_nofit) : FAILED.$
    First line of code: {return test("%2.p", NULL);}$
      expected return value : 2$
      your return value     : 5$
      expected output : "0x"$
      your output     : "0x2.p"$
      expected (nonprintable as hex) : "0x"$
      actual   (nonprintable as hex) : "0x2.p"$
$
Test 432 (p_ftfc_literal_9w_prec2_undefbehav) : FAILED.$
    First line of code: {return test("%9.2p$
", 1234);}$
      expected return value : 11$
      your return value     : 15$
      expected output : "    0x4d2$
"$
      your output     : "       0x9.2p$
"$
      expected (nonprintable as hex) : "    0x4d2\x0a"$
      actual   (nonprintable as hex) : "       0x9.2p\x0a"$
$
Test 433 (p_ftfc_literal_2w_prec9_undefbehav) : FAILED.$
    First line of code: {return test("%2.9p$
", 1234);}$
      expected return value : 13$
      your return value     : 11$
      expected output : "0x0000004d2$
"$
      your output     : "0x4d22.9p$
"$
      expected (nonprintable as hex) : "0x0000004d2\x0a"$
      actual   (nonprintable as hex) : "0x4d22.9p\x0a"$
$
Test 434 (p_ftfc_zero_prec5_undefbehav) : FAILED.$
    First line of code: {return test("%.5p", 0);}$
      expected return value : 7$
      your return value     : 6$
      expected output : "0x00000"$
      your output     : "0x0.5p"$
      expected (nonprintable as hex) : "0x00000"$
      actual   (nonprintable as hex) : "0x0.5p"$
$
Test 435 (p_ftfc_zero_prec0_undefbehav) : FAILED.$
    First line of code: {return test("%.0p", 0);}$
      expected return value : 2$
      your return value     : 5$
      expected output : "0x"$
      your output     : "0x.0p"$
      expected (nonprintable as hex) : "0x"$
      actual   (nonprintable as hex) : "0x.0p"$
$
Test 436 (p_ftfc_5w_throwswarning) : FAILED.$
    First line of code: {return test("%5p", 0);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "  0x0"$
      your output     : "  0x05p"$
      expected (nonprintable as hex) : "  0x0"$
      actual   (nonprintable as hex) : "  0x05p"$
$
Test 437 (p_basic) : FAILED.$
    First line of code: {return test("%p%p%p%p%p%p%p%p%p%p%p%p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected return value : 156$
      your return value     : 169$
      expected output : "0x10a4bf4e80x10a4bf4e90x10a4bf4ea0x10a4bf4ec0x10a4bf4f00x10a4bf4f40x10a4bf4f80x10a4bf5000x10a4bf5080x10a4bf5100x10a4bf5180x10a4bf520"$
      your output     : "0x10a4bf4e8p0x10a4bf4e9p0x10a4bf4eap0x10a4bf4ecp0x10a4bf4f0p0x10a4bf4f4p0x10a4bf4f8p0x10a4bf500p0x10a4bf508p0x10a4bf510p0x10a4bf518p0x10a4bf520p"$
      expected (nonprintable as hex) : "0x10a4bf4e80x10a4bf4e90x10a4bf4ea0x10a4bf4ec0x10a4bf4f00x10a4bf4f40x10a4bf4f80x10a4bf5000x10a4bf5080x10a4bf5100x10a4bf5180x10a4bf520"$
      actual   (nonprintable as hex) : "0x10a4bf4e8p0x10a4bf4e9p0x10a4bf4eap0x10a4bf4ecp0x10a4bf4f0p0x10a4bf4f4p0x10a4bf4f8p0x10a4bf500p0x10a4bf508p0x10a4bf510p0x10a4bf518p0x10a4bf520p"$
$
Test 438 (p_width_fit) : FAILED.$
    First line of code: {return test("%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected return value : 1012$
      your return value     : 1051$
      expected output : "                                                           0x10a4bf4e8                                                           0x10a4bf4e9          "$
      your output     : "                                                           0x10a4bf4e870p                                                           0x10a4bf4e970p    "$
      expected (nonprintable as hex) : "                                                           0x10a4bf4e8                                                           0x10a4bf4e9          "$
      actual   (nonprintable as hex) : "                                                           0x10a4bf4e870p                                                           0x10a4bf4e970p    "$
$
Test 439 (p_width_nofit) : FAILED.$
    First line of code: {return test("%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected return value : 156$
      your return value     : 182$
      expected output : "0x10a4bf4e80x10a4bf4e90x10a4bf4ea0x10a4bf4ec0x10a4bf4f00x10a4bf4f40x10a4bf4f80x10a4bf5000x10a4bf5080x10a4bf5100x10a4bf5180x10a4bf520"$
      your output     : "0x10a4bf4e85p0x10a4bf4e95p0x10a4bf4ea5p0x10a4bf4ec5p0x10a4bf4f05p0x10a4bf4f45p0x10a4bf4f85p0x10a4bf5005p0x10a4bf5085p0x10a4bf5105p0x10a4bf5185p0x10a4b"$
      expected (nonprintable as hex) : "0x10a4bf4e80x10a4bf4e90x10a4bf4ea0x10a4bf4ec0x10a4bf4f00x10a4bf4f40x10a4bf4f80x10a4bf5000x10a4bf5080x10a4bf5100x10a4bf5180x10a4bf520"$
      actual   (nonprintable as hex) : "0x10a4bf4e85p0x10a4bf4e95p0x10a4bf4ea5p0x10a4bf4ec5p0x10a4bf4f05p0x10a4bf4f45p0x10a4bf4f85p0x10a4bf5005p0x10a4bf5085p0x10a4bf5105p0x10a4bf5185p0x10a4b"$
$
Test 440 (p_width_16) : FAILED.$
    First line of code: {return test("%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected return value : 222$
      your return value     : 272$
      expected output : "     0x10a4bf4e8     0x10a4bf4e9     0x10a4bf4ea     0x10a4bf4ec     0x10a4bf4f0     0x10a4bf4f4     0x10a4bf4f8     0x10a4bf500     0x10a4bf508     0"$
      your output     : "     0x10a4bf4e816p     0x10a4bf4e916p     0x10a4bf4ea16p     0x10a4bf4ec16p     0x10a4bf4f016p     0x10a4bf4f416p     0x10a4bf4f816p     0x10a4bf5001"$
      expected (nonprintable as hex) : "     0x10a4bf4e8     0x10a4bf4e9     0x10a4bf4ea     0x10a4bf4ec     0x10a4bf4f0     0x10a4bf4f4     0x10a4bf4f8     0x10a4bf500     0x10a4bf508     0"$
      actual   (nonprintable as hex) : "     0x10a4bf4e816p     0x10a4bf4e916p     0x10a4bf4ea16p     0x10a4bf4ec16p     0x10a4bf4f016p     0x10a4bf4f416p     0x10a4bf4f816p     0x10a4bf5001"$
$
Test 441 (p_width_8) : FAILED.$
    First line of code: {return test("%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}$
      expected return value : 156$
      your return value     : 182$
      expected output : "0x10a4bf4e80x10a4bf4e90x10a4bf4ea0x10a4bf4ec0x10a4bf4f00x10a4bf4f40x10a4bf4f80x10a4bf5000x10a4bf5080x10a4bf5100x10a4bf5180x10a4bf520"$
      your output     : "0x10a4bf4e88p0x10a4bf4e98p0x10a4bf4ea8p0x10a4bf4ec8p0x10a4bf4f08p0x10a4bf4f48p0x10a4bf4f88p0x10a4bf5008p0x10a4bf5088p0x10a4bf5108p0x10a4bf5188p0x10a4b"$
      expected (nonprintable as hex) : "0x10a4bf4e80x10a4bf4e90x10a4bf4ea0x10a4bf4ec0x10a4bf4f00x10a4bf4f40x10a4bf4f80x10a4bf5000x10a4bf5080x10a4bf5100x10a4bf5180x10a4bf520"$
      actual   (nonprintable as hex) : "0x10a4bf4e88p0x10a4bf4e98p0x10a4bf4ea8p0x10a4bf4ec8p0x10a4bf4f08p0x10a4bf4f48p0x10a4bf4f88p0x10a4bf5008p0x10a4bf5088p0x10a4bf5108p0x10a4bf5188p0x10a4b"$
$
Test 442 (p_width_32) : FAILED.$
    First line of code: {return test("%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected return value : 455$
      your return value     : 506$
      expected output : "                     0x10a4bf4e8                     0x10a4bf4e9                     0x10a4bf4ea                     0x10a4bf4ec                     0"$
      your output     : "                     0x10a4bf4e832p                     0x10a4bf4e932p                     0x10a4bf4ea32p                     0x10a4bf4ec32p          "$
      expected (nonprintable as hex) : "                     0x10a4bf4e8                     0x10a4bf4e9                     0x10a4bf4ea                     0x10a4bf4ec                     0"$
      actual   (nonprintable as hex) : "                     0x10a4bf4e832p                     0x10a4bf4e932p                     0x10a4bf4ea32p                     0x10a4bf4ec32p          "$
$
Test 443 (p_width_fit_lj) : FAILED.$
    First line of code: {return test("%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected return value : 1012$
      your return value     : 1064$
      expected output : "0x10a4bf4e8                                                           0x10a4bf4e9                                                           0x10a4bf4e"$
      your output     : "0x10a4bf4e8                                                           -70p0x10a4bf4e9                                                           -70p0x"$
      expected (nonprintable as hex) : "0x10a4bf4e8                                                           0x10a4bf4e9                                                           0x10a4bf4e"$
      actual   (nonprintable as hex) : "0x10a4bf4e8                                                           -70p0x10a4bf4e9                                                           -70p0x"$
$
Test 444 (p_width_nofit_lj) : FAILED.$
    First line of code: {return test("%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected return value : 156$
      your return value     : 195$
      expected output : "0x10a4bf4e80x10a4bf4e90x10a4bf4ea0x10a4bf4ec0x10a4bf4f00x10a4bf4f40x10a4bf4f80x10a4bf5000x10a4bf5080x10a4bf5100x10a4bf5180x10a4bf520"$
      your output     : "0x10a4bf4e8-5p0x10a4bf4e9-5p0x10a4bf4ea-5p0x10a4bf4ec-5p0x10a4bf4f0-5p0x10a4bf4f4-5p0x10a4bf4f8-5p0x10a4bf500-5p0x10a4bf508-5p0x10a4bf510-5p0x10a4bf51"$
      expected (nonprintable as hex) : "0x10a4bf4e80x10a4bf4e90x10a4bf4ea0x10a4bf4ec0x10a4bf4f00x10a4bf4f40x10a4bf4f80x10a4bf5000x10a4bf5080x10a4bf5100x10a4bf5180x10a4bf520"$
      actual   (nonprintable as hex) : "0x10a4bf4e8-5p0x10a4bf4e9-5p0x10a4bf4ea-5p0x10a4bf4ec-5p0x10a4bf4f0-5p0x10a4bf4f4-5p0x10a4bf4f8-5p0x10a4bf500-5p0x10a4bf508-5p0x10a4bf510-5p0x10a4bf51"$
$
Test 445 (p_width_16_lj) : FAILED.$
    First line of code: {return test("%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected return value : 222$
      your return value     : 286$
      expected output : "0x10a4bf4e8     0x10a4bf4e9     0x10a4bf4ea     0x10a4bf4ec     0x10a4bf4f0     0x10a4bf4f4     0x10a4bf4f8     0x10a4bf500     0x10a4bf508     0x10a4"$
      your output     : "0x10a4bf4e8     -16p0x10a4bf4e9     -16p0x10a4bf4ea     -16p0x10a4bf4ec     -16p0x10a4bf4f0     -16p0x10a4bf4f4     -16p0x10a4bf4f8     -16p0x10a4bf50"$
      expected (nonprintable as hex) : "0x10a4bf4e8     0x10a4bf4e9     0x10a4bf4ea     0x10a4bf4ec     0x10a4bf4f0     0x10a4bf4f4     0x10a4bf4f8     0x10a4bf500     0x10a4bf508     0x10a4"$
      actual   (nonprintable as hex) : "0x10a4bf4e8     -16p0x10a4bf4e9     -16p0x10a4bf4ea     -16p0x10a4bf4ec     -16p0x10a4bf4f0     -16p0x10a4bf4f4     -16p0x10a4bf4f8     -16p0x10a4bf50"$
$
Test 446 (p_width_8_lj) : FAILED.$
    First line of code: {return test("%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected return value : 156$
      your return value     : 195$
      expected output : "0x10a4bf4e80x10a4bf4e90x10a4bf4ea0x10a4bf4ec0x10a4bf4f00x10a4bf4f40x10a4bf4f80x10a4bf5000x10a4bf5080x10a4bf5100x10a4bf5180x10a4bf520"$
      your output     : "0x10a4bf4e8-8p0x10a4bf4e9-8p0x10a4bf4ea-8p0x10a4bf4ec-8p0x10a4bf4f0-8p0x10a4bf4f4-8p0x10a4bf4f8-8p0x10a4bf500-8p0x10a4bf508-8p0x10a4bf510-8p0x10a4bf51"$
      expected (nonprintable as hex) : "0x10a4bf4e80x10a4bf4e90x10a4bf4ea0x10a4bf4ec0x10a4bf4f00x10a4bf4f40x10a4bf4f80x10a4bf5000x10a4bf5080x10a4bf5100x10a4bf5180x10a4bf520"$
      actual   (nonprintable as hex) : "0x10a4bf4e8-8p0x10a4bf4e9-8p0x10a4bf4ea-8p0x10a4bf4ec-8p0x10a4bf4f0-8p0x10a4bf4f4-8p0x10a4bf4f8-8p0x10a4bf500-8p0x10a4bf508-8p0x10a4bf510-8p0x10a4bf51"$
$
Test 447 (p_width_32_lj) : FAILED.$
    First line of code: {return test("%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected return value : 455$
      your return value     : 519$
      expected output : "0x10a4bf4e8                     0x10a4bf4e9                     0x10a4bf4ea                     0x10a4bf4ec                     0x10a4bf4f0           "$
      your output     : "0x10a4bf4e8                     -32p0x10a4bf4e9                     -32p0x10a4bf4ea                     -32p0x10a4bf4ec                     -32p0x10a4"$
      expected (nonprintable as hex) : "0x10a4bf4e8                     0x10a4bf4e9                     0x10a4bf4ea                     0x10a4bf4ec                     0x10a4bf4f0           "$
      actual   (nonprintable as hex) : "0x10a4bf4e8                     -32p0x10a4bf4e9                     -32p0x10a4bf4ea                     -32p0x10a4bf4ec                     -32p0x10a4"$
$
Test 448 (c_allprintable_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%      expected return value : 105$
      your return value     : 222$
      expected output : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~^?"$
      your output     : " c!c"c#c$c%c&c'c(c)c*c+c,c-c.c/c0c1c2c3c4c5c6c7c8c9c:c;c<c=c>c?c@cAcBcCcDcEcFcGcHcIcJcKcLcMcNcOcPcQcRcScTcUcVcWcXcYcZc[c\c]c^c_c`cacbcccdcecfcgchcicjc"$
      expected (nonprintable as hex) : " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f"$
      actual   (nonprintable as hex) : " c!c"c#c$c%c&c'c(c)c*c+c,c-c.c/c0c1c2c3c4c5c6c7c8c9c:c;c<c=c>c?c@cAcBcCcDcEcFcGcHcIcJcKcLcMcNcOcPcQcRcScTcUcVcWcXcYcZc[c\c]c^c_c`cacbcccdcecfcgchcicjc"$
$
Test 449 (c_1_31_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",(char)1,(char)2,(char)3,(char)4,(char)5,(char)6      expected return value : 34$
      your return value     : 68$
      expected output : "^A^B^C^D^E^F^G^H	$
^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\^]^^^_"$
      your output     : "^Ac^Bc^Cc^Dc^Ec^Fc^Gc^Hc	c$
c^Kc^Lc^Mc^Nc^Oc^Pc^Qc^Rc^Sc^Tc^Uc^Vc^Wc^Xc^Yc^Zc^[c^\c^]c^^c^_c"$
      expected (nonprintable as hex) : "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"$
      actual   (nonprintable as hex) : "\x01c\x02c\x03c\x04c\x05c\x06c\x07c\x08c\x09c\x0ac\x0bc\x0cc\x0dc\x0ec\x0fc\x10c\x11c\x12c\x13c\x14c\x15c\x16c\x17c\x18c\x19c\x1ac\x1bc\x1cc\x1dc\x1ec\x1fc"$
$
Test 450 (c_128_255_combined) : FAILED.$
    First line of code: {return test("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%      expected return value : 151$
      your return value     : 303$
      expected output : "M-^@M-^AM-^BM-^CM-^DM-^EM-^FM-^GM-^HM-^IM-^JM-^KM-^LM-^MM-^NM-^OM-^PM-^QM-^RM-^SM-^TM-^UM-^VM-^WM-^XM-^YM-^ZM-^[M-^\M-^]M-^^M-^_ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"$
      your output     : "M-^@cM-^AcM-^BcM-^CcM-^DcM-^EcM-^FcM-^GcM-^HcM-^IcM-^JcM-^KcM-^LcM-^McM-^NcM-^OcM-^PcM-^QcM-^RcM-^ScM-^TcM-^UcM-^VcM-^WcM-^XcM-^YcM-^ZcM-^[cM-^\cM-^]cM-^^cM-^_c c¡c¢c£c¤c¥c¦c§c¨c©cªc«c¬c­c®c¯c°c±c²c³c´cµc¶c·c¸c¹cºc»c¼c½c¾c¿cÀcÁcÂcÃcÄcÅcÆcÇcÈcÉcÊc"$
      expected (nonprintable as hex) : "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"$
      actual   (nonprintable as hex) : "\x80c\x81c\x82c\x83c\x84c\x85c\x86c\x87c\x88c\x89c\x8ac\x8bc\x8cc\x8dc\x8ec\x8fc\x90c\x91c\x92c\x93c\x94c\x95c\x96c\x97c\x98c\x99c\x9ac\x9bc\x9cc\x9dc\x9ec\x9fc\xa0c\xa1c\xa2c\xa3c\xa4c\xa5c\xa6c\xa7c\xa8c\xa9c\xaac\xabc\xacc\xadc\xaec\xafc\xb0c\xb1c\xb2c\xb3c\xb4c\xb5c\xb6c\xb7c\xb8c\xb9c\xbac\xbbc\xbcc\xbdc\xbec\xbfc\xc0c\xc1c\xc2c\xc3c\xc4c\xc5c\xc6c\xc7c\xc8c\xc9c\xcac"$
$
Test 451 (c_allprintable_width) : FAILED.$
    First line of code: {return test("%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c      expected return value : 286$
      your return value     : 519$
      expected output : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      your output     : " 1c !2c  "3c   #4c$1c %2c  &3c   '4c(1c )2c  *3c   +4c,1c -2c  .3c   /4c01c 12c  23c   34c41c 52c  63c   74c81c 92c  :3c   ;4c<1c =2c  >3c   ?4c@1c A2"$
      expected (nonprintable as hex) : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      actual   (nonprintable as hex) : " 1c !2c  "3c   #4c$1c %2c  &3c   '4c(1c )2c  *3c   +4c,1c -2c  .3c   /4c01c 12c  23c   34c41c 52c  63c   74c81c 92c  :3c   ;4c<1c =2c  >3c   ?4c@1c A2"$
$
Test 452 (c_1_31_width) : FAILED.$
    First line of code: {return test("%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c",(char)1,(char)2,      expected return value : 86$
      your return value     : 166$
      expected output : " ^A  ^B   ^C^D ^E  ^F   ^G^H 	  $
   ^K^L ^M  ^N   ^O^P ^Q  ^R   ^S^T ^U  ^V   ^W^X ^Y  ^Z   ^[^\ ^]  ^^   ^_"$
      your output     : " ^A2c  ^B3c   ^C4c^D1c ^E2c  ^F3c   ^G4c^H1c 	2c  $
3c   ^K4c^L1c ^M2c  ^N3c   ^O4c^P1c ^Q2c  ^R3c   ^S4c^T1c ^U2c  ^V3c   ^W4c^X1c ^Y2c  ^Z3c   ^[4c^\1c ^]2c  ^^3c   ^_4c"$
      expected (nonprintable as hex) : " \x01  \x02   \x03\x04 \x05  \x06   \x07\x08 \x09  \x0a   \x0b\x0c \x0d  \x0e   \x0f\x10 \x11  \x12   \x13\x14 \x15  \x16   \x17\x18 \x19  \x1a   \x1b\x1c \x1d  \x1e   \x1f"$
      actual   (nonprintable as hex) : " \x012c  \x023c   \x034c\x041c \x052c  \x063c   \x074c\x081c \x092c  \x0a3c   \x0b4c\x0c1c \x0d2c  \x0e3c   \x0f4c\x101c \x112c  \x123c   \x134c\x141c \x152c  \x163c   \x174c\x181c \x192c  \x1a3c   \x1b4c\x1c1c \x1d2c  \x1e3c   \x1f4c"$
$
Test 453 (c_128_255_width) : FAILED.$
    First line of code: {return test("%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c%2c%3c%4c%1c      expected return value : 385$
      your return value     : 688$
      expected output : "M-^@ M-^A  M-^B   M-^CM-^D M-^E  M-^F   M-^GM-^H M-^I  M-^J   M-^KM-^L M-^M  M-^N   M-^OM-^P M-^Q  M-^R   M-^SM-^T M-^U  M-^V   M-^WM-^X M-^Y  M-^Z   M-^[M-^\ M-^]  M-^^   M-^_  ¡  ¢   £¤ ¥  ¦   §¨ ©  ª   «¬ ­  ®   ¯° ±  ²   ³´ µ  ¶   ·¸ ¹  º   »"$
      your output     : "M-^@1c M-^A2c  M-^B3c   M-^C4cM-^D1c M-^E2c  M-^F3c   M-^G4cM-^H1c M-^I2c  M-^J3c   M-^K4cM-^L1c M-^M2c  M-^N3c   M-^O4cM-^P1c M-^Q2c  M-^R3c   M-^S4cM-^T1c M-^U2c  M-^V3c   M-^W4cM-^X1c M-^Y2c  M-^Z3c   M-^[4cM-^\1c M-^]2c  M-^^3c   M-^_4c 1c ¡2"$
      expected (nonprintable as hex) : "\x80 \x81  \x82   \x83\x84 \x85  \x86   \x87\x88 \x89  \x8a   \x8b\x8c \x8d  \x8e   \x8f\x90 \x91  \x92   \x93\x94 \x95  \x96   \x97\x98 \x99  \x9a   \x9b\x9c \x9d  \x9e   \x9f\xa0 \xa1  \xa2   \xa3\xa4 \xa5  \xa6   \xa7\xa8 \xa9  \xaa   \xab\xac \xad  \xae   \xaf\xb0 \xb1  \xb2   \xb3\xb4 \xb5  \xb6   \xb7\xb8 \xb9  \xba   \xbb"$
      actual   (nonprintable as hex) : "\x801c \x812c  \x823c   \x834c\x841c \x852c  \x863c   \x874c\x881c \x892c  \x8a3c   \x8b4c\x8c1c \x8d2c  \x8e3c   \x8f4c\x901c \x912c  \x923c   \x934c\x941c \x952c  \x963c   \x974c\x981c \x992c  \x9a3c   \x9b4c\x9c1c \x9d2c  \x9e3c   \x9f4c\xa01c \xa12"$
$
Test 454 (c_allprintable_width_lj) : FAILED.$
    First line of code: {return test("%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1      expected return value : 286$
      your return value     : 635$
      expected output : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      your output     : "  -2c!  -3c"   -4c#-1c$ -2c%  -3c&   -4c'-1c( -2c)  -3c*   -4c+-1c, -2c-  -3c.   -4c/-1c0 -2c1  -3c2   -4c3-1c4 -2c5  -3c6   -4c7-1c8 -2c9  -3c:   -4c"$
      expected (nonprintable as hex) : "  !  "   #$ %  &   '( )  *   +, -  .   /0 1  2   34 5  6   78 9  :   ;< =  >   ?@ A  B   CD E  F   GH I  J   KL M  N   OP Q  R   ST U  V   WX Y  Z   ["$
      actual   (nonprintable as hex) : "  -2c!  -3c"   -4c#-1c$ -2c%  -3c&   -4c'-1c( -2c)  -3c*   -4c+-1c, -2c-  -3c.   -4c/-1c0 -2c1  -3c2   -4c3-1c4 -2c5  -3c6   -4c7-1c8 -2c9  -3c:   -4c"$
$
Test 455 (c_1_31_width_lj) : FAILED.$
    First line of code: {return test("%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1      expected return value : 86$
      your return value     : 200$
      expected output : "^A ^B  ^C   ^D^E ^F  ^G   ^H	 $
  ^K   ^L^M ^N  ^O   ^P^Q ^R  ^S   ^T^U ^V  ^W   ^X^Y ^Z  ^[   ^\^] ^^  ^_   "$
      your output     : "^A -2c^B  -3c^C   -4c^D-1c^E -2c^F  -3c^G   -4c^H-1c	 -2c$
  -3c^K   -4c^L-1c^M -2c^N  -3c^O   -4c^P-1c^Q -2c^R  -3c^S   -4c^T-1c^U -2c^V  -3c^W   -4c^X-1c^Y -2c^Z  -3c^[   -4c"$
      expected (nonprintable as hex) : "\x01 \x02  \x03   \x04\x05 \x06  \x07   \x08\x09 \x0a  \x0b   \x0c\x0d \x0e  \x0f   \x10\x11 \x12  \x13   \x14\x15 \x16  \x17   \x18\x19 \x1a  \x1b   \x1c\x1d \x1e  \x1f   "$
      actual   (nonprintable as hex) : "\x01 -2c\x02  -3c\x03   -4c\x04-1c\x05 -2c\x06  -3c\x07   -4c\x08-1c\x09 -2c\x0a  -3c\x0b   -4c\x0c-1c\x0d -2c\x0e  -3c\x0f   -4c\x10-1c\x11 -2c\x12  -3c\x13   -4c\x14-1c\x15 -2c\x16  -3c\x17   -4c\x18-1c\x19 -2c\x1a  -3c\x1b   -4c"$
$
Test 456 (c_128_255_width_lj) : FAILED.$
    First line of code: {return test("%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4c%-1c%-2c%-3c%-4      expected return value : 385$
      your return value     : 851$
      expected output : "M-^@M-^A M-^B  M-^C   M-^DM-^E M-^F  M-^G   M-^HM-^I M-^J  M-^K   M-^LM-^M M-^N  M-^O   M-^PM-^Q M-^R  M-^S   M-^TM-^U M-^V  M-^W   M-^XM-^Y M-^Z  M-^[   M-^\M-^] M-^^  M-^_    ¡ ¢  £   ¤¥ ¦  §   ¨© ª  «   ¬­ ®  ¯   °± ²  ³   ´µ ¶  ·   ¸¹ º  »   "$
      your output     : "M-^@-1cM-^A -2cM-^B  -3cM-^C   -4cM-^D-1cM-^E -2cM-^F  -3cM-^G   -4cM-^H-1cM-^I -2cM-^J  -3cM-^K   -4cM-^L-1cM-^M -2cM-^N  -3cM-^O   -4cM-^P-1cM-^Q -2cM-^R  -3cM-^S   -4cM-^T-1cM-^U -2cM-^V  -3cM-^W   -4cM-^X-1cM-^Y -2cM-^Z  -3cM-^[  "$
      expected (nonprintable as hex) : "\x80\x81 \x82  \x83   \x84\x85 \x86  \x87   \x88\x89 \x8a  \x8b   \x8c\x8d \x8e  \x8f   \x90\x91 \x92  \x93   \x94\x95 \x96  \x97   \x98\x99 \x9a  \x9b   \x9c\x9d \x9e  \x9f   \xa0\xa1 \xa2  \xa3   \xa4\xa5 \xa6  \xa7   \xa8\xa9 \xaa  \xab   \xac\xad \xae  \xaf   \xb0\xb1 \xb2  \xb3   \xb4\xb5 \xb6  \xb7   \xb8\xb9 \xba  \xbb   "$
      actual   (nonprintable as hex) : "\x80-1c\x81 -2c\x82  -3c\x83   -4c\x84-1c\x85 -2c\x86  -3c\x87   -4c\x88-1c\x89 -2c\x8a  -3c\x8b   -4c\x8c-1c\x8d -2c\x8e  -3c\x8f   -4c\x90-1c\x91 -2c\x92  -3c\x93   -4c\x94-1c\x95 -2c\x96  -3c\x97   -4c\x98-1c\x99 -2c\x9a  -3c\x9b  "$
$
Test 457 (c_nullterm_basic) : FAILED.$
    First line of code: {return test("%c", '$
      expected return value : 1$
      your return value     : 2$
      expected output : "^@"$
      your output     : "^@c"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00c"$
$
Test 458 (c_nullterm_5w) : FAILED.$
    First line of code: {return test("%5c", '$
      expected return value : 5$
      your return value     : 7$
      expected output : "    ^@"$
      your output     : "    ^@5c"$
      expected (nonprintable as hex) : "    \x00"$
      actual   (nonprintable as hex) : "    \x005c"$
$
Test 459 (c_nullterm_5wlj) : FAILED.$
    First line of code: {return test("%-5c", '$
      expected return value : 5$
      your return value     : 8$
      expected output : "^@    "$
      your output     : "^@    -5c"$
      expected (nonprintable as hex) : "\x00    "$
      actual   (nonprintable as hex) : "\x00    -5c"$
$
Test 460 (mix_successive_0) : FAILED.$
    First line of code: {return ( test("%c", mx_c) + test("%u", mx_u));}$
      expected return value : 4$
      your return value     : 6$
      expected output : "G235"$
      your output     : "Gc235u"$
      expected (nonprintable as hex) : "G235"$
      actual   (nonprintable as hex) : "Gc235u"$
$
Test 461 (mix_successive_4) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%i", mx_i));}$
      expected return value : 4$
      your return value     : 6$
      expected output : "eb42"$
      your output     : "ebx42i"$
      expected (nonprintable as hex) : "eb42"$
      actual   (nonprintable as hex) : "ebx42i"$
$
Test 462 (mix_successive_6) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected return value : 15$
      your return value     : 17$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!sGc"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!sGc"$
$
Test 463 (mix_successive_10) : FAILED.$
    First line of code: {return ( test("%u", mx_u) + test("%s", mx_s));}$
      expected return value : 17$
      your return value     : 19$
      expected output : "235Hello, World!"$
      your output     : "235uHello, World!s"$
      expected (nonprintable as hex) : "235Hello, World!"$
      actual   (nonprintable as hex) : "235uHello, World!s"$
$
Test 464 (mix_successive_16) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%x", mx_u));}$
      expected return value : 16$
      your return value     : 18$
      expected output : "Hello, World!eb"$
      your output     : "Hello, World!sebx"$
      expected (nonprintable as hex) : "Hello, World!eb"$
      actual   (nonprintable as hex) : "Hello, World!sebx"$
$
Test 465 (mix_successive_20) : FAILED.$
    First line of code: {return ( test("%p", &mx_i) + test("%s", mx_s));}$
      expected return value : 26$
      your return value     : 28$
      expected output : "0x10a4bc314Hello, World!"$
      your output     : "0x10a4bc314pHello, World!s"$
      expected (nonprintable as hex) : "0x10a4bc314Hello, World!"$
      actual   (nonprintable as hex) : "0x10a4bc314pHello, World!s"$
$
Test 466 (mix_successive_21) : FAILED.$
    First line of code: {return ( test("%X", mx_u) + test("%x", mx_u));}$
      expected return value : 4$
      your return value     : 6$
      expected output : "EBeb"$
      your output     : "EBXebx"$
      expected (nonprintable as hex) : "EBeb"$
      actual   (nonprintable as hex) : "EBXebx"$
$
Test 467 (mix_successive_28) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%u", mx_u));}$
      expected return value : 5$
      your return value     : 7$
      expected output : "42235"$
      your output     : "42i235u"$
      expected (nonprintable as hex) : "42235"$
      actual   (nonprintable as hex) : "42i235u"$
$
Test 468 (mix_successive_30) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%u", mx_u));}$
      expected return value : 17$
      your return value     : 19$
      expected output : "Hello, World!235"$
      your output     : "Hello, World!s235u"$
      expected (nonprintable as hex) : "Hello, World!235"$
      actual   (nonprintable as hex) : "Hello, World!s235u"$
$
Test 469 (mix_successive_31) : FAILED.$
    First line of code: {return ( test("%X", mx_u) + test("%c", mx_c));}$
      expected return value : 3$
      your return value     : 5$
      expected output : "EBG"$
      your output     : "EBXGc"$
      expected (nonprintable as hex) : "EBG"$
      actual   (nonprintable as hex) : "EBXGc"$
$
Test 470 (mix_successive_32) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%u", mx_u));}$
      expected return value : 5$
      your return value     : 7$
      expected output : "eb235"$
      your output     : "ebx235u"$
      expected (nonprintable as hex) : "eb235"$
      actual   (nonprintable as hex) : "ebx235u"$
$
Test 471 (mix_successive_39) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%c", mx_c));}$
      expected return value : 3$
      your return value     : 5$
      expected output : "42G"$
      your output     : "42iGc"$
      expected (nonprintable as hex) : "42G"$
      actual   (nonprintable as hex) : "42iGc"$
$
Test 472 (mix_successive_40) : FAILED.$
    First line of code: {return ( test("%c", mx_c) + test("%x", mx_u));}$
      expected return value : 3$
      your return value     : 5$
      expected output : "Geb"$
      your output     : "Gcebx"$
      expected (nonprintable as hex) : "Geb"$
      actual   (nonprintable as hex) : "Gcebx"$
$
Test 473 (mix_successive_42) : FAILED.$
    First line of code: {return ( test("%x", mx_u) + test("%s", mx_s));}$
      expected return value : 16$
      your return value     : 18$
      expected output : "ebHello, World!"$
      your output     : "ebxHello, World!s"$
      expected (nonprintable as hex) : "ebHello, World!"$
      actual   (nonprintable as hex) : "ebxHello, World!s"$
$
Test 474 (mix_successive_43) : FAILED.$
    First line of code: {return ( test("%u", mx_u) + test("%x", mx_u));}$
      expected return value : 5$
      your return value     : 7$
      expected output : "235eb"$
      your output     : "235uebx"$
      expected (nonprintable as hex) : "235eb"$
      actual   (nonprintable as hex) : "235uebx"$
$
Test 475 (mix_successive_45) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected return value : 15$
      your return value     : 17$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!sGc"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!sGc"$
$
Test 476 (mix_successive_46) : FAILED.$
    First line of code: {return ( test("%i", mx_i) + test("%s", mx_s));}$
      expected return value : 16$
      your return value     : 18$
      expected output : "42Hello, World!"$
      your output     : "42iHello, World!s"$
      expected (nonprintable as hex) : "42Hello, World!"$
      actual   (nonprintable as hex) : "42iHello, World!s"$
$
Test 477 (mix_successive_61) : FAILED.$
    First line of code: {return ( test("%p", &mx_i) + test("%c", mx_c));}$
      expected return value : 13$
      your return value     : 15$
      expected output : "0x10a4bc314G"$
      your output     : "0x10a4bc314pGc"$
      expected (nonprintable as hex) : "0x10a4bc314G"$
      actual   (nonprintable as hex) : "0x10a4bc314pGc"$
$
Test 478 (mix_successive_64) : FAILED.$
    First line of code: {return ( test("%s", mx_s) + test("%c", mx_c));}$
      expected return value : 15$
      your return value     : 17$
      expected output : "Hello, World!G"$
      your output     : "Hello, World!sGc"$
      expected (nonprintable as hex) : "Hello, World!G"$
      actual   (nonprintable as hex) : "Hello, World!sGc"$
$
Test 624 (moul_s_1) : FAILED.$
    First line of code: {return test(" pouet %s !!", "camembert");}$
      expected return value : 20$
      your return value     : 22$
      expected output : " pouet camembert !!"$
      your output     : " pouet camemberts !!"$
      expected (nonprintable as hex) : " pouet camembert !!"$
      actual   (nonprintable as hex) : " pouet camemberts !!"$
$
Test 625 (moul_s_2) : FAILED.$
    First line of code: {return test("%s !", "Ceci n'est pas un $
      expected return value : 22$
      your return value     : 23$
      expected output : "Ceci n'est pas un  !"$
      your output     : "Ceci n'est pas un s !"$
      expected (nonprintable as hex) : "Ceci n'est pas un  !"$
      actual   (nonprintable as hex) : "Ceci n'est pas un s !"$
$
Test 626 (moul_s_3) : FAILED.$
    First line of code: {return test("%s!", "Ceci n'est toujours pas un exercice !");}$
      expected return value : 41$
      your return value     : 42$
      expected output : "Ceci n'est toujours pas un exercice !!"$
      your output     : "Ceci n'est toujours pas un exercice !s!"$
      expected (nonprintable as hex) : "Ceci n'est toujours pas un exercice !!"$
      actual   (nonprintable as hex) : "Ceci n'est toujours pas un exercice !s!"$
$
Test 627 (moul_s_4) : FAILED.$
    First line of code: {char *str = NULL; return test("%s!", str);}$
      expected return value : 7$
      your return value     : 8$
      expected output : "(null)!"$
      your output     : "(null)s!"$
      expected (nonprintable as hex) : "(null)!"$
      actual   (nonprintable as hex) : "(null)s!"$
$
Test 628 (moul_s_5_this_ones_a_doozy) : FAILED.$
    First line of code: {return test("%s",$
      expected return value : 11328$
      your return value     : 11330$
      expected output : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdecÅM-^Surc'Ã©taitunsoir"$
      your output     : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdecÅM-^Surc'Ã©taitunsoir"$
      expected (nonprintable as hex) : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdec\xc5\x93urc'\xc3\xa9taitunsoir"$
      actual   (nonprintable as hex) : "Lesenfantsnesententpastrestresbonmaiscac'estparcequ'ilsfontcacadansleurculotteetquecen'estvraimentpastrestrespropreNonmongroscoupdec\xc5\x93urc'\xc3\xa9taitunsoir"$
$
Test 629 (moul_d_1) : FAILED.$
    First line of code: {return test("%d", 42);}$
      expected return value : 2$
      your return value     : 3$
      expected output : "42"$
      your output     : "42d"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "42d"$
$
Test 630 (moul_d_2) : FAILED.$
    First line of code: {return test("Kashim a %d histoires Ã  raconter", 1001);}$
      expected return value : 38$
      your return value     : 39$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a 1001d histoires Ã  raconter"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a 1001d histoires \xc3\xa0 raconter"$
$
Test 631 (moul_d_3) : FAILED.$
    First line of code: {return test("Il fait au moins %d$
", -8000);}$
      expected return value : 25$
      your return value     : 26$
      expected output : "Il fait au moins -8000$
"$
      your output     : "Il fait au moins -8000d$
"$
      expected (nonprintable as hex) : "Il fait au moins -8000\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins -8000d\x0a"$
$
Test 632 (moul_d_4) : FAILED.$
    First line of code: {return test("%d", -0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "0"$
      your output     : "0d"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0d"$
$
Test 633 (moul_d_5) : FAILED.$
    First line of code: {return test("%d", 0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "0"$
      your output     : "0d"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0d"$
$
Test 634 (moul_d_6) : FAILED.$
    First line of code: {return test("%d", INT_MAX);}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483647"$
      your output     : "2147483647d"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647d"$
$
Test 635 (moul_d_7) : FAILED.$
    First line of code: {return test("%d", INT_MIN);}$
      expected return value : 12$
      your return value     : 13$
      expected output : "-2147483648"$
      your output     : "-2147483648d"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648d"$
$
Test 636 (moul_d_8) : FAILED.$
    First line of code: {return test("%d", INT_MIN - 1);}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483647"$
      your output     : "2147483647d"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647d"$
$
Test 637 (moul_d_9) : FAILED.$
    First line of code: {return test("%d", INT_MAX + 1);}$
      expected return value : 12$
      your return value     : 13$
      expected output : "-2147483648"$
      your output     : "-2147483648d"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648d"$
$
Test 638 (moul_d_10) : FAILED.$
    First line of code: {return test("%%d 0000042 == |%d|$
", 0000042);}$
      expected return value : 20$
      your return value     : 23$
      expected output : "%d 0000042 == |34|$
"$
      your output     : "%34d 0000042 == |0d|$
"$
      expected (nonprintable as hex) : "%d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "%34d 0000042 == |0d|\x0a"$
$
Test 639 (moul_d_11) : FAILED.$
    First line of code: {return test("%%d 	 == |%d|$
", '	');}$
      expected return value : 13$
      your return value     : 15$
      expected output : "%d 	 == |9|$
"$
      your output     : "%9d 	 == |0d|$
"$
      expected (nonprintable as hex) : "%d \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "%9d \x09 == |0d|\x0a"$
$
Test 640 (moul_d_12) : FAILED.$
    First line of code: {return test("%%d Lydie == |%d|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 22$
      expected output : "%d Lydie == |503|$
"$
      your output     : "%503d Lydie == |0d|$
"$
      expected (nonprintable as hex) : "%d Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "%503d Lydie == |0d|\x0a"$
$
Test 641 (moul_mix_1) : FAILED.$
    First line of code: {int r00 = 0; return test("Lalalala, %d%% des gens qui parlent Ã  Ly adorent %s. Ou Presque. %p", 100, "Ly", &r00);}$
      expected return value : 88$
      your return value     : 91$
      expected output : "Lalalala, 100% des gens qui parlent Ã  Ly adorent Ly. Ou Presque. 0x7ffee577b4ec"$
      your output     : "Lalalala, 100d%172653880 des gens qui parlent Ã  Ly adorent s. Ou Presque. 0x130a8p"$
      expected (nonprintable as hex) : "Lalalala, 100% des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. 0x7ffee577b4ec"$
      actual   (nonprintable as hex) : "Lalalala, 100d%172653880 des gens qui parlent \xc3\xa0 Ly adorent s. Ou Presque. 0x130a8p"$
$
Test 642 (moul_c_1) : FAILED.$
    First line of code: {return test("%c", 42);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "*"$
      your output     : "*c"$
      expected (nonprintable as hex) : "*"$
      actual   (nonprintable as hex) : "*c"$
$
Test 643 (moul_c_2) : FAILED.$
    First line of code: {return test("Kashim a %c histoires Ã  raconter", 1001);}$
      expected return value : 35$
      your return value     : 36$
      expected output : "Kashim a é histoires Ã  raconter"$
      your output     : "Kashim a éc histoires Ã  raconter"$
      expected (nonprintable as hex) : "Kashim a \xe9 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a \xe9c histoires \xc3\xa0 raconter"$
$
Test 644 (moul_c_3) : FAILED.$
    First line of code: {return test("Il fait au moins %c$
", -8000);}$
      expected return value : 20$
      your return value     : 22$
      expected output : "Il fait au moins À$
"$
      your output     : "Il fait au moins Àc$
"$
      expected (nonprintable as hex) : "Il fait au moins \xc0\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins \xc0c\x0a"$
$
Test 645 (moul_c_4) : FAILED.$
    First line of code: {return test("%c", -0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "^@"$
      your output     : "^@c"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00c"$
$
Test 646 (moul_c_5) : FAILED.$
    First line of code: {return test("%c", 0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "^@"$
      your output     : "^@c"$
      expected (nonprintable as hex) : "\x00"$
      actual   (nonprintable as hex) : "\x00c"$
$
Test 647 (moul_c_5b) : FAILED.$
    First line of code: {return test("%c$
", INT_MAX);}$
      expected return value : 2$
      your return value     : 3$
      expected output : "ÿ$
"$
      your output     : "ÿc$
"$
      expected (nonprintable as hex) : "\xff\x0a"$
      actual   (nonprintable as hex) : "\xffc\x0a"$
$
Test 648 (moul_c_6) : FAILED.$
    First line of code: {return test("%c$
", 'c');}$
      expected return value : 2$
      your return value     : 3$
      expected output : "c$
"$
      your output     : "cc$
"$
      expected (nonprintable as hex) : "c\x0a"$
      actual   (nonprintable as hex) : "cc\x0a"$
$
Test 649 (moul_c_7) : FAILED.$
    First line of code: {return test("%c$
", '$
');}$
      expected return value : 2$
      your return value     : 3$
      expected output : "$
$
"$
      your output     : "$
c$
"$
      expected (nonprintable as hex) : "\x0a\x0a"$
      actual   (nonprintable as hex) : "\x0ac\x0a"$
$
Test 650 (moul_c_8) : FAILED.$
    First line of code: {return test("%c", 'l');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "l"$
      your output     : "lc"$
      expected (nonprintable as hex) : "l"$
      actual   (nonprintable as hex) : "lc"$
$
Test 651 (moul_c_9) : FAILED.$
    First line of code: {return test("%c", 'y');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "y"$
      your output     : "yc"$
      expected (nonprintable as hex) : "y"$
      actual   (nonprintable as hex) : "yc"$
$
Test 652 (moul_c_10) : FAILED.$
    First line of code: {return test("%c", ' ');}$
      expected return value : 1$
      your return value     : 2$
      expected output : " "$
      your output     : " c"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " c"$
$
Test 653 (moul_c_11) : FAILED.$
    First line of code: {return test("%c", 'e');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "e"$
      your output     : "ec"$
      expected (nonprintable as hex) : "e"$
      actual   (nonprintable as hex) : "ec"$
$
Test 654 (moul_c_12) : FAILED.$
    First line of code: {return test("%c", 's');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "s"$
      your output     : "sc"$
      expected (nonprintable as hex) : "s"$
      actual   (nonprintable as hex) : "sc"$
$
Test 655 (moul_c_13) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "t"$
      your output     : "tc"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "tc"$
$
Test 656 (moul_c_14) : FAILED.$
    First line of code: {return test("%c", ' ');}$
      expected return value : 1$
      your return value     : 2$
      expected output : " "$
      your output     : " c"$
      expected (nonprintable as hex) : " "$
      actual   (nonprintable as hex) : " c"$
$
Test 657 (moul_c_15) : FAILED.$
    First line of code: {return test("%c", 'f');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "f"$
      your output     : "fc"$
      expected (nonprintable as hex) : "f"$
      actual   (nonprintable as hex) : "fc"$
$
Test 658 (moul_c_16) : FAILED.$
    First line of code: {return test("%c", 'a');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "a"$
      your output     : "ac"$
      expected (nonprintable as hex) : "a"$
      actual   (nonprintable as hex) : "ac"$
$
Test 659 (moul_c_17) : FAILED.$
    First line of code: {return test("%c", 'n');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "n"$
      your output     : "nc"$
      expected (nonprintable as hex) : "n"$
      actual   (nonprintable as hex) : "nc"$
$
Test 660 (moul_c_18) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "t"$
      your output     : "tc"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "tc"$
$
Test 661 (moul_c_19) : FAILED.$
    First line of code: {return test("%c", 'a');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "a"$
      your output     : "ac"$
      expected (nonprintable as hex) : "a"$
      actual   (nonprintable as hex) : "ac"$
$
Test 662 (moul_c_20) : FAILED.$
    First line of code: {return test("%c", 's');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "s"$
      your output     : "sc"$
      expected (nonprintable as hex) : "s"$
      actual   (nonprintable as hex) : "sc"$
$
Test 663 (moul_c_21) : FAILED.$
    First line of code: {return test("%c", 't');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "t"$
      your output     : "tc"$
      expected (nonprintable as hex) : "t"$
      actual   (nonprintable as hex) : "tc"$
$
Test 664 (moul_c_22) : FAILED.$
    First line of code: {return test("%c", 'i');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "i"$
      your output     : "ic"$
      expected (nonprintable as hex) : "i"$
      actual   (nonprintable as hex) : "ic"$
$
Test 665 (moul_c_23) : FAILED.$
    First line of code: {return test("%c", 'q');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "q"$
      your output     : "qc"$
      expected (nonprintable as hex) : "q"$
      actual   (nonprintable as hex) : "qc"$
$
Test 666 (moul_c_24) : FAILED.$
    First line of code: {return test("%c", 'u');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "u"$
      your output     : "uc"$
      expected (nonprintable as hex) : "u"$
      actual   (nonprintable as hex) : "uc"$
$
Test 667 (moul_c_25) : FAILED.$
    First line of code: {return test("%c", 'e');}$
      expected return value : 1$
      your return value     : 2$
      expected output : "e"$
      your output     : "ec"$
      expected (nonprintable as hex) : "e"$
      actual   (nonprintable as hex) : "ec"$
$
Test 668 (moul_c_26) : FAILED.$
    First line of code: {return test("%c$
", '!');}$
      expected return value : 2$
      your return value     : 3$
      expected output : "!$
"$
      your output     : "!c$
"$
      expected (nonprintable as hex) : "!\x0a"$
      actual   (nonprintable as hex) : "!c\x0a"$
$
Test 669 (moul_c_27) : FAILED.$
    First line of code: {return test("%c$
", '^M');}$
      expected return value : 2$
      your return value     : 3$
      expected output : "^M$
"$
      your output     : "^Mc$
"$
      expected (nonprintable as hex) : "\x0d\x0a"$
      actual   (nonprintable as hex) : "\x0dc\x0a"$
$
Test 670 (moul_c_28) : FAILED.$
    First line of code: {return test("%c$
", '	');}$
      expected return value : 2$
      your return value     : 3$
      expected output : "	$
"$
      your output     : "	c$
"$
      expected (nonprintable as hex) : "\x09\x0a"$
      actual   (nonprintable as hex) : "\x09c\x0a"$
$
Test 671 (moul_i_1) : FAILED.$
    First line of code: {return test("%i", 42);}$
      expected return value : 2$
      your return value     : 3$
      expected output : "42"$
      your output     : "42i"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "42i"$
$
Test 672 (moul_i_2) : FAILED.$
    First line of code: {return test("Kashim a %i histoires Ã  raconter", 1001);}$
      expected return value : 38$
      your return value     : 39$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a 1001i histoires Ã  raconter"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a 1001i histoires \xc3\xa0 raconter"$
$
Test 673 (moul_i_3) : FAILED.$
    First line of code: {return test("Il fait au moins %i$
", -8000);}$
      expected return value : 25$
      your return value     : 26$
      expected output : "Il fait au moins -8000$
"$
      your output     : "Il fait au moins -8000i$
"$
      expected (nonprintable as hex) : "Il fait au moins -8000\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins -8000i\x0a"$
$
Test 674 (moul_i_4) : FAILED.$
    First line of code: {return test("%i", -0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "0"$
      your output     : "0i"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0i"$
$
Test 675 (moul_i_5) : FAILED.$
    First line of code: {return test("%i", 0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "0"$
      your output     : "0i"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0i"$
$
Test 676 (moul_i_6) : FAILED.$
    First line of code: {return test("%i", INT_MAX);}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483647"$
      your output     : "2147483647i"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647i"$
$
Test 677 (moul_i_7) : FAILED.$
    First line of code: {return test("%i", INT_MIN);}$
      expected return value : 12$
      your return value     : 13$
      expected output : "-2147483648"$
      your output     : "-2147483648i"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648i"$
$
Test 678 (moul_i_8) : FAILED.$
    First line of code: {return test("%i", INT_MIN - 1);}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483647"$
      your output     : "2147483647i"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647i"$
$
Test 679 (moul_i_9) : FAILED.$
    First line of code: {return test("%i", INT_MAX + 1);}$
      expected return value : 12$
      your return value     : 13$
      expected output : "-2147483648"$
      your output     : "-2147483648i"$
      expected (nonprintable as hex) : "-2147483648"$
      actual   (nonprintable as hex) : "-2147483648i"$
$
Test 680 (moul_i_10) : FAILED.$
    First line of code: {return test("%%i 0000042 == |%i|$
", 0000042);}$
      expected return value : 20$
      your return value     : 23$
      expected output : "%i 0000042 == |34|$
"$
      your output     : "%34i 0000042 == |0i|$
"$
      expected (nonprintable as hex) : "%i 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "%34i 0000042 == |0i|\x0a"$
$
Test 681 (moul_i_11) : FAILED.$
    First line of code: {return test("%%i 	 == |%i|$
", '	');}$
      expected return value : 13$
      your return value     : 15$
      expected output : "%i 	 == |9|$
"$
      your output     : "%9i 	 == |0i|$
"$
      expected (nonprintable as hex) : "%i \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "%9i \x09 == |0i|\x0a"$
$
Test 682 (moul_i_12) : FAILED.$
    First line of code: {return test("%%i Lydie == |%i|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 22$
      expected output : "%i Lydie == |503|$
"$
      your output     : "%503i Lydie == |0i|$
"$
      expected (nonprintable as hex) : "%i Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "%503i Lydie == |0i|\x0a"$
$
Test 683 (moul_u_1) : FAILED.$
    First line of code: {return test("%u", 42);}$
      expected return value : 2$
      your return value     : 3$
      expected output : "42"$
      your output     : "42u"$
      expected (nonprintable as hex) : "42"$
      actual   (nonprintable as hex) : "42u"$
$
Test 684 (moul_u_2) : FAILED.$
    First line of code: {return test("Kashim a %u histoires Ã  raconter", 1001);}$
      expected return value : 38$
      your return value     : 39$
      expected output : "Kashim a 1001 histoires Ã  raconter"$
      your output     : "Kashim a 1001u histoires Ã  raconter"$
      expected (nonprintable as hex) : "Kashim a 1001 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a 1001u histoires \xc3\xa0 raconter"$
$
Test 685 (moul_u_3) : FAILED.$
    First line of code: {return test("Il fait au moins %u$
", -8000);}$
      expected return value : 30$
      your return value     : 31$
      expected output : "Il fait au moins 4294959296$
"$
      your output     : "Il fait au moins 4294959296u$
"$
      expected (nonprintable as hex) : "Il fait au moins 4294959296\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins 4294959296u\x0a"$
$
Test 686 (moul_u_4) : FAILED.$
    First line of code: {return test("%u", -0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "0"$
      your output     : "0u"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0u"$
$
Test 687 (moul_u_5) : FAILED.$
    First line of code: {return test("%u", 0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "0"$
      your output     : "0u"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0u"$
$
Test 688 (moul_u_6) : FAILED.$
    First line of code: {return test("%u", INT_MAX);}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483647"$
      your output     : "2147483647u"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647u"$
$
Test 689 (moul_u_7) : FAILED.$
    First line of code: {return test("%u", INT_MIN);}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483648"$
      your output     : "2147483648u"$
      expected (nonprintable as hex) : "2147483648"$
      actual   (nonprintable as hex) : "2147483648u"$
$
Test 690 (moul_u_8) : FAILED.$
    First line of code: {return test("%u", INT_MIN - 1);}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483647"$
      your output     : "2147483647u"$
      expected (nonprintable as hex) : "2147483647"$
      actual   (nonprintable as hex) : "2147483647u"$
$
Test 691 (moul_u_9) : FAILED.$
    First line of code: {return test("%u", INT_MAX + 1);}$
      expected return value : 11$
      your return value     : 12$
      expected output : "2147483648"$
      your output     : "2147483648u"$
      expected (nonprintable as hex) : "2147483648"$
      actual   (nonprintable as hex) : "2147483648u"$
$
Test 692 (moul_u_10) : FAILED.$
    First line of code: {return test("%%u 0000042 == |%u|$
", 0000042);}$
      expected return value : 20$
      your return value     : 23$
      expected output : "%u 0000042 == |34|$
"$
      your output     : "%34u 0000042 == |0u|$
"$
      expected (nonprintable as hex) : "%u 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "%34u 0000042 == |0u|\x0a"$
$
Test 693 (moul_u_11) : FAILED.$
    First line of code: {return test("%%u 	 == |%u|$
", '	');}$
      expected return value : 13$
      your return value     : 15$
      expected output : "%u 	 == |9|$
"$
      your output     : "%9u 	 == |0u|$
"$
      expected (nonprintable as hex) : "%u \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "%9u \x09 == |0u|\x0a"$
$
Test 694 (moul_u_12) : FAILED.$
    First line of code: {return test("%%u Lydie == |%u|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 22$
      expected output : "%u Lydie == |503|$
"$
      your output     : "%503u Lydie == |0u|$
"$
      expected (nonprintable as hex) : "%u Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "%503u Lydie == |0u|\x0a"$
$
Test 695 (moul_x_1) : FAILED.$
    First line of code: {return test("%x", 42);}$
      expected return value : 2$
      your return value     : 3$
      expected output : "2a"$
      your output     : "2ax"$
      expected (nonprintable as hex) : "2a"$
      actual   (nonprintable as hex) : "2ax"$
$
Test 696 (moul_x_2) : FAILED.$
    First line of code: {return test("Kashim a %x histoires Ã  raconter", 1001);}$
      expected return value : 37$
      your return value     : 38$
      expected output : "Kashim a 3e9 histoires Ã  raconter"$
      your output     : "Kashim a 3e9x histoires Ã  raconter"$
      expected (nonprintable as hex) : "Kashim a 3e9 histoires \xc3\xa0 raconter"$
      actual   (nonprintable as hex) : "Kashim a 3e9x histoires \xc3\xa0 raconter"$
$
Test 697 (moul_x_3) : FAILED.$
    First line of code: {return test("Il fait au moins %x$
", -8000);}$
      expected return value : 28$
      your return value     : 29$
      expected output : "Il fait au moins ffffe0c0$
"$
      your output     : "Il fait au moins ffffe0c0x$
"$
      expected (nonprintable as hex) : "Il fait au moins ffffe0c0\x0a"$
      actual   (nonprintable as hex) : "Il fait au moins ffffe0c0x\x0a"$
$
Test 698 (moul_x_4) : FAILED.$
    First line of code: {return test("%x", -0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "0"$
      your output     : "0x"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0x"$
$
Test 699 (moul_x_5) : FAILED.$
    First line of code: {return test("%x", 0);}$
      expected return value : 1$
      your return value     : 2$
      expected output : "0"$
      your output     : "0x"$
      expected (nonprintable as hex) : "0"$
      actual   (nonprintable as hex) : "0x"$
$
Test 700 (moul_x_6) : FAILED.$
    First line of code: {return test("%x", INT_MAX);}$
      expected return value : 8$
      your return value     : 9$
      expected output : "7fffffff"$
      your output     : "7fffffffx"$
      expected (nonprintable as hex) : "7fffffff"$
      actual   (nonprintable as hex) : "7fffffffx"$
$
Test 701 (moul_x_7) : FAILED.$
    First line of code: {return test("%x", INT_MIN);}$
      expected return value : 8$
      your return value     : 9$
      expected output : "80000000"$
      your output     : "80000000x"$
      expected (nonprintable as hex) : "80000000"$
      actual   (nonprintable as hex) : "80000000x"$
$
Test 702 (moul_x_8) : FAILED.$
    First line of code: {return test("%x", INT_MIN - 1);}$
      expected return value : 8$
      your return value     : 9$
      expected output : "7fffffff"$
      your output     : "7fffffffx"$
      expected (nonprintable as hex) : "7fffffff"$
      actual   (nonprintable as hex) : "7fffffffx"$
$
Test 703 (moul_x_9) : FAILED.$
    First line of code: {return test("%x", INT_MAX + 1);}$
      expected return value : 8$
      your return value     : 9$
      expected output : "80000000"$
      your output     : "80000000x"$
      expected (nonprintable as hex) : "80000000"$
      actual   (nonprintable as hex) : "80000000x"$
$
Test 704 (moul_x_10) : FAILED.$
    First line of code: {return test("%%x 0000042 == |%x|$
", 0000042);}$
      expected return value : 20$
      your return value     : 23$
      expected output : "%x 0000042 == |22|$
"$
      your output     : "%22x 0000042 == |0x|$
"$
      expected (nonprintable as hex) : "%x 0000042 == |22|\x0a"$
      actual   (nonprintable as hex) : "%22x 0000042 == |0x|\x0a"$
$
Test 705 (moul_x_11) : FAILED.$
    First line of code: {return test("%%x 	 == |%x|$
", '	');}$
      expected return value : 13$
      your return value     : 15$
      expected output : "%x 	 == |9|$
"$
      your output     : "%9x 	 == |0x|$
"$
      expected (nonprintable as hex) : "%x \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "%9x \x09 == |0x|\x0a"$
$
Test 706 (moul_x_12) : FAILED.$
    First line of code: {return test("%%x Lydie == |%x|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 22$
      expected output : "%x Lydie == |1f7|$
"$
      your output     : "%1f7x Lydie == |0x|$
"$
      expected (nonprintable as hex) : "%x Lydie == |1f7|\x0a"$
      actual   (nonprintable as hex) : "%1f7x Lydie == |0x|\x0a"$
$
Test 707 (moul_prec_1) : FAILED.$
    First line of code: {return test("%%-5.3s LYDI == |%-5.3s|$
", "LYDI");}$
      expected return value : 25$
      your return value     : 36$
      expected output : "%-5.3s LYDI == |LYD  |$
"$
      your output     : "%LYD  -5.3s LYDI == |(nu  -5.3s|$
"$
      expected (nonprintable as hex) : "%-5.3s LYDI == |LYD  |\x0a"$
      actual   (nonprintable as hex) : "%LYD  -5.3s LYDI == |(nu  -5.3s|\x0a"$
$
Test 708 (moul_prec_3) : FAILED.$
    First line of code: {return test("%%04.5i 42 == |%04.5i|$
", 42);}$
      expected return value : 23$
      your return value     : 34$
      expected output : "%04.5i 42 == |00042|$
"$
      your output     : "%0004204.5i 42 == |0000004.5i|$
"$
      expected (nonprintable as hex) : "%04.5i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "%0004204.5i 42 == |0000004.5i|\x0a"$
$
Test 709 (moul_prec_4) : FAILED.$
    First line of code: {return test("%%04.3i 42 == |%04.3i|$
", 42);}$
      expected return value : 22$
      your return value     : 31$
      expected output : "%04.3i 42 == | 042|$
"$
      your output     : "% 04204.3i 42 == | 00004.3i|$
"$
      expected (nonprintable as hex) : "%04.3i 42 == | 042|\x0a"$
      actual   (nonprintable as hex) : "% 04204.3i 42 == | 00004.3i|\x0a"$
$
Test 710 (moul_prec_5) : FAILED.$
    First line of code: {return test("%%04.2i 42 == |%04.2i|$
", 42);}$
      expected return value : 22$
      your return value     : 31$
      expected output : "%04.2i 42 == |  42|$
"$
      your output     : "%  4204.2i 42 == |  0004.2i|$
"$
      expected (nonprintable as hex) : "%04.2i 42 == |  42|\x0a"$
      actual   (nonprintable as hex) : "%  4204.2i 42 == |  0004.2i|\x0a"$
$
Test 711 (moul_zeropad_1) : FAILED.$
    First line of code: {return test("%%04i 42 == |%04i|$
", 42);}$
      expected return value : 19$
      your return value     : 27$
      expected output : "%04i 42 == |0042|$
"$
      your output     : "%004204i 42 == |000004i|$
"$
      expected (nonprintable as hex) : "%04i 42 == |0042|\x0a"$
      actual   (nonprintable as hex) : "%004204i 42 == |000004i|\x0a"$
$
Test 712 (moul_zeropad_2) : FAILED.$
    First line of code: {return test("%%05i 42 == |%05i|$
", 42);}$
      expected return value : 20$
      your return value     : 29$
      expected output : "%05i 42 == |00042|$
"$
      your output     : "%0004205i 42 == |0000005i|$
"$
      expected (nonprintable as hex) : "%05i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "%0004205i 42 == |0000005i|\x0a"$
$
Test 713 (moul_zeropad_3) : FAILED.$
    First line of code: {return test("%%0i 42 == |%0i|$
", 42);}$
      expected return value : 16$
      your return value     : 19$
      expected output : "%0i 42 == |42|$
"$
      your output     : "%420i 42 == |00i|$
"$
      expected (nonprintable as hex) : "%0i 42 == |42|\x0a"$
      actual   (nonprintable as hex) : "%420i 42 == |00i|\x0a"$
$
Test 714 (moul_zeropad_4) : FAILED.$
    First line of code: {return test("%%0d 0000042 == |%0d|$
", 0000042);}$
      expected return value : 22$
      your return value     : 25$
      expected output : "%0d 0000042 == |34|$
"$
      your output     : "%340d 0000042 == |00d|$
"$
      expected (nonprintable as hex) : "%0d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "%340d 0000042 == |00d|\x0a"$
$
Test 715 (moul_leftjusty_1) : FAILED.$
    First line of code: {return test("%%-i 42 == %-i$
", 42);}$
      expected return value : 14$
      your return value     : 17$
      expected output : "%-i 42 == 42$
"$
      your output     : "%42-i 42 == 0-i$
"$
      expected (nonprintable as hex) : "%-i 42 == 42\x0a"$
      actual   (nonprintable as hex) : "%42-i 42 == 0-i\x0a"$
$
Test 716 (moul_leftjusty_2) : FAILED.$
    First line of code: {return test("%%-d 42 == %-d$
", INT_MIN);}$
      expected return value : 24$
      your return value     : 27$
      expected output : "%-d 42 == -2147483648$
"$
      your output     : "%-2147483648-d 42 == 0-d$
"$
      expected (nonprintable as hex) : "%-d 42 == -2147483648\x0a"$
      actual   (nonprintable as hex) : "%-2147483648-d 42 == 0-d\x0a"$
$
Test 717 (moul_leftjusty_3) : FAILED.$
    First line of code: {return test("%%-i -42 == %-i$
", -42);}$
      expected return value : 16$
      your return value     : 19$
      expected output : "%-i -42 == -42$
"$
      your output     : "%-42-i -42 == 0-i$
"$
      expected (nonprintable as hex) : "%-i -42 == -42\x0a"$
      actual   (nonprintable as hex) : "%-42-i -42 == 0-i\x0a"$
$
Test 718 (moul_leftjusty_4) : FAILED.$
    First line of code: {return test("%%-4d 42 == |%-4d|$
", 42);}$
      expected return value : 19$
      your return value     : 27$
      expected output : "%-4d 42 == |42  |$
"$
      your output     : "%42  -4d 42 == |0   -4d|$
"$
      expected (nonprintable as hex) : "%-4d 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "%42  -4d 42 == |0   -4d|\x0a"$
$
Test 719 (moul_leftjusty_5) : FAILED.$
    First line of code: {return test("%%-5d -42 == |%-5d|$
", -42);}$
      expected return value : 22$
      your return value     : 30$
      expected output : "%-5d -42 == |-42  |$
"$
      your output     : "%-42  -5d -42 == |0    -5d|$
"$
      expected (nonprintable as hex) : "%-5d -42 == |-42  |\x0a"$
      actual   (nonprintable as hex) : "%-42  -5d -42 == |0    -5d|\x0a"$
$
Test 720 (moul_leftjusty_6) : FAILED.$
    First line of code: {return test("|%3i|%-3i|$
", 42, 42);}$
      expected return value : 11$
      your return value     : 16$
      expected output : "| 42|42 |$
"$
      your output     : "| 423i|42 -3i|$
"$
      expected (nonprintable as hex) : "| 42|42 |\x0a"$
      actual   (nonprintable as hex) : "| 423i|42 -3i|\x0a"$
$
Test 721 (moul_leftjusty_7) : FAILED.$
    First line of code: {return test("%%-4i 42 == |%-4i|$
", 42);}$
      expected return value : 19$
      your return value     : 27$
      expected output : "%-4i 42 == |42  |$
"$
      your output     : "%42  -4i 42 == |0   -4i|$
"$
      expected (nonprintable as hex) : "%-4i 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "%42  -4i 42 == |0   -4i|\x0a"$
$
Test 722 (moul_notmandatory_star_1) : FAILED.$
    First line of code: {return test("%%-*.3s LYDI == |%-*.3s|$
", 5, "LYDI");}$
    SEGFAULT$
$
Test 723 (moul_notmandatory_star_3) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 5, 42);}$
    Timed out$
$
Test 724 (moul_notmandatory_star_4) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 3, 42);}$
    Timed out$
$
Test 725 (moul_notmandatory_star_5) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 2, 42);}$
    Timed out$
$
Test 726 (new2019_star_1) : FAILED.$
    First line of code: {return test("%*s", 32, "abc");}$
      expected return value : 35$
      your return value     : 37$
      expected output : "                             abc"$
      your output     : "                             abc*s"$
      expected (nonprintable as hex) : "                             abc"$
      actual   (nonprintable as hex) : "                             abc*s"$
$
Test 727 (new2019_star_2) : FAILED.$
    First line of code: {return test("%-*s", 32, "abc");}$
      expected return value : 35$
      your return value     : 38$
      expected output : "abc                             "$
      your output     : "abc                             -*s"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             -*s"$
$
Test 728 (new2019_star_3) : FAILED.$
    First line of code: {return test("%*s", 3, "hello");}$
      expected return value : 5$
      your return value     : 7$
      expected output : "hello"$
      your output     : "hello*s"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hello*s"$
$
Test 729 (new2019_star_4) : FAILED.$
    First line of code: {return test("%.*s", 3, "hello");}$
      expected return value : 3$
      your return value     : 6$
      expected output : "hel"$
      your output     : "hel.*s"$
      expected (nonprintable as hex) : "hel"$
      actual   (nonprintable as hex) : "hel.*s"$
$
Test 730 (new2019_star_5) : FAILED.$
    First line of code: {return test("%.*s", 0, "hello");}$
      expected return value : 0$
      your return value     : 3$
      expected output : ""$
      your output     : ".*s"$
      expected (nonprintable as hex) : ""$
      actual   (nonprintable as hex) : ".*s"$
$
Test 731 (new2019_star_6) : FAILED.$
    First line of code: {return test("%-*.*s", 7, 3, "yolo");}$
      expected return value : 7$
      your return value     : 13$
      expected output : "yol    "$
      your output     : "yol    -*.*s"$
      expected (nonprintable as hex) : "yol    "$
      actual   (nonprintable as hex) : "yol    -*.*s"$
$
Test 732 (new2019_star_7) : FAILED.$
    First line of code: {return test("%*i", 4, 94827);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "94827"$
      your output     : "94827*i"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827*i"$
$
Test 733 (new2019_star_8) : FAILED.$
    First line of code: {return test("%*i", 14, 94827);}$
      expected return value : 15$
      your return value     : 17$
      expected output : "         94827"$
      your output     : "         94827*i"$
      expected (nonprintable as hex) : "         94827"$
      actual   (nonprintable as hex) : "         94827*i"$
$
Test 734 (new2019_star_9) : FAILED.$
    First line of code: {return test("%.*i", 6, -3);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "-000003"$
      your output     : "-000003.*i"$
      expected (nonprintable as hex) : "-000003"$
      actual   (nonprintable as hex) : "-000003.*i"$
$
Test 735 (new2019_star_10) : FAILED.$
    First line of code: {return test("%0*i", 7, -54);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "-000054"$
      your output     : "-0000540*i"$
      expected (nonprintable as hex) : "-000054"$
      actual   (nonprintable as hex) : "-0000540*i"$
$
Test 736 (new2019_negstar_1) : FAILED.$
    First line of code: {return test("%*s", -32, "abc");}$
      expected return value : 35$
      your return value     : 37$
      expected output : "abc                             "$
      your output     : "abc                             *s"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             *s"$
$
Test 737 (new2019_negstar_2) : FAILED.$
    First line of code: {return test("%-*s", -32, "abc");}$
      expected return value : 35$
      your return value     : 38$
      expected output : "abc                             "$
      your output     : "abc                             -*s"$
      expected (nonprintable as hex) : "abc                             "$
      actual   (nonprintable as hex) : "abc                             -*s"$
$
Test 738 (new2019_negstar_3) : FAILED.$
    First line of code: {return test("%*s", -3, "hello");}$
      expected return value : 5$
      your return value     : 7$
      expected output : "hello"$
      your output     : "hello*s"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hello*s"$
$
Test 739 (new2019_negstar_4) : FAILED.$
    First line of code: {return test("%.*s", -3, "hello");}$
      expected return value : 5$
      your return value     : 8$
      expected output : "hello"$
      your output     : "hello.*s"$
      expected (nonprintable as hex) : "hello"$
      actual   (nonprintable as hex) : "hello.*s"$
$
Test 740 (new2019_negstar_5) : FAILED.$
    First line of code: {return test("%-*.*s", -7, -3, "yolo");}$
      expected return value : 7$
      your return value     : 13$
      expected output : "yolo   "$
      your output     : "yolo   -*.*s"$
      expected (nonprintable as hex) : "yolo   "$
      actual   (nonprintable as hex) : "yolo   -*.*s"$
$
Test 741 (new2019_negstar_6) : FAILED.$
    First line of code: {return test("%*i", -4, 94827);}$
      expected return value : 5$
      your return value     : 7$
      expected output : "94827"$
      your output     : "94827*i"$
      expected (nonprintable as hex) : "94827"$
      actual   (nonprintable as hex) : "94827*i"$
$
Test 742 (new2019_negstar_7) : FAILED.$
    First line of code: {return test("%*i", -14, 94827);}$
      expected return value : 15$
      your return value     : 17$
      expected output : "94827         "$
      your output     : "94827         *i"$
      expected (nonprintable as hex) : "94827         "$
      actual   (nonprintable as hex) : "94827         *i"$
$
Test 743 (new2019_negstar_8) : FAILED.$
    First line of code: {return test("%.*i", -6, -3);}$
      expected return value : 2$
      your return value     : 5$
      expected output : "-3"$
      your output     : "-3.*i"$
      expected (nonprintable as hex) : "-3"$
      actual   (nonprintable as hex) : "-3.*i"$
$
Test 744 (new2019_negstar_9) : FAILED.$
    First line of code: {return test("%0*i", -7, -54);}$
      expected return value : 7$
      your return value     : 11$
      expected output : "-54    "$
      your output     : "-54    0*i"$
      expected (nonprintable as hex) : "-54    "$
      actual   (nonprintable as hex) : "-54    0*i"$
$
######### printf_lover_v2 ##########
